//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v1.0.6-b27-fcs 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2012.06.11 at 10:33:54 AM PDT 
//


package com.sun.identity.liberty.ws.common.jaxb.ps.impl;

public class RegisterNameIdentifierRequestTypeImpl
    extends com.sun.identity.liberty.ws.common.jaxb.protocol.impl.RequestAbstractTypeImpl
    implements com.sun.identity.liberty.ws.common.jaxb.ps.RegisterNameIdentifierRequestType, com.sun.xml.bind.JAXBObject, com.sun.identity.federation.jaxb.entityconfig.impl.runtime.UnmarshallableObject, com.sun.identity.federation.jaxb.entityconfig.impl.runtime.XMLSerializable, com.sun.identity.federation.jaxb.entityconfig.impl.runtime.ValidatableObject
{

    protected com.sun.xml.bind.util.ListImpl _Extension;
    protected com.sun.identity.liberty.ws.common.jaxb.assertion.NameIdentifierType _IDPProvidedNameIdentifier;
    protected com.sun.identity.liberty.ws.common.jaxb.assertion.NameIdentifierType _OldProvidedNameIdentifier;
    protected com.sun.identity.liberty.ws.common.jaxb.assertion.NameIdentifierType _SPProvidedNameIdentifier;
    protected java.lang.String _ProviderID;
    protected java.lang.String _RelayState;
    public final static java.lang.Class version = (com.sun.identity.liberty.ws.common.jaxb.ps.impl.JAXBVersion.class);
    private static com.sun.msv.grammar.Grammar schemaFragment;

    private final static java.lang.Class PRIMARY_INTERFACE_CLASS() {
        return (com.sun.identity.liberty.ws.common.jaxb.ps.RegisterNameIdentifierRequestType.class);
    }

    protected com.sun.xml.bind.util.ListImpl _getExtension() {
        if (_Extension == null) {
            _Extension = new com.sun.xml.bind.util.ListImpl(new java.util.ArrayList());
        }
        return _Extension;
    }

    public java.util.List getExtension() {
        return _getExtension();
    }

    public com.sun.identity.liberty.ws.common.jaxb.assertion.NameIdentifierType getIDPProvidedNameIdentifier() {
        return _IDPProvidedNameIdentifier;
    }

    public void setIDPProvidedNameIdentifier(com.sun.identity.liberty.ws.common.jaxb.assertion.NameIdentifierType value) {
        _IDPProvidedNameIdentifier = value;
    }

    public com.sun.identity.liberty.ws.common.jaxb.assertion.NameIdentifierType getOldProvidedNameIdentifier() {
        return _OldProvidedNameIdentifier;
    }

    public void setOldProvidedNameIdentifier(com.sun.identity.liberty.ws.common.jaxb.assertion.NameIdentifierType value) {
        _OldProvidedNameIdentifier = value;
    }

    public com.sun.identity.liberty.ws.common.jaxb.assertion.NameIdentifierType getSPProvidedNameIdentifier() {
        return _SPProvidedNameIdentifier;
    }

    public void setSPProvidedNameIdentifier(com.sun.identity.liberty.ws.common.jaxb.assertion.NameIdentifierType value) {
        _SPProvidedNameIdentifier = value;
    }

    public java.lang.String getProviderID() {
        return _ProviderID;
    }

    public void setProviderID(java.lang.String value) {
        _ProviderID = value;
    }

    public java.lang.String getRelayState() {
        return _RelayState;
    }

    public void setRelayState(java.lang.String value) {
        _RelayState = value;
    }

    public com.sun.identity.federation.jaxb.entityconfig.impl.runtime.UnmarshallingEventHandler createUnmarshaller(com.sun.identity.federation.jaxb.entityconfig.impl.runtime.UnmarshallingContext context) {
        return new com.sun.identity.liberty.ws.common.jaxb.ps.impl.RegisterNameIdentifierRequestTypeImpl.Unmarshaller(context);
    }

    public void serializeBody(com.sun.identity.federation.jaxb.entityconfig.impl.runtime.XMLSerializer context)
        throws org.xml.sax.SAXException
    {
        int idx1 = 0;
        final int len1 = ((_Extension == null)? 0 :_Extension.size());
        super.serializeBody(context);
        while (idx1 != len1) {
            if (_Extension.get(idx1) instanceof javax.xml.bind.Element) {
                context.childAsBody(((com.sun.xml.bind.JAXBObject) _Extension.get(idx1 ++)), "Extension");
            } else {
                context.startElement("urn:liberty:iff:2003-08", "Extension");
                int idx_0 = idx1;
                context.childAsURIs(((com.sun.xml.bind.JAXBObject) _Extension.get(idx_0 ++)), "Extension");
                context.endNamespaceDecls();
                int idx_1 = idx1;
                context.childAsAttributes(((com.sun.xml.bind.JAXBObject) _Extension.get(idx_1 ++)), "Extension");
                context.endAttributes();
                context.childAsBody(((com.sun.xml.bind.JAXBObject) _Extension.get(idx1 ++)), "Extension");
                context.endElement();
            }
        }
        context.startElement("urn:liberty:iff:2003-08", "ProviderID");
        context.endNamespaceDecls();
        context.endAttributes();
        try {
            context.text(((java.lang.String) _ProviderID), "ProviderID");
        } catch (java.lang.Exception e) {
            com.sun.identity.federation.jaxb.entityconfig.impl.runtime.Util.handlePrintConversionException(this, e, context);
        }
        context.endElement();
        if (_IDPProvidedNameIdentifier instanceof javax.xml.bind.Element) {
            context.childAsBody(((com.sun.xml.bind.JAXBObject) _IDPProvidedNameIdentifier), "IDPProvidedNameIdentifier");
        } else {
            context.startElement("urn:liberty:iff:2003-08", "IDPProvidedNameIdentifier");
            context.childAsURIs(((com.sun.xml.bind.JAXBObject) _IDPProvidedNameIdentifier), "IDPProvidedNameIdentifier");
            context.endNamespaceDecls();
            context.childAsAttributes(((com.sun.xml.bind.JAXBObject) _IDPProvidedNameIdentifier), "IDPProvidedNameIdentifier");
            context.endAttributes();
            context.childAsBody(((com.sun.xml.bind.JAXBObject) _IDPProvidedNameIdentifier), "IDPProvidedNameIdentifier");
            context.endElement();
        }
        if (_SPProvidedNameIdentifier instanceof javax.xml.bind.Element) {
            context.childAsBody(((com.sun.xml.bind.JAXBObject) _SPProvidedNameIdentifier), "SPProvidedNameIdentifier");
        } else {
            context.startElement("urn:liberty:iff:2003-08", "SPProvidedNameIdentifier");
            context.childAsURIs(((com.sun.xml.bind.JAXBObject) _SPProvidedNameIdentifier), "SPProvidedNameIdentifier");
            context.endNamespaceDecls();
            context.childAsAttributes(((com.sun.xml.bind.JAXBObject) _SPProvidedNameIdentifier), "SPProvidedNameIdentifier");
            context.endAttributes();
            context.childAsBody(((com.sun.xml.bind.JAXBObject) _SPProvidedNameIdentifier), "SPProvidedNameIdentifier");
            context.endElement();
        }
        if (_OldProvidedNameIdentifier instanceof javax.xml.bind.Element) {
            context.childAsBody(((com.sun.xml.bind.JAXBObject) _OldProvidedNameIdentifier), "OldProvidedNameIdentifier");
        } else {
            context.startElement("urn:liberty:iff:2003-08", "OldProvidedNameIdentifier");
            context.childAsURIs(((com.sun.xml.bind.JAXBObject) _OldProvidedNameIdentifier), "OldProvidedNameIdentifier");
            context.endNamespaceDecls();
            context.childAsAttributes(((com.sun.xml.bind.JAXBObject) _OldProvidedNameIdentifier), "OldProvidedNameIdentifier");
            context.endAttributes();
            context.childAsBody(((com.sun.xml.bind.JAXBObject) _OldProvidedNameIdentifier), "OldProvidedNameIdentifier");
            context.endElement();
        }
        if (_RelayState!= null) {
            context.startElement("urn:liberty:iff:2003-08", "RelayState");
            context.endNamespaceDecls();
            context.endAttributes();
            try {
                context.text(((java.lang.String) _RelayState), "RelayState");
            } catch (java.lang.Exception e) {
                com.sun.identity.federation.jaxb.entityconfig.impl.runtime.Util.handlePrintConversionException(this, e, context);
            }
            context.endElement();
        }
    }

    public void serializeAttributes(com.sun.identity.federation.jaxb.entityconfig.impl.runtime.XMLSerializer context)
        throws org.xml.sax.SAXException
    {
        int idx1 = 0;
        final int len1 = ((_Extension == null)? 0 :_Extension.size());
        super.serializeAttributes(context);
        while (idx1 != len1) {
            if (_Extension.get(idx1) instanceof javax.xml.bind.Element) {
                context.childAsAttributes(((com.sun.xml.bind.JAXBObject) _Extension.get(idx1 ++)), "Extension");
            } else {
                idx1 += 1;
            }
        }
        if (_IDPProvidedNameIdentifier instanceof javax.xml.bind.Element) {
            context.childAsAttributes(((com.sun.xml.bind.JAXBObject) _IDPProvidedNameIdentifier), "IDPProvidedNameIdentifier");
        }
        if (_SPProvidedNameIdentifier instanceof javax.xml.bind.Element) {
            context.childAsAttributes(((com.sun.xml.bind.JAXBObject) _SPProvidedNameIdentifier), "SPProvidedNameIdentifier");
        }
        if (_OldProvidedNameIdentifier instanceof javax.xml.bind.Element) {
            context.childAsAttributes(((com.sun.xml.bind.JAXBObject) _OldProvidedNameIdentifier), "OldProvidedNameIdentifier");
        }
    }

    public void serializeURIs(com.sun.identity.federation.jaxb.entityconfig.impl.runtime.XMLSerializer context)
        throws org.xml.sax.SAXException
    {
        int idx1 = 0;
        final int len1 = ((_Extension == null)? 0 :_Extension.size());
        super.serializeURIs(context);
        while (idx1 != len1) {
            if (_Extension.get(idx1) instanceof javax.xml.bind.Element) {
                context.childAsURIs(((com.sun.xml.bind.JAXBObject) _Extension.get(idx1 ++)), "Extension");
            } else {
                idx1 += 1;
            }
        }
        if (_IDPProvidedNameIdentifier instanceof javax.xml.bind.Element) {
            context.childAsURIs(((com.sun.xml.bind.JAXBObject) _IDPProvidedNameIdentifier), "IDPProvidedNameIdentifier");
        }
        if (_SPProvidedNameIdentifier instanceof javax.xml.bind.Element) {
            context.childAsURIs(((com.sun.xml.bind.JAXBObject) _SPProvidedNameIdentifier), "SPProvidedNameIdentifier");
        }
        if (_OldProvidedNameIdentifier instanceof javax.xml.bind.Element) {
            context.childAsURIs(((com.sun.xml.bind.JAXBObject) _OldProvidedNameIdentifier), "OldProvidedNameIdentifier");
        }
    }

    public java.lang.Class getPrimaryInterface() {
        return (com.sun.identity.liberty.ws.common.jaxb.ps.RegisterNameIdentifierRequestType.class);
    }

    public com.sun.msv.verifier.DocumentDeclaration createRawValidator() {
        if (schemaFragment == null) {
            schemaFragment = com.sun.xml.bind.validator.SchemaDeserializer.deserialize((
 "\u00ac\u00ed\u0000\u0005sr\u0000\u001fcom.sun.msv.grammar.SequenceExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000\u001dcom.su"
+"n.msv.grammar.BinaryExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002L\u0000\u0004exp1t\u0000 Lcom/sun/msv/gra"
+"mmar/Expression;L\u0000\u0004exp2q\u0000~\u0000\u0002xr\u0000\u001ecom.sun.msv.grammar.Expressi"
+"on\u00f8\u0018\u0082\u00e8N5~O\u0002\u0000\u0002L\u0000\u0013epsilonReducibilityt\u0000\u0013Ljava/lang/Boolean;L\u0000\u000b"
+"expandedExpq\u0000~\u0000\u0002xpppsq\u0000~\u0000\u0000ppsq\u0000~\u0000\u0000ppsq\u0000~\u0000\u0000ppsq\u0000~\u0000\u0000ppsq\u0000~\u0000\u0000pp"
+"sq\u0000~\u0000\u0000ppsq\u0000~\u0000\u0000ppsq\u0000~\u0000\u0000ppsq\u0000~\u0000\u0000ppsq\u0000~\u0000\u0000ppsr\u0000\u001dcom.sun.msv.gram"
+"mar.ChoiceExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u0001ppsr\u0000 com.sun.msv.grammar.OneO"
+"rMoreExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000\u001ccom.sun.msv.grammar.UnaryExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002"
+"\u0000\u0001L\u0000\u0003expq\u0000~\u0000\u0002xq\u0000~\u0000\u0003sr\u0000\u0011java.lang.Boolean\u00cd r\u0080\u00d5\u009c\u00fa\u00ee\u0002\u0000\u0001Z\u0000\u0005valuex"
+"p\u0000psr\u0000\'com.sun.msv.grammar.trex.ElementPattern\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001L\u0000\t"
+"nameClasst\u0000\u001fLcom/sun/msv/grammar/NameClass;xr\u0000\u001ecom.sun.msv.g"
+"rammar.ElementExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002Z\u0000\u001aignoreUndeclaredAttributesL\u0000\f"
+"contentModelq\u0000~\u0000\u0002xq\u0000~\u0000\u0003q\u0000~\u0000\u0016p\u0000sq\u0000~\u0000\u0000ppsr\u0000\u001bcom.sun.msv.gramma"
+"r.DataExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0003L\u0000\u0002dtt\u0000\u001fLorg/relaxng/datatype/Datatype;L"
+"\u0000\u0006exceptq\u0000~\u0000\u0002L\u0000\u0004namet\u0000\u001dLcom/sun/msv/util/StringPair;xq\u0000~\u0000\u0003q\u0000"
+"~\u0000\u0016psr\u0000\"com.sun.msv.datatype.xsd.QnameType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000*com"
+".sun.msv.datatype.xsd.BuiltinAtomicType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000%com.su"
+"n.msv.datatype.xsd.ConcreteType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000\'com.sun.msv.da"
+"tatype.xsd.XSDatatypeImpl\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0003L\u0000\fnamespaceUrit\u0000\u0012Ljava/"
+"lang/String;L\u0000\btypeNameq\u0000~\u0000$L\u0000\nwhiteSpacet\u0000.Lcom/sun/msv/dat"
+"atype/xsd/WhiteSpaceProcessor;xpt\u0000 http://www.w3.org/2001/XM"
+"LSchemat\u0000\u0005QNamesr\u00005com.sun.msv.datatype.xsd.WhiteSpaceProces"
+"sor$Collapse\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000,com.sun.msv.datatype.xsd.WhiteSpa"
+"ceProcessor\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xpsr\u00000com.sun.msv.grammar.Expression$N"
+"ullSetExpression\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u0003q\u0000~\u0000\u0016psr\u0000\u001bcom.sun.msv.util."
+"StringPair\u00d0t\u001ejB\u008f\u008d\u00a0\u0002\u0000\u0002L\u0000\tlocalNameq\u0000~\u0000$L\u0000\fnamespaceURIq\u0000~\u0000$xp"
+"q\u0000~\u0000(q\u0000~\u0000\'sq\u0000~\u0000\u0010ppsr\u0000 com.sun.msv.grammar.AttributeExp\u0000\u0000\u0000\u0000\u0000\u0000"
+"\u0000\u0001\u0002\u0000\u0002L\u0000\u0003expq\u0000~\u0000\u0002L\u0000\tnameClassq\u0000~\u0000\u0018xq\u0000~\u0000\u0003q\u0000~\u0000\u0016pq\u0000~\u0000\u001fsr\u0000#com.su"
+"n.msv.grammar.SimpleNameClass\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002L\u0000\tlocalNameq\u0000~\u0000$L\u0000\f"
+"namespaceURIq\u0000~\u0000$xr\u0000\u001dcom.sun.msv.grammar.NameClass\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000"
+"\u0000xpt\u0000\u0004typet\u0000)http://www.w3.org/2001/XMLSchema-instancesr\u00000co"
+"m.sun.msv.grammar.Expression$EpsilonExpression\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000"
+"~\u0000\u0003sq\u0000~\u0000\u0015\u0001q\u0000~\u00009sq\u0000~\u00003t\u0000\u000bRespondWitht\u0000$urn:oasis:names:tc:SAM"
+"L:1.0:protocolq\u0000~\u00009sq\u0000~\u0000\u0010ppsq\u0000~\u0000\u0010q\u0000~\u0000\u0016psq\u0000~\u0000\u0017q\u0000~\u0000\u0016p\u0000sq\u0000~\u0000\u0010pp"
+"sq\u0000~\u0000\u0012q\u0000~\u0000\u0016psq\u0000~\u00001q\u0000~\u0000\u0016psr\u00002com.sun.msv.grammar.Expression$A"
+"nyStringExpression\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u0003q\u0000~\u0000:q\u0000~\u0000Esr\u0000 com.sun.msv"
+".grammar.AnyNameClass\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u00004q\u0000~\u00009sq\u0000~\u00003t\u0000?com.sun."
+"identity.liberty.ws.common.jaxb.xmlsig.SignatureElementt\u0000+ht"
+"tp://java.sun.com/jaxb/xjc/dummy-elementssq\u0000~\u0000\u0017q\u0000~\u0000\u0016p\u0000sq\u0000~\u0000\u0000"
+"ppsq\u0000~\u0000\u0017pp\u0000sq\u0000~\u0000\u0010ppsq\u0000~\u0000\u0012q\u0000~\u0000\u0016psq\u0000~\u00001q\u0000~\u0000\u0016pq\u0000~\u0000Eq\u0000~\u0000Gq\u0000~\u00009sq"
+"\u0000~\u00003t\u0000<com.sun.identity.liberty.ws.common.jaxb.xmlsig.Signat"
+"ureTypeq\u0000~\u0000Jsq\u0000~\u0000\u0010ppsq\u0000~\u00001q\u0000~\u0000\u0016pq\u0000~\u0000\u001fq\u0000~\u00005q\u0000~\u00009sq\u0000~\u00003t\u0000\tSign"
+"aturet\u0000\"http://www.w3.org/2000/09/xmldsig#q\u0000~\u00009sq\u0000~\u0000\u0010ppsq\u0000~\u0000"
+"\u0012q\u0000~\u0000\u0016psq\u0000~\u0000\u0010q\u0000~\u0000\u0016psq\u0000~\u0000\u0017q\u0000~\u0000\u0016p\u0000sq\u0000~\u0000\u0010ppsq\u0000~\u0000\u0012q\u0000~\u0000\u0016psq\u0000~\u00001q\u0000"
+"~\u0000\u0016pq\u0000~\u0000Eq\u0000~\u0000Gq\u0000~\u00009sq\u0000~\u00003t\u0000;com.sun.identity.liberty.ws.comm"
+"on.jaxb.ps.ExtensionElementq\u0000~\u0000Jsq\u0000~\u0000\u0017q\u0000~\u0000\u0016p\u0000sq\u0000~\u0000\u0000ppsq\u0000~\u0000\u0017p"
+"p\u0000sq\u0000~\u0000\u0010ppsq\u0000~\u0000\u0012q\u0000~\u0000\u0016psq\u0000~\u00001q\u0000~\u0000\u0016pq\u0000~\u0000Eq\u0000~\u0000Gq\u0000~\u00009sq\u0000~\u00003t\u00008co"
+"m.sun.identity.liberty.ws.common.jaxb.ps.ExtensionTypeq\u0000~\u0000Js"
+"q\u0000~\u0000\u0010ppsq\u0000~\u00001q\u0000~\u0000\u0016pq\u0000~\u0000\u001fq\u0000~\u00005q\u0000~\u00009sq\u0000~\u00003t\u0000\tExtensiont\u0000\u0017urn:l"
+"iberty:iff:2003-08q\u0000~\u00009sq\u0000~\u0000\u0017pp\u0000sq\u0000~\u0000\u0000ppsq\u0000~\u0000\u001cppsr\u0000\'com.sun."
+"msv.datatype.xsd.MaxLengthFacet\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001I\u0000\tmaxLengthxr\u00009co"
+"m.sun.msv.datatype.xsd.DataTypeWithValueConstraintFacet\"\u00a7Ro\u00ca"
+"\u00c7\u008aT\u0002\u0000\u0000xr\u0000*com.sun.msv.datatype.xsd.DataTypeWithFacet\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001"
+"\u0002\u0000\u0005Z\u0000\fisFacetFixedZ\u0000\u0012needValueCheckFlagL\u0000\bbaseTypet\u0000)Lcom/su"
+"n/msv/datatype/xsd/XSDatatypeImpl;L\u0000\fconcreteTypet\u0000\'Lcom/sun"
+"/msv/datatype/xsd/ConcreteType;L\u0000\tfacetNameq\u0000~\u0000$xq\u0000~\u0000#t\u0000\u001curn"
+":liberty:metadata:2003-08t\u0000\fentityIDTypeq\u0000~\u0000+\u0000\u0000sr\u0000#com.sun.m"
+"sv.datatype.xsd.AnyURIType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000!q\u0000~\u0000\'t\u0000\u0006anyURIq\u0000~"
+"\u0000+q\u0000~\u0000zt\u0000\tmaxLength\u0000\u0000\u0004\u0000q\u0000~\u0000-sq\u0000~\u0000.q\u0000~\u0000xq\u0000~\u0000wsq\u0000~\u0000\u0010ppsq\u0000~\u00001q\u0000"
+"~\u0000\u0016pq\u0000~\u0000\u001fq\u0000~\u00005q\u0000~\u00009sq\u0000~\u00003t\u0000\nProviderIDq\u0000~\u0000msq\u0000~\u0000\u0010ppsq\u0000~\u0000\u0017pp\u0000"
+"sq\u0000~\u0000\u0010ppsq\u0000~\u0000\u0012q\u0000~\u0000\u0016psq\u0000~\u00001q\u0000~\u0000\u0016pq\u0000~\u0000Eq\u0000~\u0000Gq\u0000~\u00009sq\u0000~\u00003t\u0000Kcom."
+"sun.identity.liberty.ws.common.jaxb.ps.IDPProvidedNameIdenti"
+"fierElementq\u0000~\u0000Jsq\u0000~\u0000\u0017pp\u0000sq\u0000~\u0000\u0000ppsq\u0000~\u0000\u0017pp\u0000sq\u0000~\u0000\u0010ppsq\u0000~\u0000\u0012q\u0000~\u0000"
+"\u0016psq\u0000~\u00001q\u0000~\u0000\u0016pq\u0000~\u0000Eq\u0000~\u0000Gq\u0000~\u00009sq\u0000~\u00003t\u0000Dcom.sun.identity.liber"
+"ty.ws.common.jaxb.assertion.NameIdentifierTypeq\u0000~\u0000Jsq\u0000~\u0000\u0010pps"
+"q\u0000~\u00001q\u0000~\u0000\u0016pq\u0000~\u0000\u001fq\u0000~\u00005q\u0000~\u00009sq\u0000~\u00003t\u0000\u0019IDPProvidedNameIdentifier"
+"q\u0000~\u0000msq\u0000~\u0000\u0010ppsq\u0000~\u0000\u0017pp\u0000sq\u0000~\u0000\u0010ppsq\u0000~\u0000\u0012q\u0000~\u0000\u0016psq\u0000~\u00001q\u0000~\u0000\u0016pq\u0000~\u0000Eq"
+"\u0000~\u0000Gq\u0000~\u00009sq\u0000~\u00003t\u0000Jcom.sun.identity.liberty.ws.common.jaxb.ps"
+".SPProvidedNameIdentifierElementq\u0000~\u0000Jsq\u0000~\u0000\u0017pp\u0000sq\u0000~\u0000\u0000ppsq\u0000~\u0000\u0017"
+"pp\u0000sq\u0000~\u0000\u0010ppsq\u0000~\u0000\u0012q\u0000~\u0000\u0016psq\u0000~\u00001q\u0000~\u0000\u0016pq\u0000~\u0000Eq\u0000~\u0000Gq\u0000~\u00009sq\u0000~\u00003q\u0000~\u0000"
+"\u0090q\u0000~\u0000Jsq\u0000~\u0000\u0010ppsq\u0000~\u00001q\u0000~\u0000\u0016pq\u0000~\u0000\u001fq\u0000~\u00005q\u0000~\u00009sq\u0000~\u00003t\u0000\u0018SPProvided"
+"NameIdentifierq\u0000~\u0000msq\u0000~\u0000\u0010ppsq\u0000~\u0000\u0017pp\u0000sq\u0000~\u0000\u0010ppsq\u0000~\u0000\u0012q\u0000~\u0000\u0016psq\u0000~"
+"\u00001q\u0000~\u0000\u0016pq\u0000~\u0000Eq\u0000~\u0000Gq\u0000~\u00009sq\u0000~\u00003t\u0000Kcom.sun.identity.liberty.ws."
+"common.jaxb.ps.OldProvidedNameIdentifierElementq\u0000~\u0000Jsq\u0000~\u0000\u0017pp"
+"\u0000sq\u0000~\u0000\u0000ppsq\u0000~\u0000\u0017pp\u0000sq\u0000~\u0000\u0010ppsq\u0000~\u0000\u0012q\u0000~\u0000\u0016psq\u0000~\u00001q\u0000~\u0000\u0016pq\u0000~\u0000Eq\u0000~\u0000G"
+"q\u0000~\u00009sq\u0000~\u00003q\u0000~\u0000\u0090q\u0000~\u0000Jsq\u0000~\u0000\u0010ppsq\u0000~\u00001q\u0000~\u0000\u0016pq\u0000~\u0000\u001fq\u0000~\u00005q\u0000~\u00009sq\u0000~"
+"\u00003t\u0000\u0019OldProvidedNameIdentifierq\u0000~\u0000msq\u0000~\u0000\u0010ppsq\u0000~\u0000\u0017q\u0000~\u0000\u0016p\u0000sq\u0000~"
+"\u0000\u0000ppsq\u0000~\u0000\u001cq\u0000~\u0000\u0016psr\u0000#com.sun.msv.datatype.xsd.StringType\u0000\u0000\u0000\u0000\u0000"
+"\u0000\u0000\u0001\u0002\u0000\u0001Z\u0000\risAlwaysValidxq\u0000~\u0000!q\u0000~\u0000\'t\u0000\u0006stringsr\u00005com.sun.msv.da"
+"tatype.xsd.WhiteSpaceProcessor$Preserve\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000*\u0001q\u0000~"
+"\u0000-sq\u0000~\u0000.q\u0000~\u0000\u00bfq\u0000~\u0000\'sq\u0000~\u0000\u0010ppsq\u0000~\u00001q\u0000~\u0000\u0016pq\u0000~\u0000\u001fq\u0000~\u00005q\u0000~\u00009sq\u0000~\u00003t"
+"\u0000\nRelayStateq\u0000~\u0000mq\u0000~\u00009sq\u0000~\u00001ppsq\u0000~\u0000\u001cppsr\u0000%com.sun.msv.dataty"
+"pe.xsd.DateTimeType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000)com.sun.msv.datatype.xsd.D"
+"ateTimeBaseType\u0014W\u001a@3\u00a5\u00b4\u00e5\u0002\u0000\u0000xq\u0000~\u0000!q\u0000~\u0000\'t\u0000\bdateTimeq\u0000~\u0000+q\u0000~\u0000-sq"
+"\u0000~\u0000.q\u0000~\u0000\u00ccq\u0000~\u0000\'sq\u0000~\u00003t\u0000\fIssueInstantt\u0000\u0000sq\u0000~\u00001ppsq\u0000~\u0000\u001cppsr\u0000$co"
+"m.sun.msv.datatype.xsd.IntegerType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000+com.sun.msv"
+".datatype.xsd.IntegerDerivedType\u0099\u00f1]\u0090&6k\u00be\u0002\u0000\u0001L\u0000\nbaseFacetsq\u0000~\u0000"
+"txq\u0000~\u0000!q\u0000~\u0000\'t\u0000\u0007integerq\u0000~\u0000+sr\u0000,com.sun.msv.datatype.xsd.Frac"
+"tionDigitsFacet\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001I\u0000\u0005scalexr\u0000;com.sun.msv.datatype.x"
+"sd.DataTypeWithLexicalConstraintFacetT\u0090\u001c>\u001azb\u00ea\u0002\u0000\u0000xq\u0000~\u0000sppq\u0000~\u0000"
+"+\u0001\u0000sr\u0000#com.sun.msv.datatype.xsd.NumberType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000!q"
+"\u0000~\u0000\'t\u0000\u0007decimalq\u0000~\u0000+q\u0000~\u0000\u00dbt\u0000\u000efractionDigits\u0000\u0000\u0000\u0000q\u0000~\u0000-sq\u0000~\u0000.q\u0000~\u0000"
+"\u00d6q\u0000~\u0000\'sq\u0000~\u00003t\u0000\fMajorVersionq\u0000~\u0000\u00d0sq\u0000~\u00001ppq\u0000~\u0000\u00d2sq\u0000~\u00003t\u0000\fMinorV"
+"ersionq\u0000~\u0000\u00d0sq\u0000~\u00001ppsq\u0000~\u0000\u001cppsr\u0000\u001fcom.sun.msv.datatype.xsd.IDTy"
+"pe\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000#com.sun.msv.datatype.xsd.NcnameType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001"
+"\u0002\u0000\u0000xr\u0000\"com.sun.msv.datatype.xsd.TokenType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u00bdq\u0000"
+"~\u0000\'t\u0000\u0002IDq\u0000~\u0000+\u0000q\u0000~\u0000-sq\u0000~\u0000.q\u0000~\u0000\u00eaq\u0000~\u0000\'sq\u0000~\u00003t\u0000\tRequestIDq\u0000~\u0000\u00d0sr"
+"\u0000\"com.sun.msv.grammar.ExpressionPool\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001L\u0000\bexpTablet\u0000"
+"/Lcom/sun/msv/grammar/ExpressionPool$ClosedHash;xpsr\u0000-com.su"
+"n.msv.grammar.ExpressionPool$ClosedHash\u00d7j\u00d0N\u00ef\u00e8\u00ed\u001c\u0003\u0000\u0003I\u0000\u0005countB\u0000"
+"\rstreamVersionL\u0000\u0006parentt\u0000$Lcom/sun/msv/grammar/ExpressionPoo"
+"l;xp\u0000\u0000\u0000:\u0001pq\u0000~\u0000\u00bbq\u0000~\u0000\u00b9q\u0000~\u0000\nq\u0000~\u0000\u000fq\u0000~\u0000\tq\u0000~\u0000\u000bq\u0000~\u0000\rq\u0000~\u0000\u001bq\u0000~\u0000>q\u0000~\u0000\f"
+"q\u0000~\u0000Xq\u0000~\u0000\u00b1q\u0000~\u0000\u00a9q\u0000~\u0000\u009fq\u0000~\u0000\u0097q\u0000~\u0000\u008cq\u0000~\u0000\u0084q\u0000~\u0000dq\u0000~\u0000\\q\u0000~\u0000Nq\u0000~\u0000Aq\u0000~\u0000?"
+"q\u0000~\u0000\u00a7q\u0000~\u0000\u0095q\u0000~\u0000\u0082q\u0000~\u0000Zq\u0000~\u0000\u00c3q\u0000~\u0000\u00b5q\u0000~\u0000\u00a3q\u0000~\u0000\u0091q\u0000~\u0000~q\u0000~\u0000iq\u0000~\u0000Sq\u0000~\u00000"
+"q\u0000~\u0000\u0006q\u0000~\u0000\u0014q\u0000~\u0000\u000eq\u0000~\u0000oq\u0000~\u0000\u0011q\u0000~\u0000\u0005q\u0000~\u0000\bq\u0000~\u0000\u00afq\u0000~\u0000\u009dq\u0000~\u0000\u008aq\u0000~\u0000bq\u0000~\u0000L"
+"q\u0000~\u0000\u0007q\u0000~\u0000Yq\u0000~\u0000\u00b2q\u0000~\u0000\u00aaq\u0000~\u0000\u00a0q\u0000~\u0000\u0098q\u0000~\u0000\u008dq\u0000~\u0000\u0085q\u0000~\u0000eq\u0000~\u0000]q\u0000~\u0000Oq\u0000~\u0000B"
+"x"));
        }
        return new com.sun.msv.verifier.regexp.REDocumentDeclaration(schemaFragment);
    }

    public class Unmarshaller
        extends com.sun.identity.federation.jaxb.entityconfig.impl.runtime.AbstractUnmarshallingEventHandlerImpl
    {


        public Unmarshaller(com.sun.identity.federation.jaxb.entityconfig.impl.runtime.UnmarshallingContext context) {
            super(context, "--------------------");
        }

        protected Unmarshaller(com.sun.identity.federation.jaxb.entityconfig.impl.runtime.UnmarshallingContext context, int startState) {
            this(context);
            state = startState;
        }

        public java.lang.Object owner() {
            return com.sun.identity.liberty.ws.common.jaxb.ps.impl.RegisterNameIdentifierRequestTypeImpl.this;
        }

        public void enterElement(java.lang.String ___uri, java.lang.String ___local, java.lang.String ___qname, org.xml.sax.Attributes __atts)
            throws org.xml.sax.SAXException
        {
            int attIdx;
            outer:
            while (true) {
                switch (state) {
                    case  5 :
                        if (("IDPProvidedNameIdentifier" == ___local)&&("urn:liberty:iff:2003-08" == ___uri)) {
                            _IDPProvidedNameIdentifier = ((com.sun.identity.liberty.ws.common.jaxb.ps.impl.IDPProvidedNameIdentifierElementImpl) spawnChildFromEnterElement((com.sun.identity.liberty.ws.common.jaxb.ps.impl.IDPProvidedNameIdentifierElementImpl.class), 6, ___uri, ___local, ___qname, __atts));
                            return ;
                        }
                        if (("IDPProvidedNameIdentifier" == ___local)&&("urn:liberty:iff:2003-08" == ___uri)) {
                            context.pushAttributes(__atts, true);
                            state = 16;
                            return ;
                        }
                        break;
                    case  2 :
                        if (("Extension" == ___local)&&("urn:liberty:iff:2003-08" == ___uri)) {
                            _getExtension().add(((com.sun.identity.liberty.ws.common.jaxb.ps.impl.ExtensionElementImpl) spawnChildFromEnterElement((com.sun.identity.liberty.ws.common.jaxb.ps.impl.ExtensionElementImpl.class), 2, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("Extension" == ___local)&&("urn:liberty:iff:2003-08" == ___uri)) {
                            context.pushAttributes(__atts, false);
                            state = 18;
                            return ;
                        }
                        if (("ProviderID" == ___local)&&("urn:liberty:iff:2003-08" == ___uri)) {
                            context.pushAttributes(__atts, true);
                            state = 3;
                            return ;
                        }
                        break;
                    case  8 :
                        if (("RelayState" == ___local)&&("urn:liberty:iff:2003-08" == ___uri)) {
                            context.pushAttributes(__atts, true);
                            state = 9;
                            return ;
                        }
                        state = 11;
                        continue outer;
                    case  1 :
                        if (("Extension" == ___local)&&("urn:liberty:iff:2003-08" == ___uri)) {
                            _getExtension().add(((com.sun.identity.liberty.ws.common.jaxb.ps.impl.ExtensionElementImpl) spawnChildFromEnterElement((com.sun.identity.liberty.ws.common.jaxb.ps.impl.ExtensionElementImpl.class), 2, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("Extension" == ___local)&&("urn:liberty:iff:2003-08" == ___uri)) {
                            context.pushAttributes(__atts, false);
                            state = 18;
                            return ;
                        }
                        state = 2;
                        continue outer;
                    case  6 :
                        if (("SPProvidedNameIdentifier" == ___local)&&("urn:liberty:iff:2003-08" == ___uri)) {
                            _SPProvidedNameIdentifier = ((com.sun.identity.liberty.ws.common.jaxb.ps.impl.SPProvidedNameIdentifierElementImpl) spawnChildFromEnterElement((com.sun.identity.liberty.ws.common.jaxb.ps.impl.SPProvidedNameIdentifierElementImpl.class), 7, ___uri, ___local, ___qname, __atts));
                            return ;
                        }
                        if (("SPProvidedNameIdentifier" == ___local)&&("urn:liberty:iff:2003-08" == ___uri)) {
                            context.pushAttributes(__atts, true);
                            state = 14;
                            return ;
                        }
                        break;
                    case  12 :
                        attIdx = context.getAttribute("", "Format");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().enterElement(___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        attIdx = context.getAttribute("", "NameQualifier");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().enterElement(___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        break;
                    case  11 :
                        revertToParentFromEnterElement(___uri, ___local, ___qname, __atts);
                        return ;
                    case  7 :
                        if (("OldProvidedNameIdentifier" == ___local)&&("urn:liberty:iff:2003-08" == ___uri)) {
                            _OldProvidedNameIdentifier = ((com.sun.identity.liberty.ws.common.jaxb.ps.impl.OldProvidedNameIdentifierElementImpl) spawnChildFromEnterElement((com.sun.identity.liberty.ws.common.jaxb.ps.impl.OldProvidedNameIdentifierElementImpl.class), 8, ___uri, ___local, ___qname, __atts));
                            return ;
                        }
                        if (("OldProvidedNameIdentifier" == ___local)&&("urn:liberty:iff:2003-08" == ___uri)) {
                            context.pushAttributes(__atts, true);
                            state = 12;
                            return ;
                        }
                        break;
                    case  16 :
                        attIdx = context.getAttribute("", "Format");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().enterElement(___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        attIdx = context.getAttribute("", "NameQualifier");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().enterElement(___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        break;
                    case  14 :
                        attIdx = context.getAttribute("", "Format");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().enterElement(___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        attIdx = context.getAttribute("", "NameQualifier");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().enterElement(___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        break;
                    case  0 :
                        attIdx = context.getAttribute("", "IssueInstant");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().enterElement(___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        break;
                    case  18 :
                        if (!(("" == ___uri)||("urn:liberty:iff:2003-08" == ___uri))) {
                            _getExtension().add(((com.sun.identity.liberty.ws.common.jaxb.ps.impl.ExtensionTypeImpl) spawnChildFromEnterElement((com.sun.identity.liberty.ws.common.jaxb.ps.impl.ExtensionTypeImpl.class), 19, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        break;
                }
                super.enterElement(___uri, ___local, ___qname, __atts);
                break;
            }
        }

        public void leaveElement(java.lang.String ___uri, java.lang.String ___local, java.lang.String ___qname)
            throws org.xml.sax.SAXException
        {
            int attIdx;
            outer:
            while (true) {
                switch (state) {
                    case  15 :
                        if (("SPProvidedNameIdentifier" == ___local)&&("urn:liberty:iff:2003-08" == ___uri)) {
                            context.popAttributes();
                            state = 7;
                            return ;
                        }
                        break;
                    case  10 :
                        if (("RelayState" == ___local)&&("urn:liberty:iff:2003-08" == ___uri)) {
                            context.popAttributes();
                            state = 11;
                            return ;
                        }
                        break;
                    case  8 :
                        state = 11;
                        continue outer;
                    case  1 :
                        state = 2;
                        continue outer;
                    case  4 :
                        if (("ProviderID" == ___local)&&("urn:liberty:iff:2003-08" == ___uri)) {
                            context.popAttributes();
                            state = 5;
                            return ;
                        }
                        break;
                    case  12 :
                        attIdx = context.getAttribute("", "Format");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().leaveElement(___uri, ___local, ___qname);
                            return ;
                        }
                        attIdx = context.getAttribute("", "NameQualifier");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().leaveElement(___uri, ___local, ___qname);
                            return ;
                        }
                        break;
                    case  13 :
                        if (("OldProvidedNameIdentifier" == ___local)&&("urn:liberty:iff:2003-08" == ___uri)) {
                            context.popAttributes();
                            state = 8;
                            return ;
                        }
                        break;
                    case  11 :
                        revertToParentFromLeaveElement(___uri, ___local, ___qname);
                        return ;
                    case  17 :
                        if (("IDPProvidedNameIdentifier" == ___local)&&("urn:liberty:iff:2003-08" == ___uri)) {
                            context.popAttributes();
                            state = 6;
                            return ;
                        }
                        break;
                    case  16 :
                        attIdx = context.getAttribute("", "Format");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().leaveElement(___uri, ___local, ___qname);
                            return ;
                        }
                        attIdx = context.getAttribute("", "NameQualifier");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().leaveElement(___uri, ___local, ___qname);
                            return ;
                        }
                        break;
                    case  14 :
                        attIdx = context.getAttribute("", "Format");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().leaveElement(___uri, ___local, ___qname);
                            return ;
                        }
                        attIdx = context.getAttribute("", "NameQualifier");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().leaveElement(___uri, ___local, ___qname);
                            return ;
                        }
                        break;
                    case  19 :
                        if (("Extension" == ___local)&&("urn:liberty:iff:2003-08" == ___uri)) {
                            context.popAttributes();
                            state = 2;
                            return ;
                        }
                        break;
                    case  0 :
                        attIdx = context.getAttribute("", "IssueInstant");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().leaveElement(___uri, ___local, ___qname);
                            return ;
                        }
                        break;
                }
                super.leaveElement(___uri, ___local, ___qname);
                break;
            }
        }

        public void enterAttribute(java.lang.String ___uri, java.lang.String ___local, java.lang.String ___qname)
            throws org.xml.sax.SAXException
        {
            int attIdx;
            outer:
            while (true) {
                switch (state) {
                    case  8 :
                        state = 11;
                        continue outer;
                    case  1 :
                        state = 2;
                        continue outer;
                    case  12 :
                        if (("Format" == ___local)&&("" == ___uri)) {
                            _OldProvidedNameIdentifier = ((com.sun.identity.liberty.ws.common.jaxb.assertion.impl.NameIdentifierTypeImpl) spawnChildFromEnterAttribute((com.sun.identity.liberty.ws.common.jaxb.assertion.impl.NameIdentifierTypeImpl.class), 13, ___uri, ___local, ___qname));
                            return ;
                        }
                        if (("NameQualifier" == ___local)&&("" == ___uri)) {
                            _OldProvidedNameIdentifier = ((com.sun.identity.liberty.ws.common.jaxb.assertion.impl.NameIdentifierTypeImpl) spawnChildFromEnterAttribute((com.sun.identity.liberty.ws.common.jaxb.assertion.impl.NameIdentifierTypeImpl.class), 13, ___uri, ___local, ___qname));
                            return ;
                        }
                        break;
                    case  11 :
                        revertToParentFromEnterAttribute(___uri, ___local, ___qname);
                        return ;
                    case  16 :
                        if (("Format" == ___local)&&("" == ___uri)) {
                            _IDPProvidedNameIdentifier = ((com.sun.identity.liberty.ws.common.jaxb.assertion.impl.NameIdentifierTypeImpl) spawnChildFromEnterAttribute((com.sun.identity.liberty.ws.common.jaxb.assertion.impl.NameIdentifierTypeImpl.class), 17, ___uri, ___local, ___qname));
                            return ;
                        }
                        if (("NameQualifier" == ___local)&&("" == ___uri)) {
                            _IDPProvidedNameIdentifier = ((com.sun.identity.liberty.ws.common.jaxb.assertion.impl.NameIdentifierTypeImpl) spawnChildFromEnterAttribute((com.sun.identity.liberty.ws.common.jaxb.assertion.impl.NameIdentifierTypeImpl.class), 17, ___uri, ___local, ___qname));
                            return ;
                        }
                        break;
                    case  14 :
                        if (("Format" == ___local)&&("" == ___uri)) {
                            _SPProvidedNameIdentifier = ((com.sun.identity.liberty.ws.common.jaxb.assertion.impl.NameIdentifierTypeImpl) spawnChildFromEnterAttribute((com.sun.identity.liberty.ws.common.jaxb.assertion.impl.NameIdentifierTypeImpl.class), 15, ___uri, ___local, ___qname));
                            return ;
                        }
                        if (("NameQualifier" == ___local)&&("" == ___uri)) {
                            _SPProvidedNameIdentifier = ((com.sun.identity.liberty.ws.common.jaxb.assertion.impl.NameIdentifierTypeImpl) spawnChildFromEnterAttribute((com.sun.identity.liberty.ws.common.jaxb.assertion.impl.NameIdentifierTypeImpl.class), 15, ___uri, ___local, ___qname));
                            return ;
                        }
                        break;
                    case  0 :
                        if (("IssueInstant" == ___local)&&("" == ___uri)) {
                            spawnHandlerFromEnterAttribute((((com.sun.identity.liberty.ws.common.jaxb.protocol.impl.RequestAbstractTypeImpl)com.sun.identity.liberty.ws.common.jaxb.ps.impl.RegisterNameIdentifierRequestTypeImpl.this).new Unmarshaller(context)), 1, ___uri, ___local, ___qname);
                            return ;
                        }
                        break;
                }
                super.enterAttribute(___uri, ___local, ___qname);
                break;
            }
        }

        public void leaveAttribute(java.lang.String ___uri, java.lang.String ___local, java.lang.String ___qname)
            throws org.xml.sax.SAXException
        {
            int attIdx;
            outer:
            while (true) {
                switch (state) {
                    case  8 :
                        state = 11;
                        continue outer;
                    case  1 :
                        state = 2;
                        continue outer;
                    case  12 :
                        attIdx = context.getAttribute("", "Format");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().leaveAttribute(___uri, ___local, ___qname);
                            return ;
                        }
                        attIdx = context.getAttribute("", "NameQualifier");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().leaveAttribute(___uri, ___local, ___qname);
                            return ;
                        }
                        break;
                    case  11 :
                        revertToParentFromLeaveAttribute(___uri, ___local, ___qname);
                        return ;
                    case  16 :
                        attIdx = context.getAttribute("", "Format");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().leaveAttribute(___uri, ___local, ___qname);
                            return ;
                        }
                        attIdx = context.getAttribute("", "NameQualifier");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().leaveAttribute(___uri, ___local, ___qname);
                            return ;
                        }
                        break;
                    case  14 :
                        attIdx = context.getAttribute("", "Format");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().leaveAttribute(___uri, ___local, ___qname);
                            return ;
                        }
                        attIdx = context.getAttribute("", "NameQualifier");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().leaveAttribute(___uri, ___local, ___qname);
                            return ;
                        }
                        break;
                    case  0 :
                        attIdx = context.getAttribute("", "IssueInstant");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().leaveAttribute(___uri, ___local, ___qname);
                            return ;
                        }
                        break;
                }
                super.leaveAttribute(___uri, ___local, ___qname);
                break;
            }
        }

        public void handleText(final java.lang.String value)
            throws org.xml.sax.SAXException
        {
            int attIdx;
            outer:
            while (true) {
                try {
                    switch (state) {
                        case  8 :
                            state = 11;
                            continue outer;
                        case  3 :
                            state = 4;
                            eatText1(value);
                            return ;
                        case  1 :
                            state = 2;
                            continue outer;
                        case  12 :
                            attIdx = context.getAttribute("", "Format");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().text(value);
                                return ;
                            }
                            attIdx = context.getAttribute("", "NameQualifier");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().text(value);
                                return ;
                            }
                            _OldProvidedNameIdentifier = ((com.sun.identity.liberty.ws.common.jaxb.assertion.impl.NameIdentifierTypeImpl) spawnChildFromText((com.sun.identity.liberty.ws.common.jaxb.assertion.impl.NameIdentifierTypeImpl.class), 13, value));
                            return ;
                        case  11 :
                            revertToParentFromText(value);
                            return ;
                        case  16 :
                            attIdx = context.getAttribute("", "Format");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().text(value);
                                return ;
                            }
                            attIdx = context.getAttribute("", "NameQualifier");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().text(value);
                                return ;
                            }
                            _IDPProvidedNameIdentifier = ((com.sun.identity.liberty.ws.common.jaxb.assertion.impl.NameIdentifierTypeImpl) spawnChildFromText((com.sun.identity.liberty.ws.common.jaxb.assertion.impl.NameIdentifierTypeImpl.class), 17, value));
                            return ;
                        case  14 :
                            attIdx = context.getAttribute("", "Format");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().text(value);
                                return ;
                            }
                            attIdx = context.getAttribute("", "NameQualifier");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().text(value);
                                return ;
                            }
                            _SPProvidedNameIdentifier = ((com.sun.identity.liberty.ws.common.jaxb.assertion.impl.NameIdentifierTypeImpl) spawnChildFromText((com.sun.identity.liberty.ws.common.jaxb.assertion.impl.NameIdentifierTypeImpl.class), 15, value));
                            return ;
                        case  0 :
                            attIdx = context.getAttribute("", "IssueInstant");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().text(value);
                                return ;
                            }
                            break;
                        case  9 :
                            state = 10;
                            eatText2(value);
                            return ;
                    }
                } catch (java.lang.RuntimeException e) {
                    handleUnexpectedTextException(value, e);
                }
                break;
            }
        }

        private void eatText1(final java.lang.String value)
            throws org.xml.sax.SAXException
        {
            try {
                _ProviderID = com.sun.xml.bind.WhiteSpaceProcessor.collapse(value);
            } catch (java.lang.Exception e) {
                handleParseConversionException(e);
            }
        }

        private void eatText2(final java.lang.String value)
            throws org.xml.sax.SAXException
        {
            try {
                _RelayState = value;
            } catch (java.lang.Exception e) {
                handleParseConversionException(e);
            }
        }

    }

}
