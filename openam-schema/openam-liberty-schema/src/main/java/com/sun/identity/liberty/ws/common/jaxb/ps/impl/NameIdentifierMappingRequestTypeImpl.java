//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v1.0.6-b27-fcs 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2012.06.11 at 10:33:54 AM PDT 
//


package com.sun.identity.liberty.ws.common.jaxb.ps.impl;

public class NameIdentifierMappingRequestTypeImpl
    extends com.sun.identity.liberty.ws.common.jaxb.protocol.impl.RequestAbstractTypeImpl
    implements com.sun.identity.liberty.ws.common.jaxb.ps.NameIdentifierMappingRequestType, com.sun.xml.bind.JAXBObject, com.sun.identity.federation.jaxb.entityconfig.impl.runtime.UnmarshallableObject, com.sun.identity.federation.jaxb.entityconfig.impl.runtime.XMLSerializable, com.sun.identity.federation.jaxb.entityconfig.impl.runtime.ValidatableObject
{

    protected com.sun.xml.bind.util.ListImpl _Extension;
    protected java.lang.String _TargetNamespace;
    protected java.lang.String _ProviderID;
    protected java.lang.String _Consent;
    protected com.sun.identity.liberty.ws.common.jaxb.assertion.NameIdentifierType _NameIdentifier;
    public final static java.lang.Class version = (com.sun.identity.liberty.ws.common.jaxb.ps.impl.JAXBVersion.class);
    private static com.sun.msv.grammar.Grammar schemaFragment;

    private final static java.lang.Class PRIMARY_INTERFACE_CLASS() {
        return (com.sun.identity.liberty.ws.common.jaxb.ps.NameIdentifierMappingRequestType.class);
    }

    protected com.sun.xml.bind.util.ListImpl _getExtension() {
        if (_Extension == null) {
            _Extension = new com.sun.xml.bind.util.ListImpl(new java.util.ArrayList());
        }
        return _Extension;
    }

    public java.util.List getExtension() {
        return _getExtension();
    }

    public java.lang.String getTargetNamespace() {
        return _TargetNamespace;
    }

    public void setTargetNamespace(java.lang.String value) {
        _TargetNamespace = value;
    }

    public java.lang.String getProviderID() {
        return _ProviderID;
    }

    public void setProviderID(java.lang.String value) {
        _ProviderID = value;
    }

    public java.lang.String getConsent() {
        return _Consent;
    }

    public void setConsent(java.lang.String value) {
        _Consent = value;
    }

    public com.sun.identity.liberty.ws.common.jaxb.assertion.NameIdentifierType getNameIdentifier() {
        return _NameIdentifier;
    }

    public void setNameIdentifier(com.sun.identity.liberty.ws.common.jaxb.assertion.NameIdentifierType value) {
        _NameIdentifier = value;
    }

    public com.sun.identity.federation.jaxb.entityconfig.impl.runtime.UnmarshallingEventHandler createUnmarshaller(com.sun.identity.federation.jaxb.entityconfig.impl.runtime.UnmarshallingContext context) {
        return new com.sun.identity.liberty.ws.common.jaxb.ps.impl.NameIdentifierMappingRequestTypeImpl.Unmarshaller(context);
    }

    public void serializeBody(com.sun.identity.federation.jaxb.entityconfig.impl.runtime.XMLSerializer context)
        throws org.xml.sax.SAXException
    {
        int idx1 = 0;
        final int len1 = ((_Extension == null)? 0 :_Extension.size());
        super.serializeBody(context);
        while (idx1 != len1) {
            if (_Extension.get(idx1) instanceof javax.xml.bind.Element) {
                context.childAsBody(((com.sun.xml.bind.JAXBObject) _Extension.get(idx1 ++)), "Extension");
            } else {
                context.startElement("urn:liberty:iff:2003-08", "Extension");
                int idx_0 = idx1;
                context.childAsURIs(((com.sun.xml.bind.JAXBObject) _Extension.get(idx_0 ++)), "Extension");
                context.endNamespaceDecls();
                int idx_1 = idx1;
                context.childAsAttributes(((com.sun.xml.bind.JAXBObject) _Extension.get(idx_1 ++)), "Extension");
                context.endAttributes();
                context.childAsBody(((com.sun.xml.bind.JAXBObject) _Extension.get(idx1 ++)), "Extension");
                context.endElement();
            }
        }
        context.startElement("urn:liberty:iff:2003-08", "ProviderID");
        context.endNamespaceDecls();
        context.endAttributes();
        try {
            context.text(((java.lang.String) _ProviderID), "ProviderID");
        } catch (java.lang.Exception e) {
            com.sun.identity.federation.jaxb.entityconfig.impl.runtime.Util.handlePrintConversionException(this, e, context);
        }
        context.endElement();
        if (_NameIdentifier instanceof javax.xml.bind.Element) {
            context.childAsBody(((com.sun.xml.bind.JAXBObject) _NameIdentifier), "NameIdentifier");
        } else {
            context.startElement("urn:oasis:names:tc:SAML:1.0:assertion", "NameIdentifier");
            context.childAsURIs(((com.sun.xml.bind.JAXBObject) _NameIdentifier), "NameIdentifier");
            context.endNamespaceDecls();
            context.childAsAttributes(((com.sun.xml.bind.JAXBObject) _NameIdentifier), "NameIdentifier");
            context.endAttributes();
            context.childAsBody(((com.sun.xml.bind.JAXBObject) _NameIdentifier), "NameIdentifier");
            context.endElement();
        }
        context.startElement("urn:liberty:iff:2003-08", "TargetNamespace");
        context.endNamespaceDecls();
        context.endAttributes();
        try {
            context.text(((java.lang.String) _TargetNamespace), "TargetNamespace");
        } catch (java.lang.Exception e) {
            com.sun.identity.federation.jaxb.entityconfig.impl.runtime.Util.handlePrintConversionException(this, e, context);
        }
        context.endElement();
    }

    public void serializeAttributes(com.sun.identity.federation.jaxb.entityconfig.impl.runtime.XMLSerializer context)
        throws org.xml.sax.SAXException
    {
        int idx1 = 0;
        final int len1 = ((_Extension == null)? 0 :_Extension.size());
        if (_Consent!= null) {
            context.startAttribute("urn:liberty:iff:2003-08", "consent");
            try {
                context.text(((java.lang.String) _Consent), "Consent");
            } catch (java.lang.Exception e) {
                com.sun.identity.federation.jaxb.entityconfig.impl.runtime.Util.handlePrintConversionException(this, e, context);
            }
            context.endAttribute();
        }
        super.serializeAttributes(context);
        while (idx1 != len1) {
            if (_Extension.get(idx1) instanceof javax.xml.bind.Element) {
                context.childAsAttributes(((com.sun.xml.bind.JAXBObject) _Extension.get(idx1 ++)), "Extension");
            } else {
                idx1 += 1;
            }
        }
        if (_NameIdentifier instanceof javax.xml.bind.Element) {
            context.childAsAttributes(((com.sun.xml.bind.JAXBObject) _NameIdentifier), "NameIdentifier");
        }
    }

    public void serializeURIs(com.sun.identity.federation.jaxb.entityconfig.impl.runtime.XMLSerializer context)
        throws org.xml.sax.SAXException
    {
        int idx1 = 0;
        final int len1 = ((_Extension == null)? 0 :_Extension.size());
        if (_Consent!= null) {
            context.getNamespaceContext().declareNamespace("urn:liberty:iff:2003-08", null, true);
        }
        super.serializeURIs(context);
        while (idx1 != len1) {
            if (_Extension.get(idx1) instanceof javax.xml.bind.Element) {
                context.childAsURIs(((com.sun.xml.bind.JAXBObject) _Extension.get(idx1 ++)), "Extension");
            } else {
                idx1 += 1;
            }
        }
        if (_NameIdentifier instanceof javax.xml.bind.Element) {
            context.childAsURIs(((com.sun.xml.bind.JAXBObject) _NameIdentifier), "NameIdentifier");
        }
    }

    public java.lang.Class getPrimaryInterface() {
        return (com.sun.identity.liberty.ws.common.jaxb.ps.NameIdentifierMappingRequestType.class);
    }

    public com.sun.msv.verifier.DocumentDeclaration createRawValidator() {
        if (schemaFragment == null) {
            schemaFragment = com.sun.xml.bind.validator.SchemaDeserializer.deserialize((
 "\u00ac\u00ed\u0000\u0005sr\u0000\u001fcom.sun.msv.grammar.SequenceExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000\u001dcom.su"
+"n.msv.grammar.BinaryExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002L\u0000\u0004exp1t\u0000 Lcom/sun/msv/gra"
+"mmar/Expression;L\u0000\u0004exp2q\u0000~\u0000\u0002xr\u0000\u001ecom.sun.msv.grammar.Expressi"
+"on\u00f8\u0018\u0082\u00e8N5~O\u0002\u0000\u0002L\u0000\u0013epsilonReducibilityt\u0000\u0013Ljava/lang/Boolean;L\u0000\u000b"
+"expandedExpq\u0000~\u0000\u0002xpppsq\u0000~\u0000\u0000ppsq\u0000~\u0000\u0000ppsq\u0000~\u0000\u0000ppsq\u0000~\u0000\u0000ppsq\u0000~\u0000\u0000pp"
+"sq\u0000~\u0000\u0000ppsq\u0000~\u0000\u0000ppsq\u0000~\u0000\u0000ppsq\u0000~\u0000\u0000ppsr\u0000\u001dcom.sun.msv.grammar.Choi"
+"ceExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u0001ppsr\u0000 com.sun.msv.grammar.OneOrMoreExp"
+"\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000\u001ccom.sun.msv.grammar.UnaryExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001L\u0000\u0003exp"
+"q\u0000~\u0000\u0002xq\u0000~\u0000\u0003sr\u0000\u0011java.lang.Boolean\u00cd r\u0080\u00d5\u009c\u00fa\u00ee\u0002\u0000\u0001Z\u0000\u0005valuexp\u0000psr\u0000\'c"
+"om.sun.msv.grammar.trex.ElementPattern\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001L\u0000\tnameClas"
+"st\u0000\u001fLcom/sun/msv/grammar/NameClass;xr\u0000\u001ecom.sun.msv.grammar.E"
+"lementExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002Z\u0000\u001aignoreUndeclaredAttributesL\u0000\fcontentM"
+"odelq\u0000~\u0000\u0002xq\u0000~\u0000\u0003q\u0000~\u0000\u0015p\u0000sq\u0000~\u0000\u0000ppsr\u0000\u001bcom.sun.msv.grammar.DataEx"
+"p\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0003L\u0000\u0002dtt\u0000\u001fLorg/relaxng/datatype/Datatype;L\u0000\u0006except"
+"q\u0000~\u0000\u0002L\u0000\u0004namet\u0000\u001dLcom/sun/msv/util/StringPair;xq\u0000~\u0000\u0003q\u0000~\u0000\u0015psr\u0000\""
+"com.sun.msv.datatype.xsd.QnameType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000*com.sun.msv"
+".datatype.xsd.BuiltinAtomicType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000%com.sun.msv.da"
+"tatype.xsd.ConcreteType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000\'com.sun.msv.datatype.x"
+"sd.XSDatatypeImpl\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0003L\u0000\fnamespaceUrit\u0000\u0012Ljava/lang/Str"
+"ing;L\u0000\btypeNameq\u0000~\u0000#L\u0000\nwhiteSpacet\u0000.Lcom/sun/msv/datatype/xs"
+"d/WhiteSpaceProcessor;xpt\u0000 http://www.w3.org/2001/XMLSchemat"
+"\u0000\u0005QNamesr\u00005com.sun.msv.datatype.xsd.WhiteSpaceProcessor$Coll"
+"apse\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000,com.sun.msv.datatype.xsd.WhiteSpaceProces"
+"sor\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xpsr\u00000com.sun.msv.grammar.Expression$NullSetEx"
+"pression\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u0003q\u0000~\u0000\u0015psr\u0000\u001bcom.sun.msv.util.StringPa"
+"ir\u00d0t\u001ejB\u008f\u008d\u00a0\u0002\u0000\u0002L\u0000\tlocalNameq\u0000~\u0000#L\u0000\fnamespaceURIq\u0000~\u0000#xpq\u0000~\u0000\'q\u0000~"
+"\u0000&sq\u0000~\u0000\u000fppsr\u0000 com.sun.msv.grammar.AttributeExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002L\u0000\u0003"
+"expq\u0000~\u0000\u0002L\u0000\tnameClassq\u0000~\u0000\u0017xq\u0000~\u0000\u0003q\u0000~\u0000\u0015pq\u0000~\u0000\u001esr\u0000#com.sun.msv.gr"
+"ammar.SimpleNameClass\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002L\u0000\tlocalNameq\u0000~\u0000#L\u0000\fnamespac"
+"eURIq\u0000~\u0000#xr\u0000\u001dcom.sun.msv.grammar.NameClass\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xpt\u0000\u0004ty"
+"pet\u0000)http://www.w3.org/2001/XMLSchema-instancesr\u00000com.sun.ms"
+"v.grammar.Expression$EpsilonExpression\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u0003sq\u0000~\u0000"
+"\u0014\u0001q\u0000~\u00008sq\u0000~\u00002t\u0000\u000bRespondWitht\u0000$urn:oasis:names:tc:SAML:1.0:pr"
+"otocolq\u0000~\u00008sq\u0000~\u0000\u000fppsq\u0000~\u0000\u000fq\u0000~\u0000\u0015psq\u0000~\u0000\u0016q\u0000~\u0000\u0015p\u0000sq\u0000~\u0000\u000fppsq\u0000~\u0000\u0011q\u0000"
+"~\u0000\u0015psq\u0000~\u00000q\u0000~\u0000\u0015psr\u00002com.sun.msv.grammar.Expression$AnyString"
+"Expression\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u0003q\u0000~\u00009q\u0000~\u0000Dsr\u0000 com.sun.msv.grammar"
+".AnyNameClass\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u00003q\u0000~\u00008sq\u0000~\u00002t\u0000?com.sun.identity"
+".liberty.ws.common.jaxb.xmlsig.SignatureElementt\u0000+http://jav"
+"a.sun.com/jaxb/xjc/dummy-elementssq\u0000~\u0000\u0016q\u0000~\u0000\u0015p\u0000sq\u0000~\u0000\u0000ppsq\u0000~\u0000\u0016"
+"pp\u0000sq\u0000~\u0000\u000fppsq\u0000~\u0000\u0011q\u0000~\u0000\u0015psq\u0000~\u00000q\u0000~\u0000\u0015pq\u0000~\u0000Dq\u0000~\u0000Fq\u0000~\u00008sq\u0000~\u00002t\u0000<c"
+"om.sun.identity.liberty.ws.common.jaxb.xmlsig.SignatureTypeq"
+"\u0000~\u0000Isq\u0000~\u0000\u000fppsq\u0000~\u00000q\u0000~\u0000\u0015pq\u0000~\u0000\u001eq\u0000~\u00004q\u0000~\u00008sq\u0000~\u00002t\u0000\tSignaturet\u0000\""
+"http://www.w3.org/2000/09/xmldsig#q\u0000~\u00008sq\u0000~\u0000\u000fppsq\u0000~\u0000\u0011q\u0000~\u0000\u0015ps"
+"q\u0000~\u0000\u000fq\u0000~\u0000\u0015psq\u0000~\u0000\u0016q\u0000~\u0000\u0015p\u0000sq\u0000~\u0000\u000fppsq\u0000~\u0000\u0011q\u0000~\u0000\u0015psq\u0000~\u00000q\u0000~\u0000\u0015pq\u0000~\u0000"
+"Dq\u0000~\u0000Fq\u0000~\u00008sq\u0000~\u00002t\u0000;com.sun.identity.liberty.ws.common.jaxb."
+"ps.ExtensionElementq\u0000~\u0000Isq\u0000~\u0000\u0016q\u0000~\u0000\u0015p\u0000sq\u0000~\u0000\u0000ppsq\u0000~\u0000\u0016pp\u0000sq\u0000~\u0000\u000f"
+"ppsq\u0000~\u0000\u0011q\u0000~\u0000\u0015psq\u0000~\u00000q\u0000~\u0000\u0015pq\u0000~\u0000Dq\u0000~\u0000Fq\u0000~\u00008sq\u0000~\u00002t\u00008com.sun.id"
+"entity.liberty.ws.common.jaxb.ps.ExtensionTypeq\u0000~\u0000Isq\u0000~\u0000\u000fpps"
+"q\u0000~\u00000q\u0000~\u0000\u0015pq\u0000~\u0000\u001eq\u0000~\u00004q\u0000~\u00008sq\u0000~\u00002t\u0000\tExtensiont\u0000\u0017urn:liberty:i"
+"ff:2003-08q\u0000~\u00008sq\u0000~\u0000\u0016pp\u0000sq\u0000~\u0000\u0000ppsq\u0000~\u0000\u001bppsr\u0000\'com.sun.msv.data"
+"type.xsd.MaxLengthFacet\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001I\u0000\tmaxLengthxr\u00009com.sun.ms"
+"v.datatype.xsd.DataTypeWithValueConstraintFacet\"\u00a7Ro\u00ca\u00c7\u008aT\u0002\u0000\u0000xr"
+"\u0000*com.sun.msv.datatype.xsd.DataTypeWithFacet\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0005Z\u0000\fis"
+"FacetFixedZ\u0000\u0012needValueCheckFlagL\u0000\bbaseTypet\u0000)Lcom/sun/msv/da"
+"tatype/xsd/XSDatatypeImpl;L\u0000\fconcreteTypet\u0000\'Lcom/sun/msv/dat"
+"atype/xsd/ConcreteType;L\u0000\tfacetNameq\u0000~\u0000#xq\u0000~\u0000\"t\u0000\u001curn:liberty"
+":metadata:2003-08t\u0000\fentityIDTypeq\u0000~\u0000*\u0000\u0000sr\u0000#com.sun.msv.datat"
+"ype.xsd.AnyURIType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000 q\u0000~\u0000&t\u0000\u0006anyURIq\u0000~\u0000*q\u0000~\u0000yt"
+"\u0000\tmaxLength\u0000\u0000\u0004\u0000q\u0000~\u0000,sq\u0000~\u0000-q\u0000~\u0000wq\u0000~\u0000vsq\u0000~\u0000\u000fppsq\u0000~\u00000q\u0000~\u0000\u0015pq\u0000~\u0000"
+"\u001eq\u0000~\u00004q\u0000~\u00008sq\u0000~\u00002t\u0000\nProviderIDq\u0000~\u0000lsq\u0000~\u0000\u000fppsq\u0000~\u0000\u000fppsq\u0000~\u0000\u0016pp\u0000"
+"sq\u0000~\u0000\u000fppsq\u0000~\u0000\u0011q\u0000~\u0000\u0015psq\u0000~\u00000q\u0000~\u0000\u0015pq\u0000~\u0000Dq\u0000~\u0000Fq\u0000~\u00008sq\u0000~\u00002t\u0000Gcom."
+"sun.identity.liberty.ws.common.jaxb.assertion.NameIdentifier"
+"Elementq\u0000~\u0000Isq\u0000~\u0000\u0016pp\u0000sq\u0000~\u0000\u0000ppsq\u0000~\u0000\u0016pp\u0000sq\u0000~\u0000\u000fppsq\u0000~\u0000\u0011q\u0000~\u0000\u0015psq"
+"\u0000~\u00000q\u0000~\u0000\u0015pq\u0000~\u0000Dq\u0000~\u0000Fq\u0000~\u00008sq\u0000~\u00002t\u0000Dcom.sun.identity.liberty.w"
+"s.common.jaxb.assertion.NameIdentifierTypeq\u0000~\u0000Isq\u0000~\u0000\u000fppsq\u0000~\u0000"
+"0q\u0000~\u0000\u0015pq\u0000~\u0000\u001eq\u0000~\u00004q\u0000~\u00008sq\u0000~\u00002t\u0000\u000eNameIdentifiert\u0000%urn:oasis:na"
+"mes:tc:SAML:1.0:assertionsq\u0000~\u0000\u0016pp\u0000sq\u0000~\u0000\u000fppsq\u0000~\u0000\u0011q\u0000~\u0000\u0015psq\u0000~\u00000"
+"q\u0000~\u0000\u0015pq\u0000~\u0000Dq\u0000~\u0000Fq\u0000~\u00008sq\u0000~\u00002t\u0000Kcom.sun.identity.liberty.ws.co"
+"mmon.jaxb.ps.EncryptableNameIdentifierElementq\u0000~\u0000Isq\u0000~\u0000\u0016pp\u0000s"
+"q\u0000~\u0000\u0000ppq\u0000~\u0000osq\u0000~\u0000\u000fppsq\u0000~\u00000q\u0000~\u0000\u0015pq\u0000~\u0000\u001eq\u0000~\u00004q\u0000~\u00008sq\u0000~\u00002t\u0000\u000fTarg"
+"etNamespaceq\u0000~\u0000lsq\u0000~\u00000ppsq\u0000~\u0000\u001bppsr\u0000%com.sun.msv.datatype.xsd"
+".DateTimeType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000)com.sun.msv.datatype.xsd.DateTim"
+"eBaseType\u0014W\u001a@3\u00a5\u00b4\u00e5\u0002\u0000\u0000xq\u0000~\u0000 q\u0000~\u0000&t\u0000\bdateTimeq\u0000~\u0000*q\u0000~\u0000,sq\u0000~\u0000-q\u0000"
+"~\u0000\u00a7q\u0000~\u0000&sq\u0000~\u00002t\u0000\fIssueInstantt\u0000\u0000sq\u0000~\u00000ppsq\u0000~\u0000\u001bppsr\u0000$com.sun."
+"msv.datatype.xsd.IntegerType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000+com.sun.msv.datat"
+"ype.xsd.IntegerDerivedType\u0099\u00f1]\u0090&6k\u00be\u0002\u0000\u0001L\u0000\nbaseFacetsq\u0000~\u0000sxq\u0000~\u0000"
+" q\u0000~\u0000&t\u0000\u0007integerq\u0000~\u0000*sr\u0000,com.sun.msv.datatype.xsd.FractionDi"
+"gitsFacet\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001I\u0000\u0005scalexr\u0000;com.sun.msv.datatype.xsd.Dat"
+"aTypeWithLexicalConstraintFacetT\u0090\u001c>\u001azb\u00ea\u0002\u0000\u0000xq\u0000~\u0000rppq\u0000~\u0000*\u0001\u0000sr\u0000"
+"#com.sun.msv.datatype.xsd.NumberType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000 q\u0000~\u0000&t\u0000"
+"\u0007decimalq\u0000~\u0000*q\u0000~\u0000\u00b6t\u0000\u000efractionDigits\u0000\u0000\u0000\u0000q\u0000~\u0000,sq\u0000~\u0000-q\u0000~\u0000\u00b1q\u0000~\u0000&"
+"sq\u0000~\u00002t\u0000\fMajorVersionq\u0000~\u0000\u00absq\u0000~\u00000ppq\u0000~\u0000\u00adsq\u0000~\u00002t\u0000\fMinorVersion"
+"q\u0000~\u0000\u00absq\u0000~\u00000ppsq\u0000~\u0000\u001bppsr\u0000\u001fcom.sun.msv.datatype.xsd.IDType\u0000\u0000\u0000\u0000"
+"\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000#com.sun.msv.datatype.xsd.NcnameType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000"
+"\"com.sun.msv.datatype.xsd.TokenType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000#com.sun.ms"
+"v.datatype.xsd.StringType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001Z\u0000\risAlwaysValidxq\u0000~\u0000 q\u0000"
+"~\u0000&t\u0000\u0002IDq\u0000~\u0000*\u0000q\u0000~\u0000,sq\u0000~\u0000-q\u0000~\u0000\u00c6q\u0000~\u0000&sq\u0000~\u00002t\u0000\tRequestIDq\u0000~\u0000\u00absq"
+"\u0000~\u0000\u000fppsq\u0000~\u00000q\u0000~\u0000\u0015psq\u0000~\u0000\u001bq\u0000~\u0000\u0015pq\u0000~\u0000yq\u0000~\u0000,sq\u0000~\u0000-q\u0000~\u0000zq\u0000~\u0000&sq\u0000~"
+"\u00002t\u0000\u0007consentq\u0000~\u0000lq\u0000~\u00008sr\u0000\"com.sun.msv.grammar.ExpressionPool"
+"\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001L\u0000\bexpTablet\u0000/Lcom/sun/msv/grammar/ExpressionPool"
+"$ClosedHash;xpsr\u0000-com.sun.msv.grammar.ExpressionPool$ClosedH"
+"ash\u00d7j\u00d0N\u00ef\u00e8\u00ed\u001c\u0003\u0000\u0003I\u0000\u0005countB\u0000\rstreamVersionL\u0000\u0006parentt\u0000$Lcom/sun/m"
+"sv/grammar/ExpressionPool;xp\u0000\u0000\u0000.\u0001pq\u0000~\u0000Yq\u0000~\u0000\u0082q\u0000~\u0000Wq\u0000~\u0000\bq\u0000~\u0000Xq"
+"\u0000~\u0000Aq\u0000~\u0000Nq\u0000~\u0000\\q\u0000~\u0000dq\u0000~\u0000\u0085q\u0000~\u0000\u008dq\u0000~\u0000\u0098q\u0000~\u0000\u0005q\u0000~\u0000\fq\u0000~\u0000\rq\u0000~\u0000\u0010q\u0000~\u0000@q"
+"\u0000~\u0000Mq\u0000~\u0000[q\u0000~\u0000cq\u0000~\u0000\u0084q\u0000~\u0000\u001aq\u0000~\u0000\u008cq\u0000~\u0000\u0097q\u0000~\u0000nq\u0000~\u0000\u009dq\u0000~\u0000Kq\u0000~\u0000aq\u0000~\u0000\u008aq"
+"\u0000~\u0000\nq\u0000~\u0000\u0081q\u0000~\u0000\u000bq\u0000~\u0000\u00caq\u0000~\u0000\u000eq\u0000~\u0000\u0007q\u0000~\u0000\u0013q\u0000~\u0000=q\u0000~\u0000\u0006q\u0000~\u0000/q\u0000~\u0000Rq\u0000~\u0000hq"
+"\u0000~\u0000}q\u0000~\u0000\u0091q\u0000~\u0000\u009eq\u0000~\u0000\tq\u0000~\u0000>x"));
        }
        return new com.sun.msv.verifier.regexp.REDocumentDeclaration(schemaFragment);
    }

    public class Unmarshaller
        extends com.sun.identity.federation.jaxb.entityconfig.impl.runtime.AbstractUnmarshallingEventHandlerImpl
    {


        public Unmarshaller(com.sun.identity.federation.jaxb.entityconfig.impl.runtime.UnmarshallingContext context) {
            super(context, "-----------------");
        }

        protected Unmarshaller(com.sun.identity.federation.jaxb.entityconfig.impl.runtime.UnmarshallingContext context, int startState) {
            this(context);
            state = startState;
        }

        public java.lang.Object owner() {
            return com.sun.identity.liberty.ws.common.jaxb.ps.impl.NameIdentifierMappingRequestTypeImpl.this;
        }

        public void enterElement(java.lang.String ___uri, java.lang.String ___local, java.lang.String ___qname, org.xml.sax.Attributes __atts)
            throws org.xml.sax.SAXException
        {
            int attIdx;
            outer:
            while (true) {
                switch (state) {
                    case  15 :
                        attIdx = context.getAttribute("", "Format");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().enterElement(___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        attIdx = context.getAttribute("", "NameQualifier");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().enterElement(___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        break;
                    case  14 :
                        revertToParentFromEnterElement(___uri, ___local, ___qname, __atts);
                        return ;
                    case  10 :
                        if (("EncryptableNameIdentifier" == ___local)&&("urn:liberty:iff:2003-08" == ___uri)) {
                            _NameIdentifier = ((com.sun.identity.liberty.ws.common.jaxb.ps.impl.EncryptableNameIdentifierElementImpl) spawnChildFromEnterElement((com.sun.identity.liberty.ws.common.jaxb.ps.impl.EncryptableNameIdentifierElementImpl.class), 11, ___uri, ___local, ___qname, __atts));
                            return ;
                        }
                        if (("NameIdentifier" == ___local)&&("urn:oasis:names:tc:SAML:1.0:assertion" == ___uri)) {
                            _NameIdentifier = ((com.sun.identity.liberty.ws.common.jaxb.assertion.impl.NameIdentifierElementImpl) spawnChildFromEnterElement((com.sun.identity.liberty.ws.common.jaxb.assertion.impl.NameIdentifierElementImpl.class), 11, ___uri, ___local, ___qname, __atts));
                            return ;
                        }
                        if (("NameIdentifier" == ___local)&&("urn:oasis:names:tc:SAML:1.0:assertion" == ___uri)) {
                            context.pushAttributes(__atts, true);
                            state = 15;
                            return ;
                        }
                        break;
                    case  11 :
                        if (("TargetNamespace" == ___local)&&("urn:liberty:iff:2003-08" == ___uri)) {
                            context.pushAttributes(__atts, true);
                            state = 12;
                            return ;
                        }
                        break;
                    case  7 :
                        if (("Extension" == ___local)&&("urn:liberty:iff:2003-08" == ___uri)) {
                            _getExtension().add(((com.sun.identity.liberty.ws.common.jaxb.ps.impl.ExtensionElementImpl) spawnChildFromEnterElement((com.sun.identity.liberty.ws.common.jaxb.ps.impl.ExtensionElementImpl.class), 7, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("Extension" == ___local)&&("urn:liberty:iff:2003-08" == ___uri)) {
                            context.pushAttributes(__atts, false);
                            state = 5;
                            return ;
                        }
                        if (("ProviderID" == ___local)&&("urn:liberty:iff:2003-08" == ___uri)) {
                            context.pushAttributes(__atts, true);
                            state = 8;
                            return ;
                        }
                        break;
                    case  3 :
                        attIdx = context.getAttribute("", "IssueInstant");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().enterElement(___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        break;
                    case  5 :
                        if (!(("" == ___uri)||("urn:liberty:iff:2003-08" == ___uri))) {
                            _getExtension().add(((com.sun.identity.liberty.ws.common.jaxb.ps.impl.ExtensionTypeImpl) spawnChildFromEnterElement((com.sun.identity.liberty.ws.common.jaxb.ps.impl.ExtensionTypeImpl.class), 6, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        break;
                    case  4 :
                        if (("Extension" == ___local)&&("urn:liberty:iff:2003-08" == ___uri)) {
                            _getExtension().add(((com.sun.identity.liberty.ws.common.jaxb.ps.impl.ExtensionElementImpl) spawnChildFromEnterElement((com.sun.identity.liberty.ws.common.jaxb.ps.impl.ExtensionElementImpl.class), 7, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("Extension" == ___local)&&("urn:liberty:iff:2003-08" == ___uri)) {
                            context.pushAttributes(__atts, false);
                            state = 5;
                            return ;
                        }
                        state = 7;
                        continue outer;
                    case  0 :
                        attIdx = context.getAttribute("urn:liberty:iff:2003-08", "consent");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            state = 3;
                            eatText1(v);
                            continue outer;
                        }
                        state = 3;
                        continue outer;
                }
                super.enterElement(___uri, ___local, ___qname, __atts);
                break;
            }
        }

        private void eatText1(final java.lang.String value)
            throws org.xml.sax.SAXException
        {
            try {
                _Consent = com.sun.xml.bind.WhiteSpaceProcessor.collapse(value);
            } catch (java.lang.Exception e) {
                handleParseConversionException(e);
            }
        }

        public void leaveElement(java.lang.String ___uri, java.lang.String ___local, java.lang.String ___qname)
            throws org.xml.sax.SAXException
        {
            int attIdx;
            outer:
            while (true) {
                switch (state) {
                    case  15 :
                        attIdx = context.getAttribute("", "Format");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().leaveElement(___uri, ___local, ___qname);
                            return ;
                        }
                        attIdx = context.getAttribute("", "NameQualifier");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().leaveElement(___uri, ___local, ___qname);
                            return ;
                        }
                        break;
                    case  9 :
                        if (("ProviderID" == ___local)&&("urn:liberty:iff:2003-08" == ___uri)) {
                            context.popAttributes();
                            state = 10;
                            return ;
                        }
                        break;
                    case  14 :
                        revertToParentFromLeaveElement(___uri, ___local, ___qname);
                        return ;
                    case  13 :
                        if (("TargetNamespace" == ___local)&&("urn:liberty:iff:2003-08" == ___uri)) {
                            context.popAttributes();
                            state = 14;
                            return ;
                        }
                        break;
                    case  3 :
                        attIdx = context.getAttribute("", "IssueInstant");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().leaveElement(___uri, ___local, ___qname);
                            return ;
                        }
                        break;
                    case  16 :
                        if (("NameIdentifier" == ___local)&&("urn:oasis:names:tc:SAML:1.0:assertion" == ___uri)) {
                            context.popAttributes();
                            state = 11;
                            return ;
                        }
                        break;
                    case  4 :
                        state = 7;
                        continue outer;
                    case  6 :
                        if (("Extension" == ___local)&&("urn:liberty:iff:2003-08" == ___uri)) {
                            context.popAttributes();
                            state = 7;
                            return ;
                        }
                        break;
                    case  0 :
                        attIdx = context.getAttribute("urn:liberty:iff:2003-08", "consent");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            state = 3;
                            eatText1(v);
                            continue outer;
                        }
                        state = 3;
                        continue outer;
                }
                super.leaveElement(___uri, ___local, ___qname);
                break;
            }
        }

        public void enterAttribute(java.lang.String ___uri, java.lang.String ___local, java.lang.String ___qname)
            throws org.xml.sax.SAXException
        {
            int attIdx;
            outer:
            while (true) {
                switch (state) {
                    case  15 :
                        if (("Format" == ___local)&&("" == ___uri)) {
                            _NameIdentifier = ((com.sun.identity.liberty.ws.common.jaxb.assertion.impl.NameIdentifierTypeImpl) spawnChildFromEnterAttribute((com.sun.identity.liberty.ws.common.jaxb.assertion.impl.NameIdentifierTypeImpl.class), 16, ___uri, ___local, ___qname));
                            return ;
                        }
                        if (("NameQualifier" == ___local)&&("" == ___uri)) {
                            _NameIdentifier = ((com.sun.identity.liberty.ws.common.jaxb.assertion.impl.NameIdentifierTypeImpl) spawnChildFromEnterAttribute((com.sun.identity.liberty.ws.common.jaxb.assertion.impl.NameIdentifierTypeImpl.class), 16, ___uri, ___local, ___qname));
                            return ;
                        }
                        break;
                    case  14 :
                        revertToParentFromEnterAttribute(___uri, ___local, ___qname);
                        return ;
                    case  3 :
                        if (("IssueInstant" == ___local)&&("" == ___uri)) {
                            spawnHandlerFromEnterAttribute((((com.sun.identity.liberty.ws.common.jaxb.protocol.impl.RequestAbstractTypeImpl)com.sun.identity.liberty.ws.common.jaxb.ps.impl.NameIdentifierMappingRequestTypeImpl.this).new Unmarshaller(context)), 4, ___uri, ___local, ___qname);
                            return ;
                        }
                        break;
                    case  4 :
                        state = 7;
                        continue outer;
                    case  0 :
                        if (("consent" == ___local)&&("urn:liberty:iff:2003-08" == ___uri)) {
                            state = 1;
                            return ;
                        }
                        state = 3;
                        continue outer;
                }
                super.enterAttribute(___uri, ___local, ___qname);
                break;
            }
        }

        public void leaveAttribute(java.lang.String ___uri, java.lang.String ___local, java.lang.String ___qname)
            throws org.xml.sax.SAXException
        {
            int attIdx;
            outer:
            while (true) {
                switch (state) {
                    case  15 :
                        attIdx = context.getAttribute("", "Format");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().leaveAttribute(___uri, ___local, ___qname);
                            return ;
                        }
                        attIdx = context.getAttribute("", "NameQualifier");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().leaveAttribute(___uri, ___local, ___qname);
                            return ;
                        }
                        break;
                    case  14 :
                        revertToParentFromLeaveAttribute(___uri, ___local, ___qname);
                        return ;
                    case  2 :
                        if (("consent" == ___local)&&("urn:liberty:iff:2003-08" == ___uri)) {
                            state = 3;
                            return ;
                        }
                        break;
                    case  3 :
                        attIdx = context.getAttribute("", "IssueInstant");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().leaveAttribute(___uri, ___local, ___qname);
                            return ;
                        }
                        break;
                    case  4 :
                        state = 7;
                        continue outer;
                    case  0 :
                        attIdx = context.getAttribute("urn:liberty:iff:2003-08", "consent");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            state = 3;
                            eatText1(v);
                            continue outer;
                        }
                        state = 3;
                        continue outer;
                }
                super.leaveAttribute(___uri, ___local, ___qname);
                break;
            }
        }

        public void handleText(final java.lang.String value)
            throws org.xml.sax.SAXException
        {
            int attIdx;
            outer:
            while (true) {
                try {
                    switch (state) {
                        case  15 :
                            attIdx = context.getAttribute("", "Format");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().text(value);
                                return ;
                            }
                            attIdx = context.getAttribute("", "NameQualifier");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().text(value);
                                return ;
                            }
                            _NameIdentifier = ((com.sun.identity.liberty.ws.common.jaxb.assertion.impl.NameIdentifierTypeImpl) spawnChildFromText((com.sun.identity.liberty.ws.common.jaxb.assertion.impl.NameIdentifierTypeImpl.class), 16, value));
                            return ;
                        case  1 :
                            state = 2;
                            eatText1(value);
                            return ;
                        case  14 :
                            revertToParentFromText(value);
                            return ;
                        case  8 :
                            state = 9;
                            eatText2(value);
                            return ;
                        case  3 :
                            attIdx = context.getAttribute("", "IssueInstant");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().text(value);
                                return ;
                            }
                            break;
                        case  12 :
                            state = 13;
                            eatText3(value);
                            return ;
                        case  4 :
                            state = 7;
                            continue outer;
                        case  0 :
                            attIdx = context.getAttribute("urn:liberty:iff:2003-08", "consent");
                            if (attIdx >= 0) {
                                final java.lang.String v = context.eatAttribute(attIdx);
                                state = 3;
                                eatText1(v);
                                continue outer;
                            }
                            state = 3;
                            continue outer;
                    }
                } catch (java.lang.RuntimeException e) {
                    handleUnexpectedTextException(value, e);
                }
                break;
            }
        }

        private void eatText2(final java.lang.String value)
            throws org.xml.sax.SAXException
        {
            try {
                _ProviderID = com.sun.xml.bind.WhiteSpaceProcessor.collapse(value);
            } catch (java.lang.Exception e) {
                handleParseConversionException(e);
            }
        }

        private void eatText3(final java.lang.String value)
            throws org.xml.sax.SAXException
        {
            try {
                _TargetNamespace = com.sun.xml.bind.WhiteSpaceProcessor.collapse(value);
            } catch (java.lang.Exception e) {
                handleParseConversionException(e);
            }
        }

    }

}
