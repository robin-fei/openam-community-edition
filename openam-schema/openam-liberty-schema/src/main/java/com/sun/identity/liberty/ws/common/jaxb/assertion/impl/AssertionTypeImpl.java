//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v1.0.6-b27-fcs 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2012.06.11 at 10:33:54 AM PDT 
//


package com.sun.identity.liberty.ws.common.jaxb.assertion.impl;

public class AssertionTypeImpl implements com.sun.identity.liberty.ws.common.jaxb.assertion.AssertionType, com.sun.xml.bind.JAXBObject, com.sun.identity.federation.jaxb.entityconfig.impl.runtime.UnmarshallableObject, com.sun.identity.federation.jaxb.entityconfig.impl.runtime.XMLSerializable, com.sun.xml.bind.marshaller.IdentifiableObject, com.sun.identity.federation.jaxb.entityconfig.impl.runtime.ValidatableObject
{

    protected com.sun.identity.liberty.ws.common.jaxb.assertion.ConditionsType _Conditions;
    protected java.lang.String _Issuer;
    protected java.math.BigInteger _MinorVersion;
    protected com.sun.xml.bind.util.ListImpl _StatementOrSubjectStatementOrAuthenticationStatement;
    protected com.sun.identity.liberty.ws.common.jaxb.assertion.AdviceType _Advice;
    protected java.util.Calendar _IssueInstant;
    protected java.lang.String _AssertionID;
    protected com.sun.identity.liberty.ws.common.jaxb.xmlsig.SignatureType _Signature;
    protected java.math.BigInteger _MajorVersion;
    public final static java.lang.Class version = (com.sun.identity.liberty.ws.common.jaxb.assertion.impl.JAXBVersion.class);
    private static com.sun.msv.grammar.Grammar schemaFragment;

    private final static java.lang.Class PRIMARY_INTERFACE_CLASS() {
        return (com.sun.identity.liberty.ws.common.jaxb.assertion.AssertionType.class);
    }

    public com.sun.identity.liberty.ws.common.jaxb.assertion.ConditionsType getConditions() {
        return _Conditions;
    }

    public void setConditions(com.sun.identity.liberty.ws.common.jaxb.assertion.ConditionsType value) {
        _Conditions = value;
    }

    public java.lang.String getIssuer() {
        return _Issuer;
    }

    public void setIssuer(java.lang.String value) {
        _Issuer = value;
    }

    public java.math.BigInteger getMinorVersion() {
        return _MinorVersion;
    }

    public void setMinorVersion(java.math.BigInteger value) {
        _MinorVersion = value;
    }

    protected com.sun.xml.bind.util.ListImpl _getStatementOrSubjectStatementOrAuthenticationStatement() {
        if (_StatementOrSubjectStatementOrAuthenticationStatement == null) {
            _StatementOrSubjectStatementOrAuthenticationStatement = new com.sun.xml.bind.util.ListImpl(new java.util.ArrayList());
        }
        return _StatementOrSubjectStatementOrAuthenticationStatement;
    }

    public java.util.List getStatementOrSubjectStatementOrAuthenticationStatement() {
        return _getStatementOrSubjectStatementOrAuthenticationStatement();
    }

    public com.sun.identity.liberty.ws.common.jaxb.assertion.AdviceType getAdvice() {
        return _Advice;
    }

    public void setAdvice(com.sun.identity.liberty.ws.common.jaxb.assertion.AdviceType value) {
        _Advice = value;
    }

    public java.util.Calendar getIssueInstant() {
        return _IssueInstant;
    }

    public void setIssueInstant(java.util.Calendar value) {
        _IssueInstant = value;
    }

    public java.lang.String getAssertionID() {
        return _AssertionID;
    }

    public void setAssertionID(java.lang.String value) {
        _AssertionID = value;
    }

    public com.sun.identity.liberty.ws.common.jaxb.xmlsig.SignatureType getSignature() {
        return _Signature;
    }

    public void setSignature(com.sun.identity.liberty.ws.common.jaxb.xmlsig.SignatureType value) {
        _Signature = value;
    }

    public java.math.BigInteger getMajorVersion() {
        return _MajorVersion;
    }

    public void setMajorVersion(java.math.BigInteger value) {
        _MajorVersion = value;
    }

    public com.sun.identity.federation.jaxb.entityconfig.impl.runtime.UnmarshallingEventHandler createUnmarshaller(com.sun.identity.federation.jaxb.entityconfig.impl.runtime.UnmarshallingContext context) {
        return new com.sun.identity.liberty.ws.common.jaxb.assertion.impl.AssertionTypeImpl.Unmarshaller(context);
    }

    public void serializeBody(com.sun.identity.federation.jaxb.entityconfig.impl.runtime.XMLSerializer context)
        throws org.xml.sax.SAXException
    {
        int idx4 = 0;
        final int len4 = ((_StatementOrSubjectStatementOrAuthenticationStatement == null)? 0 :_StatementOrSubjectStatementOrAuthenticationStatement.size());
        if (_Conditions!= null) {
            if (_Conditions instanceof javax.xml.bind.Element) {
                context.childAsBody(((com.sun.xml.bind.JAXBObject) _Conditions), "Conditions");
            } else {
                context.startElement("urn:oasis:names:tc:SAML:1.0:assertion", "Conditions");
                context.childAsURIs(((com.sun.xml.bind.JAXBObject) _Conditions), "Conditions");
                context.endNamespaceDecls();
                context.childAsAttributes(((com.sun.xml.bind.JAXBObject) _Conditions), "Conditions");
                context.endAttributes();
                context.childAsBody(((com.sun.xml.bind.JAXBObject) _Conditions), "Conditions");
                context.endElement();
            }
        }
        if (_Advice!= null) {
            if (_Advice instanceof javax.xml.bind.Element) {
                context.childAsBody(((com.sun.xml.bind.JAXBObject) _Advice), "Advice");
            } else {
                context.startElement("urn:oasis:names:tc:SAML:1.0:assertion", "Advice");
                context.childAsURIs(((com.sun.xml.bind.JAXBObject) _Advice), "Advice");
                context.endNamespaceDecls();
                context.childAsAttributes(((com.sun.xml.bind.JAXBObject) _Advice), "Advice");
                context.endAttributes();
                context.childAsBody(((com.sun.xml.bind.JAXBObject) _Advice), "Advice");
                context.endElement();
            }
        }
        while (idx4 != len4) {
            context.childAsBody(((com.sun.xml.bind.JAXBObject) _StatementOrSubjectStatementOrAuthenticationStatement.get(idx4 ++)), "StatementOrSubjectStatementOrAuthenticationStatement");
        }
        if (_Signature!= null) {
            if (_Signature instanceof javax.xml.bind.Element) {
                context.childAsBody(((com.sun.xml.bind.JAXBObject) _Signature), "Signature");
            } else {
                context.startElement("http://www.w3.org/2000/09/xmldsig#", "Signature");
                context.childAsURIs(((com.sun.xml.bind.JAXBObject) _Signature), "Signature");
                context.endNamespaceDecls();
                context.childAsAttributes(((com.sun.xml.bind.JAXBObject) _Signature), "Signature");
                context.endAttributes();
                context.childAsBody(((com.sun.xml.bind.JAXBObject) _Signature), "Signature");
                context.endElement();
            }
        }
    }

    public void serializeAttributes(com.sun.identity.federation.jaxb.entityconfig.impl.runtime.XMLSerializer context)
        throws org.xml.sax.SAXException
    {
        int idx4 = 0;
        final int len4 = ((_StatementOrSubjectStatementOrAuthenticationStatement == null)? 0 :_StatementOrSubjectStatementOrAuthenticationStatement.size());
        context.startAttribute("", "AssertionID");
        try {
            context.text(context.onID(this, ((java.lang.String) _AssertionID)), "AssertionID");
        } catch (java.lang.Exception e) {
            com.sun.identity.federation.jaxb.entityconfig.impl.runtime.Util.handlePrintConversionException(this, e, context);
        }
        context.endAttribute();
        context.startAttribute("", "IssueInstant");
        try {
            context.text(com.sun.msv.datatype.xsd.DateTimeType.theInstance.serializeJavaObject(((java.util.Calendar) _IssueInstant), null), "IssueInstant");
        } catch (java.lang.Exception e) {
            com.sun.identity.federation.jaxb.entityconfig.impl.runtime.Util.handlePrintConversionException(this, e, context);
        }
        context.endAttribute();
        context.startAttribute("", "Issuer");
        try {
            context.text(((java.lang.String) _Issuer), "Issuer");
        } catch (java.lang.Exception e) {
            com.sun.identity.federation.jaxb.entityconfig.impl.runtime.Util.handlePrintConversionException(this, e, context);
        }
        context.endAttribute();
        context.startAttribute("", "MajorVersion");
        try {
            context.text(javax.xml.bind.DatatypeConverter.printInteger(((java.math.BigInteger) _MajorVersion)), "MajorVersion");
        } catch (java.lang.Exception e) {
            com.sun.identity.federation.jaxb.entityconfig.impl.runtime.Util.handlePrintConversionException(this, e, context);
        }
        context.endAttribute();
        context.startAttribute("", "MinorVersion");
        try {
            context.text(javax.xml.bind.DatatypeConverter.printInteger(((java.math.BigInteger) _MinorVersion)), "MinorVersion");
        } catch (java.lang.Exception e) {
            com.sun.identity.federation.jaxb.entityconfig.impl.runtime.Util.handlePrintConversionException(this, e, context);
        }
        context.endAttribute();
        if (_Conditions!= null) {
            if (_Conditions instanceof javax.xml.bind.Element) {
                context.childAsAttributes(((com.sun.xml.bind.JAXBObject) _Conditions), "Conditions");
            }
        }
        if (_Advice!= null) {
            if (_Advice instanceof javax.xml.bind.Element) {
                context.childAsAttributes(((com.sun.xml.bind.JAXBObject) _Advice), "Advice");
            }
        }
        while (idx4 != len4) {
            context.childAsAttributes(((com.sun.xml.bind.JAXBObject) _StatementOrSubjectStatementOrAuthenticationStatement.get(idx4 ++)), "StatementOrSubjectStatementOrAuthenticationStatement");
        }
        if (_Signature!= null) {
            if (_Signature instanceof javax.xml.bind.Element) {
                context.childAsAttributes(((com.sun.xml.bind.JAXBObject) _Signature), "Signature");
            }
        }
    }

    public void serializeURIs(com.sun.identity.federation.jaxb.entityconfig.impl.runtime.XMLSerializer context)
        throws org.xml.sax.SAXException
    {
        int idx4 = 0;
        final int len4 = ((_StatementOrSubjectStatementOrAuthenticationStatement == null)? 0 :_StatementOrSubjectStatementOrAuthenticationStatement.size());
        if (_Conditions!= null) {
            if (_Conditions instanceof javax.xml.bind.Element) {
                context.childAsURIs(((com.sun.xml.bind.JAXBObject) _Conditions), "Conditions");
            }
        }
        if (_Advice!= null) {
            if (_Advice instanceof javax.xml.bind.Element) {
                context.childAsURIs(((com.sun.xml.bind.JAXBObject) _Advice), "Advice");
            }
        }
        while (idx4 != len4) {
            context.childAsURIs(((com.sun.xml.bind.JAXBObject) _StatementOrSubjectStatementOrAuthenticationStatement.get(idx4 ++)), "StatementOrSubjectStatementOrAuthenticationStatement");
        }
        if (_Signature!= null) {
            if (_Signature instanceof javax.xml.bind.Element) {
                context.childAsURIs(((com.sun.xml.bind.JAXBObject) _Signature), "Signature");
            }
        }
    }

    public java.lang.String ____jaxb____getId() {
        return ((java.lang.String) _AssertionID);
    }

    public java.lang.Class getPrimaryInterface() {
        return (com.sun.identity.liberty.ws.common.jaxb.assertion.AssertionType.class);
    }

    public com.sun.msv.verifier.DocumentDeclaration createRawValidator() {
        if (schemaFragment == null) {
            schemaFragment = com.sun.xml.bind.validator.SchemaDeserializer.deserialize((
 "\u00ac\u00ed\u0000\u0005sr\u0000\u001fcom.sun.msv.grammar.SequenceExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000\u001dcom.su"
+"n.msv.grammar.BinaryExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002L\u0000\u0004exp1t\u0000 Lcom/sun/msv/gra"
+"mmar/Expression;L\u0000\u0004exp2q\u0000~\u0000\u0002xr\u0000\u001ecom.sun.msv.grammar.Expressi"
+"on\u00f8\u0018\u0082\u00e8N5~O\u0002\u0000\u0002L\u0000\u0013epsilonReducibilityt\u0000\u0013Ljava/lang/Boolean;L\u0000\u000b"
+"expandedExpq\u0000~\u0000\u0002xpppsq\u0000~\u0000\u0000ppsq\u0000~\u0000\u0000ppsq\u0000~\u0000\u0000ppsq\u0000~\u0000\u0000ppsq\u0000~\u0000\u0000pp"
+"sq\u0000~\u0000\u0000ppsq\u0000~\u0000\u0000ppsr\u0000\u001dcom.sun.msv.grammar.ChoiceExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000"
+"xq\u0000~\u0000\u0001ppsq\u0000~\u0000\rsr\u0000\u0011java.lang.Boolean\u00cd r\u0080\u00d5\u009c\u00fa\u00ee\u0002\u0000\u0001Z\u0000\u0005valuexp\u0000psr"
+"\u0000\'com.sun.msv.grammar.trex.ElementPattern\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001L\u0000\tnameC"
+"lasst\u0000\u001fLcom/sun/msv/grammar/NameClass;xr\u0000\u001ecom.sun.msv.gramma"
+"r.ElementExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002Z\u0000\u001aignoreUndeclaredAttributesL\u0000\fconte"
+"ntModelq\u0000~\u0000\u0002xq\u0000~\u0000\u0003q\u0000~\u0000\u0011p\u0000sq\u0000~\u0000\rppsr\u0000 com.sun.msv.grammar.One"
+"OrMoreExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000\u001ccom.sun.msv.grammar.UnaryExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001"
+"\u0002\u0000\u0001L\u0000\u0003expq\u0000~\u0000\u0002xq\u0000~\u0000\u0003q\u0000~\u0000\u0011psr\u0000 com.sun.msv.grammar.AttributeE"
+"xp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002L\u0000\u0003expq\u0000~\u0000\u0002L\u0000\tnameClassq\u0000~\u0000\u0013xq\u0000~\u0000\u0003q\u0000~\u0000\u0011psr\u00002com"
+".sun.msv.grammar.Expression$AnyStringExpression\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq"
+"\u0000~\u0000\u0003sq\u0000~\u0000\u0010\u0001q\u0000~\u0000\u001dsr\u0000 com.sun.msv.grammar.AnyNameClass\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001"
+"\u0002\u0000\u0000xr\u0000\u001dcom.sun.msv.grammar.NameClass\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xpsr\u00000com.sun"
+".msv.grammar.Expression$EpsilonExpression\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u0003q\u0000"
+"~\u0000\u001eq\u0000~\u0000#sr\u0000#com.sun.msv.grammar.SimpleNameClass\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002L\u0000"
+"\tlocalNamet\u0000\u0012Ljava/lang/String;L\u0000\fnamespaceURIq\u0000~\u0000%xq\u0000~\u0000 t\u0000C"
+"com.sun.identity.liberty.ws.common.jaxb.assertion.Conditions"
+"Elementt\u0000+http://java.sun.com/jaxb/xjc/dummy-elementssq\u0000~\u0000\u0012q"
+"\u0000~\u0000\u0011p\u0000sq\u0000~\u0000\u0000ppsq\u0000~\u0000\u0012pp\u0000sq\u0000~\u0000\rppsq\u0000~\u0000\u0017q\u0000~\u0000\u0011psq\u0000~\u0000\u001aq\u0000~\u0000\u0011pq\u0000~\u0000\u001d"
+"q\u0000~\u0000!q\u0000~\u0000#sq\u0000~\u0000$t\u0000@com.sun.identity.liberty.ws.common.jaxb.a"
+"ssertion.ConditionsTypeq\u0000~\u0000(sq\u0000~\u0000\rppsq\u0000~\u0000\u001aq\u0000~\u0000\u0011psr\u0000\u001bcom.sun."
+"msv.grammar.DataExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0003L\u0000\u0002dtt\u0000\u001fLorg/relaxng/datatype/"
+"Datatype;L\u0000\u0006exceptq\u0000~\u0000\u0002L\u0000\u0004namet\u0000\u001dLcom/sun/msv/util/StringPai"
+"r;xq\u0000~\u0000\u0003q\u0000~\u0000\u0011psr\u0000\"com.sun.msv.datatype.xsd.QnameType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001"
+"\u0002\u0000\u0000xr\u0000*com.sun.msv.datatype.xsd.BuiltinAtomicType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000"
+"xr\u0000%com.sun.msv.datatype.xsd.ConcreteType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000\'com."
+"sun.msv.datatype.xsd.XSDatatypeImpl\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0003L\u0000\fnamespaceUr"
+"iq\u0000~\u0000%L\u0000\btypeNameq\u0000~\u0000%L\u0000\nwhiteSpacet\u0000.Lcom/sun/msv/datatype/"
+"xsd/WhiteSpaceProcessor;xpt\u0000 http://www.w3.org/2001/XMLSchem"
+"at\u0000\u0005QNamesr\u00005com.sun.msv.datatype.xsd.WhiteSpaceProcessor$Co"
+"llapse\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000,com.sun.msv.datatype.xsd.WhiteSpaceProc"
+"essor\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xpsr\u00000com.sun.msv.grammar.Expression$NullSet"
+"Expression\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u0003q\u0000~\u0000\u0011psr\u0000\u001bcom.sun.msv.util.String"
+"Pair\u00d0t\u001ejB\u008f\u008d\u00a0\u0002\u0000\u0002L\u0000\tlocalNameq\u0000~\u0000%L\u0000\fnamespaceURIq\u0000~\u0000%xpq\u0000~\u0000>q"
+"\u0000~\u0000=sq\u0000~\u0000$t\u0000\u0004typet\u0000)http://www.w3.org/2001/XMLSchema-instanc"
+"eq\u0000~\u0000#sq\u0000~\u0000$t\u0000\nConditionst\u0000%urn:oasis:names:tc:SAML:1.0:asse"
+"rtionq\u0000~\u0000#sq\u0000~\u0000\rppsq\u0000~\u0000\rq\u0000~\u0000\u0011psq\u0000~\u0000\u0012q\u0000~\u0000\u0011p\u0000sq\u0000~\u0000\rppsq\u0000~\u0000\u0017q\u0000~"
+"\u0000\u0011psq\u0000~\u0000\u001aq\u0000~\u0000\u0011pq\u0000~\u0000\u001dq\u0000~\u0000!q\u0000~\u0000#sq\u0000~\u0000$t\u0000?com.sun.identity.libe"
+"rty.ws.common.jaxb.assertion.AdviceElementq\u0000~\u0000(sq\u0000~\u0000\u0012q\u0000~\u0000\u0011p\u0000"
+"sq\u0000~\u0000\u0000ppsq\u0000~\u0000\u0012pp\u0000sq\u0000~\u0000\rppsq\u0000~\u0000\u0017q\u0000~\u0000\u0011psq\u0000~\u0000\u001aq\u0000~\u0000\u0011pq\u0000~\u0000\u001dq\u0000~\u0000!q"
+"\u0000~\u0000#sq\u0000~\u0000$t\u0000<com.sun.identity.liberty.ws.common.jaxb.asserti"
+"on.AdviceTypeq\u0000~\u0000(sq\u0000~\u0000\rppsq\u0000~\u0000\u001aq\u0000~\u0000\u0011pq\u0000~\u00006q\u0000~\u0000Fq\u0000~\u0000#sq\u0000~\u0000$t"
+"\u0000\u0006Adviceq\u0000~\u0000Kq\u0000~\u0000#sq\u0000~\u0000\u0017ppsq\u0000~\u0000\rppsq\u0000~\u0000\rppsq\u0000~\u0000\rppsq\u0000~\u0000\rppsq"
+"\u0000~\u0000\rppsq\u0000~\u0000\rppsq\u0000~\u0000\rppsq\u0000~\u0000\u0012pp\u0000sq\u0000~\u0000\rppsq\u0000~\u0000\u0017q\u0000~\u0000\u0011psq\u0000~\u0000\u001aq\u0000~"
+"\u0000\u0011pq\u0000~\u0000\u001dq\u0000~\u0000!q\u0000~\u0000#sq\u0000~\u0000$t\u0000Bcom.sun.identity.liberty.ws.commo"
+"n.jaxb.assertion.StatementElementq\u0000~\u0000(sq\u0000~\u0000\u0012pp\u0000sq\u0000~\u0000\rppsq\u0000~\u0000"
+"\u0017q\u0000~\u0000\u0011psq\u0000~\u0000\u001aq\u0000~\u0000\u0011pq\u0000~\u0000\u001dq\u0000~\u0000!q\u0000~\u0000#sq\u0000~\u0000$t\u0000Icom.sun.identity."
+"liberty.ws.common.jaxb.ps.AuthenticationStatementElementq\u0000~\u0000"
+"(sq\u0000~\u0000\u0012pp\u0000sq\u0000~\u0000\rppsq\u0000~\u0000\u0017q\u0000~\u0000\u0011psq\u0000~\u0000\u001aq\u0000~\u0000\u0011pq\u0000~\u0000\u001dq\u0000~\u0000!q\u0000~\u0000#sq\u0000"
+"~\u0000$t\u0000Icom.sun.identity.liberty.ws.common.jaxb.assertion.Subj"
+"ectStatementElementq\u0000~\u0000(sq\u0000~\u0000\u0012pp\u0000sq\u0000~\u0000\rppsq\u0000~\u0000\u0017q\u0000~\u0000\u0011psq\u0000~\u0000\u001aq"
+"\u0000~\u0000\u0011pq\u0000~\u0000\u001dq\u0000~\u0000!q\u0000~\u0000#sq\u0000~\u0000$t\u0000Ocom.sun.identity.liberty.ws.com"
+"mon.jaxb.security.ResourceAccessStatementElementq\u0000~\u0000(sq\u0000~\u0000\u0012p"
+"p\u0000sq\u0000~\u0000\rppsq\u0000~\u0000\u0017q\u0000~\u0000\u0011psq\u0000~\u0000\u001aq\u0000~\u0000\u0011pq\u0000~\u0000\u001dq\u0000~\u0000!q\u0000~\u0000#sq\u0000~\u0000$t\u0000Oco"
+"m.sun.identity.liberty.ws.common.jaxb.security.SessionContex"
+"tStatementElementq\u0000~\u0000(sq\u0000~\u0000\u0012pp\u0000sq\u0000~\u0000\rppsq\u0000~\u0000\u0017q\u0000~\u0000\u0011psq\u0000~\u0000\u001aq\u0000~"
+"\u0000\u0011pq\u0000~\u0000\u001dq\u0000~\u0000!q\u0000~\u0000#sq\u0000~\u0000$t\u0000Pcom.sun.identity.liberty.ws.commo"
+"n.jaxb.assertion.AuthenticationStatementElementq\u0000~\u0000(sq\u0000~\u0000\u0012pp"
+"\u0000sq\u0000~\u0000\rppsq\u0000~\u0000\u0017q\u0000~\u0000\u0011psq\u0000~\u0000\u001aq\u0000~\u0000\u0011pq\u0000~\u0000\u001dq\u0000~\u0000!q\u0000~\u0000#sq\u0000~\u0000$t\u0000Wcom"
+".sun.identity.liberty.ws.common.jaxb.assertion.Authorization"
+"DecisionStatementElementq\u0000~\u0000(sq\u0000~\u0000\u0012pp\u0000sq\u0000~\u0000\rppsq\u0000~\u0000\u0017q\u0000~\u0000\u0011psq"
+"\u0000~\u0000\u001aq\u0000~\u0000\u0011pq\u0000~\u0000\u001dq\u0000~\u0000!q\u0000~\u0000#sq\u0000~\u0000$t\u0000Kcom.sun.identity.liberty.w"
+"s.common.jaxb.assertion.AttributeStatementElementq\u0000~\u0000(sq\u0000~\u0000\r"
+"ppsq\u0000~\u0000\rq\u0000~\u0000\u0011psq\u0000~\u0000\u0012q\u0000~\u0000\u0011p\u0000sq\u0000~\u0000\rppsq\u0000~\u0000\u0017q\u0000~\u0000\u0011psq\u0000~\u0000\u001aq\u0000~\u0000\u0011pq"
+"\u0000~\u0000\u001dq\u0000~\u0000!q\u0000~\u0000#sq\u0000~\u0000$t\u0000?com.sun.identity.liberty.ws.common.ja"
+"xb.xmlsig.SignatureElementq\u0000~\u0000(sq\u0000~\u0000\u0012q\u0000~\u0000\u0011p\u0000sq\u0000~\u0000\u0000ppsq\u0000~\u0000\u0012pp"
+"\u0000sq\u0000~\u0000\rppsq\u0000~\u0000\u0017q\u0000~\u0000\u0011psq\u0000~\u0000\u001aq\u0000~\u0000\u0011pq\u0000~\u0000\u001dq\u0000~\u0000!q\u0000~\u0000#sq\u0000~\u0000$t\u0000<com"
+".sun.identity.liberty.ws.common.jaxb.xmlsig.SignatureTypeq\u0000~"
+"\u0000(sq\u0000~\u0000\rppsq\u0000~\u0000\u001aq\u0000~\u0000\u0011pq\u0000~\u00006q\u0000~\u0000Fq\u0000~\u0000#sq\u0000~\u0000$t\u0000\tSignaturet\u0000\"ht"
+"tp://www.w3.org/2000/09/xmldsig#q\u0000~\u0000#sq\u0000~\u0000\u001appsq\u0000~\u00003ppsr\u0000\u001fcom"
+".sun.msv.datatype.xsd.IDType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000#com.sun.msv.datat"
+"ype.xsd.NcnameType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000\"com.sun.msv.datatype.xsd.To"
+"kenType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000#com.sun.msv.datatype.xsd.StringType\u0000\u0000\u0000"
+"\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001Z\u0000\risAlwaysValidxq\u0000~\u00008q\u0000~\u0000=t\u0000\u0002IDq\u0000~\u0000A\u0000q\u0000~\u0000Csq\u0000~\u0000Dq\u0000~"
+"\u0000\u00b4q\u0000~\u0000=sq\u0000~\u0000$t\u0000\u000bAssertionIDt\u0000\u0000sq\u0000~\u0000\u001appsq\u0000~\u00003ppsr\u0000%com.sun.ms"
+"v.datatype.xsd.DateTimeType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000)com.sun.msv.dataty"
+"pe.xsd.DateTimeBaseType\u0014W\u001a@3\u00a5\u00b4\u00e5\u0002\u0000\u0000xq\u0000~\u00008q\u0000~\u0000=t\u0000\bdateTimeq\u0000~\u0000"
+"Aq\u0000~\u0000Csq\u0000~\u0000Dq\u0000~\u0000\u00beq\u0000~\u0000=sq\u0000~\u0000$t\u0000\fIssueInstantq\u0000~\u0000\u00b8sq\u0000~\u0000\u001appsq\u0000~"
+"\u00003q\u0000~\u0000\u0011psq\u0000~\u0000\u00b2q\u0000~\u0000=t\u0000\u0006stringsr\u00005com.sun.msv.datatype.xsd.Whi"
+"teSpaceProcessor$Preserve\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000@\u0001q\u0000~\u0000Csq\u0000~\u0000Dq\u0000~\u0000\u00c5q"
+"\u0000~\u0000=sq\u0000~\u0000$t\u0000\u0006Issuerq\u0000~\u0000\u00b8sq\u0000~\u0000\u001appsq\u0000~\u00003ppsr\u0000$com.sun.msv.data"
+"type.xsd.IntegerType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000+com.sun.msv.datatype.xsd."
+"IntegerDerivedType\u0099\u00f1]\u0090&6k\u00be\u0002\u0000\u0001L\u0000\nbaseFacetst\u0000)Lcom/sun/msv/da"
+"tatype/xsd/XSDatatypeImpl;xq\u0000~\u00008q\u0000~\u0000=t\u0000\u0007integerq\u0000~\u0000Asr\u0000,com."
+"sun.msv.datatype.xsd.FractionDigitsFacet\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001I\u0000\u0005scalex"
+"r\u0000;com.sun.msv.datatype.xsd.DataTypeWithLexicalConstraintFac"
+"etT\u0090\u001c>\u001azb\u00ea\u0002\u0000\u0000xr\u0000*com.sun.msv.datatype.xsd.DataTypeWithFacet\u0000"
+"\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0005Z\u0000\fisFacetFixedZ\u0000\u0012needValueCheckFlagL\u0000\bbaseTypeq\u0000~"
+"\u0000\u00cfL\u0000\fconcreteTypet\u0000\'Lcom/sun/msv/datatype/xsd/ConcreteType;L"
+"\u0000\tfacetNameq\u0000~\u0000%xq\u0000~\u0000:ppq\u0000~\u0000A\u0001\u0000sr\u0000#com.sun.msv.datatype.xsd."
+"NumberType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u00008q\u0000~\u0000=t\u0000\u0007decimalq\u0000~\u0000Aq\u0000~\u0000\u00d8t\u0000\u000efract"
+"ionDigits\u0000\u0000\u0000\u0000q\u0000~\u0000Csq\u0000~\u0000Dq\u0000~\u0000\u00d1q\u0000~\u0000=sq\u0000~\u0000$t\u0000\fMajorVersionq\u0000~\u0000\u00b8"
+"sq\u0000~\u0000\u001appq\u0000~\u0000\u00ccsq\u0000~\u0000$t\u0000\fMinorVersionq\u0000~\u0000\u00b8sr\u0000\"com.sun.msv.gramm"
+"ar.ExpressionPool\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001L\u0000\bexpTablet\u0000/Lcom/sun/msv/gramm"
+"ar/ExpressionPool$ClosedHash;xpsr\u0000-com.sun.msv.grammar.Expre"
+"ssionPool$ClosedHash\u00d7j\u00d0N\u00ef\u00e8\u00ed\u001c\u0003\u0000\u0003I\u0000\u0005countB\u0000\rstreamVersionL\u0000\u0006pa"
+"rentt\u0000$Lcom/sun/msv/grammar/ExpressionPool;xp\u0000\u0000\u00008\u0001pq\u0000~\u0000Mq\u0000~\u0000"
+"\u0099q\u0000~\u0000\tq\u0000~\u0000\u0019q\u0000~\u0000-q\u0000~\u0000Pq\u0000~\u0000Xq\u0000~\u0000jq\u0000~\u0000pq\u0000~\u0000vq\u0000~\u0000|q\u0000~\u0000\u0082q\u0000~\u0000\u0088q\u0000~\u0000"
+"\u008eq\u0000~\u0000\u0094q\u0000~\u0000\u009cq\u0000~\u0000\u00a4q\u0000~\u0000\u0006q\u0000~\u0000\u0005q\u0000~\u0000fq\u0000~\u0000dq\u0000~\u0000\fq\u0000~\u0000\bq\u0000~\u0000\u0016q\u0000~\u0000,q\u0000~\u0000"
+"Oq\u0000~\u0000Wq\u0000~\u0000iq\u0000~\u0000oq\u0000~\u0000uq\u0000~\u0000{q\u0000~\u0000\u0081q\u0000~\u0000\u0087q\u0000~\u0000\u008dq\u0000~\u0000\u0093q\u0000~\u0000\u009bq\u0000~\u0000\u00a3q\u0000~\u0000"
+"\u0007q\u0000~\u0000*q\u0000~\u0000Uq\u0000~\u0000\u00a1q\u0000~\u0000`q\u0000~\u0000bq\u0000~\u0000aq\u0000~\u0000\nq\u0000~\u0000\u000bq\u0000~\u0000\u000eq\u0000~\u0000Lq\u0000~\u0000\u0098q\u0000~\u0000"
+"cq\u0000~\u0000gq\u0000~\u00001q\u0000~\u0000\\q\u0000~\u0000\u00a8q\u0000~\u0000eq\u0000~\u0000\u000fx"));
        }
        return new com.sun.msv.verifier.regexp.REDocumentDeclaration(schemaFragment);
    }

    public class Unmarshaller
        extends com.sun.identity.federation.jaxb.entityconfig.impl.runtime.AbstractUnmarshallingEventHandlerImpl
    {


        public Unmarshaller(com.sun.identity.federation.jaxb.entityconfig.impl.runtime.UnmarshallingContext context) {
            super(context, "--------------------------");
        }

        protected Unmarshaller(com.sun.identity.federation.jaxb.entityconfig.impl.runtime.UnmarshallingContext context, int startState) {
            this(context);
            state = startState;
        }

        public java.lang.Object owner() {
            return com.sun.identity.liberty.ws.common.jaxb.assertion.impl.AssertionTypeImpl.this;
        }

        public void enterElement(java.lang.String ___uri, java.lang.String ___local, java.lang.String ___qname, org.xml.sax.Attributes __atts)
            throws org.xml.sax.SAXException
        {
            int attIdx;
            outer:
            while (true) {
                switch (state) {
                    case  0 :
                        attIdx = context.getAttribute("", "AssertionID");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            state = 3;
                            eatText1(v);
                            continue outer;
                        }
                        break;
                    case  23 :
                        attIdx = context.getAttribute("", "Id");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().enterElement(___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        if (("SignedInfo" == ___local)&&("http://www.w3.org/2000/09/xmldsig#" == ___uri)) {
                            _Signature = ((com.sun.identity.liberty.ws.common.jaxb.xmlsig.impl.SignatureTypeImpl) spawnChildFromEnterElement((com.sun.identity.liberty.ws.common.jaxb.xmlsig.impl.SignatureTypeImpl.class), 24, ___uri, ___local, ___qname, __atts));
                            return ;
                        }
                        if (("SignedInfo" == ___local)&&("http://www.w3.org/2000/09/xmldsig#" == ___uri)) {
                            _Signature = ((com.sun.identity.liberty.ws.common.jaxb.xmlsig.impl.SignatureTypeImpl) spawnChildFromEnterElement((com.sun.identity.liberty.ws.common.jaxb.xmlsig.impl.SignatureTypeImpl.class), 24, ___uri, ___local, ___qname, __atts));
                            return ;
                        }
                        break;
                    case  19 :
                        if (("AssertionIDReference" == ___local)&&("urn:oasis:names:tc:SAML:1.0:assertion" == ___uri)) {
                            _Advice = ((com.sun.identity.liberty.ws.common.jaxb.assertion.impl.AdviceTypeImpl) spawnChildFromEnterElement((com.sun.identity.liberty.ws.common.jaxb.assertion.impl.AdviceTypeImpl.class), 20, ___uri, ___local, ___qname, __atts));
                            return ;
                        }
                        if (("Assertion" == ___local)&&("urn:oasis:names:tc:SAML:1.0:assertion" == ___uri)) {
                            _Advice = ((com.sun.identity.liberty.ws.common.jaxb.assertion.impl.AdviceTypeImpl) spawnChildFromEnterElement((com.sun.identity.liberty.ws.common.jaxb.assertion.impl.AdviceTypeImpl.class), 20, ___uri, ___local, ___qname, __atts));
                            return ;
                        }
                        if (!(("" == ___uri)||("urn:oasis:names:tc:SAML:1.0:assertion" == ___uri))) {
                            _Advice = ((com.sun.identity.liberty.ws.common.jaxb.assertion.impl.AdviceTypeImpl) spawnChildFromEnterElement((com.sun.identity.liberty.ws.common.jaxb.assertion.impl.AdviceTypeImpl.class), 20, ___uri, ___local, ___qname, __atts));
                            return ;
                        }
                        _Advice = ((com.sun.identity.liberty.ws.common.jaxb.assertion.impl.AdviceTypeImpl) spawnChildFromEnterElement((com.sun.identity.liberty.ws.common.jaxb.assertion.impl.AdviceTypeImpl.class), 20, ___uri, ___local, ___qname, __atts));
                        return ;
                    case  25 :
                        revertToParentFromEnterElement(___uri, ___local, ___qname, __atts);
                        return ;
                    case  16 :
                        attIdx = context.getAttribute("", "NotBefore");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().enterElement(___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        attIdx = context.getAttribute("", "NotOnOrAfter");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().enterElement(___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        if (("AudienceRestrictionCondition" == ___local)&&("urn:oasis:names:tc:SAML:1.0:assertion" == ___uri)) {
                            _Conditions = ((com.sun.identity.liberty.ws.common.jaxb.assertion.impl.ConditionsTypeImpl) spawnChildFromEnterElement((com.sun.identity.liberty.ws.common.jaxb.assertion.impl.ConditionsTypeImpl.class), 17, ___uri, ___local, ___qname, __atts));
                            return ;
                        }
                        if (("DoNotCacheCondition" == ___local)&&("urn:oasis:names:tc:SAML:1.0:assertion" == ___uri)) {
                            _Conditions = ((com.sun.identity.liberty.ws.common.jaxb.assertion.impl.ConditionsTypeImpl) spawnChildFromEnterElement((com.sun.identity.liberty.ws.common.jaxb.assertion.impl.ConditionsTypeImpl.class), 17, ___uri, ___local, ___qname, __atts));
                            return ;
                        }
                        if (("Condition" == ___local)&&("urn:oasis:names:tc:SAML:1.0:assertion" == ___uri)) {
                            _Conditions = ((com.sun.identity.liberty.ws.common.jaxb.assertion.impl.ConditionsTypeImpl) spawnChildFromEnterElement((com.sun.identity.liberty.ws.common.jaxb.assertion.impl.ConditionsTypeImpl.class), 17, ___uri, ___local, ___qname, __atts));
                            return ;
                        }
                        _Conditions = ((com.sun.identity.liberty.ws.common.jaxb.assertion.impl.ConditionsTypeImpl) spawnChildFromEnterElement((com.sun.identity.liberty.ws.common.jaxb.assertion.impl.ConditionsTypeImpl.class), 17, ___uri, ___local, ___qname, __atts));
                        return ;
                    case  15 :
                        if (("Conditions" == ___local)&&("urn:oasis:names:tc:SAML:1.0:assertion" == ___uri)) {
                            _Conditions = ((com.sun.identity.liberty.ws.common.jaxb.assertion.impl.ConditionsElementImpl) spawnChildFromEnterElement((com.sun.identity.liberty.ws.common.jaxb.assertion.impl.ConditionsElementImpl.class), 18, ___uri, ___local, ___qname, __atts));
                            return ;
                        }
                        if (("Conditions" == ___local)&&("urn:oasis:names:tc:SAML:1.0:assertion" == ___uri)) {
                            context.pushAttributes(__atts, false);
                            state = 16;
                            return ;
                        }
                        state = 18;
                        continue outer;
                    case  9 :
                        attIdx = context.getAttribute("", "MajorVersion");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            state = 12;
                            eatText2(v);
                            continue outer;
                        }
                        break;
                    case  6 :
                        attIdx = context.getAttribute("", "Issuer");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            state = 9;
                            eatText3(v);
                            continue outer;
                        }
                        break;
                    case  22 :
                        if (("Statement" == ___local)&&("urn:oasis:names:tc:SAML:1.0:assertion" == ___uri)) {
                            _getStatementOrSubjectStatementOrAuthenticationStatement().add(((com.sun.identity.liberty.ws.common.jaxb.assertion.impl.StatementElementImpl) spawnChildFromEnterElement((com.sun.identity.liberty.ws.common.jaxb.assertion.impl.StatementElementImpl.class), 22, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("AuthenticationStatement" == ___local)&&("urn:liberty:iff:2003-08" == ___uri)) {
                            _getStatementOrSubjectStatementOrAuthenticationStatement().add(((com.sun.identity.liberty.ws.common.jaxb.ps.impl.AuthenticationStatementElementImpl) spawnChildFromEnterElement((com.sun.identity.liberty.ws.common.jaxb.ps.impl.AuthenticationStatementElementImpl.class), 22, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("ResourceAccessStatement" == ___local)&&("urn:liberty:sec:2003-08" == ___uri)) {
                            _getStatementOrSubjectStatementOrAuthenticationStatement().add(((com.sun.identity.liberty.ws.common.jaxb.security.impl.ResourceAccessStatementElementImpl) spawnChildFromEnterElement((com.sun.identity.liberty.ws.common.jaxb.security.impl.ResourceAccessStatementElementImpl.class), 22, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("SubjectStatement" == ___local)&&("urn:oasis:names:tc:SAML:1.0:assertion" == ___uri)) {
                            _getStatementOrSubjectStatementOrAuthenticationStatement().add(((com.sun.identity.liberty.ws.common.jaxb.assertion.impl.SubjectStatementElementImpl) spawnChildFromEnterElement((com.sun.identity.liberty.ws.common.jaxb.assertion.impl.SubjectStatementElementImpl.class), 22, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("SessionContextStatement" == ___local)&&("urn:liberty:sec:2003-08" == ___uri)) {
                            _getStatementOrSubjectStatementOrAuthenticationStatement().add(((com.sun.identity.liberty.ws.common.jaxb.security.impl.SessionContextStatementElementImpl) spawnChildFromEnterElement((com.sun.identity.liberty.ws.common.jaxb.security.impl.SessionContextStatementElementImpl.class), 22, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("AuthenticationStatement" == ___local)&&("urn:oasis:names:tc:SAML:1.0:assertion" == ___uri)) {
                            _getStatementOrSubjectStatementOrAuthenticationStatement().add(((com.sun.identity.liberty.ws.common.jaxb.assertion.impl.AuthenticationStatementElementImpl) spawnChildFromEnterElement((com.sun.identity.liberty.ws.common.jaxb.assertion.impl.AuthenticationStatementElementImpl.class), 22, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("AuthorizationDecisionStatement" == ___local)&&("urn:oasis:names:tc:SAML:1.0:assertion" == ___uri)) {
                            _getStatementOrSubjectStatementOrAuthenticationStatement().add(((com.sun.identity.liberty.ws.common.jaxb.assertion.impl.AuthorizationDecisionStatementElementImpl) spawnChildFromEnterElement((com.sun.identity.liberty.ws.common.jaxb.assertion.impl.AuthorizationDecisionStatementElementImpl.class), 22, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("AttributeStatement" == ___local)&&("urn:oasis:names:tc:SAML:1.0:assertion" == ___uri)) {
                            _getStatementOrSubjectStatementOrAuthenticationStatement().add(((com.sun.identity.liberty.ws.common.jaxb.assertion.impl.AttributeStatementElementImpl) spawnChildFromEnterElement((com.sun.identity.liberty.ws.common.jaxb.assertion.impl.AttributeStatementElementImpl.class), 22, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("Signature" == ___local)&&("http://www.w3.org/2000/09/xmldsig#" == ___uri)) {
                            _Signature = ((com.sun.identity.liberty.ws.common.jaxb.xmlsig.impl.SignatureElementImpl) spawnChildFromEnterElement((com.sun.identity.liberty.ws.common.jaxb.xmlsig.impl.SignatureElementImpl.class), 25, ___uri, ___local, ___qname, __atts));
                            return ;
                        }
                        if (("Signature" == ___local)&&("http://www.w3.org/2000/09/xmldsig#" == ___uri)) {
                            context.pushAttributes(__atts, false);
                            state = 23;
                            return ;
                        }
                        state = 25;
                        continue outer;
                    case  21 :
                        if (("Statement" == ___local)&&("urn:oasis:names:tc:SAML:1.0:assertion" == ___uri)) {
                            _getStatementOrSubjectStatementOrAuthenticationStatement().add(((com.sun.identity.liberty.ws.common.jaxb.assertion.impl.StatementElementImpl) spawnChildFromEnterElement((com.sun.identity.liberty.ws.common.jaxb.assertion.impl.StatementElementImpl.class), 22, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("AuthenticationStatement" == ___local)&&("urn:liberty:iff:2003-08" == ___uri)) {
                            _getStatementOrSubjectStatementOrAuthenticationStatement().add(((com.sun.identity.liberty.ws.common.jaxb.ps.impl.AuthenticationStatementElementImpl) spawnChildFromEnterElement((com.sun.identity.liberty.ws.common.jaxb.ps.impl.AuthenticationStatementElementImpl.class), 22, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("ResourceAccessStatement" == ___local)&&("urn:liberty:sec:2003-08" == ___uri)) {
                            _getStatementOrSubjectStatementOrAuthenticationStatement().add(((com.sun.identity.liberty.ws.common.jaxb.security.impl.ResourceAccessStatementElementImpl) spawnChildFromEnterElement((com.sun.identity.liberty.ws.common.jaxb.security.impl.ResourceAccessStatementElementImpl.class), 22, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("SubjectStatement" == ___local)&&("urn:oasis:names:tc:SAML:1.0:assertion" == ___uri)) {
                            _getStatementOrSubjectStatementOrAuthenticationStatement().add(((com.sun.identity.liberty.ws.common.jaxb.assertion.impl.SubjectStatementElementImpl) spawnChildFromEnterElement((com.sun.identity.liberty.ws.common.jaxb.assertion.impl.SubjectStatementElementImpl.class), 22, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("SessionContextStatement" == ___local)&&("urn:liberty:sec:2003-08" == ___uri)) {
                            _getStatementOrSubjectStatementOrAuthenticationStatement().add(((com.sun.identity.liberty.ws.common.jaxb.security.impl.SessionContextStatementElementImpl) spawnChildFromEnterElement((com.sun.identity.liberty.ws.common.jaxb.security.impl.SessionContextStatementElementImpl.class), 22, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("AuthenticationStatement" == ___local)&&("urn:oasis:names:tc:SAML:1.0:assertion" == ___uri)) {
                            _getStatementOrSubjectStatementOrAuthenticationStatement().add(((com.sun.identity.liberty.ws.common.jaxb.assertion.impl.AuthenticationStatementElementImpl) spawnChildFromEnterElement((com.sun.identity.liberty.ws.common.jaxb.assertion.impl.AuthenticationStatementElementImpl.class), 22, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("AuthorizationDecisionStatement" == ___local)&&("urn:oasis:names:tc:SAML:1.0:assertion" == ___uri)) {
                            _getStatementOrSubjectStatementOrAuthenticationStatement().add(((com.sun.identity.liberty.ws.common.jaxb.assertion.impl.AuthorizationDecisionStatementElementImpl) spawnChildFromEnterElement((com.sun.identity.liberty.ws.common.jaxb.assertion.impl.AuthorizationDecisionStatementElementImpl.class), 22, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("AttributeStatement" == ___local)&&("urn:oasis:names:tc:SAML:1.0:assertion" == ___uri)) {
                            _getStatementOrSubjectStatementOrAuthenticationStatement().add(((com.sun.identity.liberty.ws.common.jaxb.assertion.impl.AttributeStatementElementImpl) spawnChildFromEnterElement((com.sun.identity.liberty.ws.common.jaxb.assertion.impl.AttributeStatementElementImpl.class), 22, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        break;
                    case  3 :
                        attIdx = context.getAttribute("", "IssueInstant");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            state = 6;
                            eatText4(v);
                            continue outer;
                        }
                        break;
                    case  12 :
                        attIdx = context.getAttribute("", "MinorVersion");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            state = 15;
                            eatText5(v);
                            continue outer;
                        }
                        break;
                    case  18 :
                        if (("Advice" == ___local)&&("urn:oasis:names:tc:SAML:1.0:assertion" == ___uri)) {
                            _Advice = ((com.sun.identity.liberty.ws.common.jaxb.assertion.impl.AdviceElementImpl) spawnChildFromEnterElement((com.sun.identity.liberty.ws.common.jaxb.assertion.impl.AdviceElementImpl.class), 21, ___uri, ___local, ___qname, __atts));
                            return ;
                        }
                        if (("Advice" == ___local)&&("urn:oasis:names:tc:SAML:1.0:assertion" == ___uri)) {
                            context.pushAttributes(__atts, false);
                            state = 19;
                            return ;
                        }
                        state = 21;
                        continue outer;
                }
                super.enterElement(___uri, ___local, ___qname, __atts);
                break;
            }
        }

        private void eatText1(final java.lang.String value)
            throws org.xml.sax.SAXException
        {
            try {
                _AssertionID = context.addToIdTable(com.sun.xml.bind.WhiteSpaceProcessor.collapse(value));
            } catch (java.lang.Exception e) {
                handleParseConversionException(e);
            }
        }

        private void eatText2(final java.lang.String value)
            throws org.xml.sax.SAXException
        {
            try {
                _MajorVersion = javax.xml.bind.DatatypeConverter.parseInteger(com.sun.xml.bind.WhiteSpaceProcessor.collapse(value));
            } catch (java.lang.Exception e) {
                handleParseConversionException(e);
            }
        }

        private void eatText3(final java.lang.String value)
            throws org.xml.sax.SAXException
        {
            try {
                _Issuer = value;
            } catch (java.lang.Exception e) {
                handleParseConversionException(e);
            }
        }

        private void eatText4(final java.lang.String value)
            throws org.xml.sax.SAXException
        {
            try {
                _IssueInstant = ((java.util.Calendar) com.sun.msv.datatype.xsd.DateTimeType.theInstance.createJavaObject(com.sun.xml.bind.WhiteSpaceProcessor.collapse(value), null));
            } catch (java.lang.Exception e) {
                handleParseConversionException(e);
            }
        }

        private void eatText5(final java.lang.String value)
            throws org.xml.sax.SAXException
        {
            try {
                _MinorVersion = javax.xml.bind.DatatypeConverter.parseInteger(com.sun.xml.bind.WhiteSpaceProcessor.collapse(value));
            } catch (java.lang.Exception e) {
                handleParseConversionException(e);
            }
        }

        public void leaveElement(java.lang.String ___uri, java.lang.String ___local, java.lang.String ___qname)
            throws org.xml.sax.SAXException
        {
            int attIdx;
            outer:
            while (true) {
                switch (state) {
                    case  17 :
                        if (("Conditions" == ___local)&&("urn:oasis:names:tc:SAML:1.0:assertion" == ___uri)) {
                            context.popAttributes();
                            state = 18;
                            return ;
                        }
                        break;
                    case  0 :
                        attIdx = context.getAttribute("", "AssertionID");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            state = 3;
                            eatText1(v);
                            continue outer;
                        }
                        break;
                    case  20 :
                        if (("Advice" == ___local)&&("urn:oasis:names:tc:SAML:1.0:assertion" == ___uri)) {
                            context.popAttributes();
                            state = 21;
                            return ;
                        }
                        break;
                    case  23 :
                        attIdx = context.getAttribute("", "Id");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().leaveElement(___uri, ___local, ___qname);
                            return ;
                        }
                        break;
                    case  19 :
                        _Advice = ((com.sun.identity.liberty.ws.common.jaxb.assertion.impl.AdviceTypeImpl) spawnChildFromLeaveElement((com.sun.identity.liberty.ws.common.jaxb.assertion.impl.AdviceTypeImpl.class), 20, ___uri, ___local, ___qname));
                        return ;
                    case  25 :
                        revertToParentFromLeaveElement(___uri, ___local, ___qname);
                        return ;
                    case  16 :
                        attIdx = context.getAttribute("", "NotBefore");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().leaveElement(___uri, ___local, ___qname);
                            return ;
                        }
                        attIdx = context.getAttribute("", "NotOnOrAfter");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().leaveElement(___uri, ___local, ___qname);
                            return ;
                        }
                        _Conditions = ((com.sun.identity.liberty.ws.common.jaxb.assertion.impl.ConditionsTypeImpl) spawnChildFromLeaveElement((com.sun.identity.liberty.ws.common.jaxb.assertion.impl.ConditionsTypeImpl.class), 17, ___uri, ___local, ___qname));
                        return ;
                    case  15 :
                        state = 18;
                        continue outer;
                    case  9 :
                        attIdx = context.getAttribute("", "MajorVersion");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            state = 12;
                            eatText2(v);
                            continue outer;
                        }
                        break;
                    case  6 :
                        attIdx = context.getAttribute("", "Issuer");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            state = 9;
                            eatText3(v);
                            continue outer;
                        }
                        break;
                    case  22 :
                        state = 25;
                        continue outer;
                    case  24 :
                        if (("Signature" == ___local)&&("http://www.w3.org/2000/09/xmldsig#" == ___uri)) {
                            context.popAttributes();
                            state = 25;
                            return ;
                        }
                        break;
                    case  3 :
                        attIdx = context.getAttribute("", "IssueInstant");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            state = 6;
                            eatText4(v);
                            continue outer;
                        }
                        break;
                    case  12 :
                        attIdx = context.getAttribute("", "MinorVersion");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            state = 15;
                            eatText5(v);
                            continue outer;
                        }
                        break;
                    case  18 :
                        state = 21;
                        continue outer;
                }
                super.leaveElement(___uri, ___local, ___qname);
                break;
            }
        }

        public void enterAttribute(java.lang.String ___uri, java.lang.String ___local, java.lang.String ___qname)
            throws org.xml.sax.SAXException
        {
            int attIdx;
            outer:
            while (true) {
                switch (state) {
                    case  0 :
                        if (("AssertionID" == ___local)&&("" == ___uri)) {
                            state = 1;
                            return ;
                        }
                        break;
                    case  23 :
                        if (("Id" == ___local)&&("" == ___uri)) {
                            _Signature = ((com.sun.identity.liberty.ws.common.jaxb.xmlsig.impl.SignatureTypeImpl) spawnChildFromEnterAttribute((com.sun.identity.liberty.ws.common.jaxb.xmlsig.impl.SignatureTypeImpl.class), 24, ___uri, ___local, ___qname));
                            return ;
                        }
                        break;
                    case  19 :
                        _Advice = ((com.sun.identity.liberty.ws.common.jaxb.assertion.impl.AdviceTypeImpl) spawnChildFromEnterAttribute((com.sun.identity.liberty.ws.common.jaxb.assertion.impl.AdviceTypeImpl.class), 20, ___uri, ___local, ___qname));
                        return ;
                    case  25 :
                        revertToParentFromEnterAttribute(___uri, ___local, ___qname);
                        return ;
                    case  16 :
                        if (("NotBefore" == ___local)&&("" == ___uri)) {
                            _Conditions = ((com.sun.identity.liberty.ws.common.jaxb.assertion.impl.ConditionsTypeImpl) spawnChildFromEnterAttribute((com.sun.identity.liberty.ws.common.jaxb.assertion.impl.ConditionsTypeImpl.class), 17, ___uri, ___local, ___qname));
                            return ;
                        }
                        if (("NotOnOrAfter" == ___local)&&("" == ___uri)) {
                            _Conditions = ((com.sun.identity.liberty.ws.common.jaxb.assertion.impl.ConditionsTypeImpl) spawnChildFromEnterAttribute((com.sun.identity.liberty.ws.common.jaxb.assertion.impl.ConditionsTypeImpl.class), 17, ___uri, ___local, ___qname));
                            return ;
                        }
                        _Conditions = ((com.sun.identity.liberty.ws.common.jaxb.assertion.impl.ConditionsTypeImpl) spawnChildFromEnterAttribute((com.sun.identity.liberty.ws.common.jaxb.assertion.impl.ConditionsTypeImpl.class), 17, ___uri, ___local, ___qname));
                        return ;
                    case  15 :
                        state = 18;
                        continue outer;
                    case  9 :
                        if (("MajorVersion" == ___local)&&("" == ___uri)) {
                            state = 10;
                            return ;
                        }
                        break;
                    case  6 :
                        if (("Issuer" == ___local)&&("" == ___uri)) {
                            state = 7;
                            return ;
                        }
                        break;
                    case  22 :
                        state = 25;
                        continue outer;
                    case  3 :
                        if (("IssueInstant" == ___local)&&("" == ___uri)) {
                            state = 4;
                            return ;
                        }
                        break;
                    case  12 :
                        if (("MinorVersion" == ___local)&&("" == ___uri)) {
                            state = 13;
                            return ;
                        }
                        break;
                    case  18 :
                        state = 21;
                        continue outer;
                }
                super.enterAttribute(___uri, ___local, ___qname);
                break;
            }
        }

        public void leaveAttribute(java.lang.String ___uri, java.lang.String ___local, java.lang.String ___qname)
            throws org.xml.sax.SAXException
        {
            int attIdx;
            outer:
            while (true) {
                switch (state) {
                    case  11 :
                        if (("MajorVersion" == ___local)&&("" == ___uri)) {
                            state = 12;
                            return ;
                        }
                        break;
                    case  0 :
                        attIdx = context.getAttribute("", "AssertionID");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            state = 3;
                            eatText1(v);
                            continue outer;
                        }
                        break;
                    case  23 :
                        attIdx = context.getAttribute("", "Id");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().leaveAttribute(___uri, ___local, ___qname);
                            return ;
                        }
                        break;
                    case  19 :
                        _Advice = ((com.sun.identity.liberty.ws.common.jaxb.assertion.impl.AdviceTypeImpl) spawnChildFromLeaveAttribute((com.sun.identity.liberty.ws.common.jaxb.assertion.impl.AdviceTypeImpl.class), 20, ___uri, ___local, ___qname));
                        return ;
                    case  25 :
                        revertToParentFromLeaveAttribute(___uri, ___local, ___qname);
                        return ;
                    case  16 :
                        attIdx = context.getAttribute("", "NotBefore");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().leaveAttribute(___uri, ___local, ___qname);
                            return ;
                        }
                        attIdx = context.getAttribute("", "NotOnOrAfter");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().leaveAttribute(___uri, ___local, ___qname);
                            return ;
                        }
                        _Conditions = ((com.sun.identity.liberty.ws.common.jaxb.assertion.impl.ConditionsTypeImpl) spawnChildFromLeaveAttribute((com.sun.identity.liberty.ws.common.jaxb.assertion.impl.ConditionsTypeImpl.class), 17, ___uri, ___local, ___qname));
                        return ;
                    case  15 :
                        state = 18;
                        continue outer;
                    case  8 :
                        if (("Issuer" == ___local)&&("" == ___uri)) {
                            state = 9;
                            return ;
                        }
                        break;
                    case  5 :
                        if (("IssueInstant" == ___local)&&("" == ___uri)) {
                            state = 6;
                            return ;
                        }
                        break;
                    case  9 :
                        attIdx = context.getAttribute("", "MajorVersion");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            state = 12;
                            eatText2(v);
                            continue outer;
                        }
                        break;
                    case  6 :
                        attIdx = context.getAttribute("", "Issuer");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            state = 9;
                            eatText3(v);
                            continue outer;
                        }
                        break;
                    case  14 :
                        if (("MinorVersion" == ___local)&&("" == ___uri)) {
                            state = 15;
                            return ;
                        }
                        break;
                    case  22 :
                        state = 25;
                        continue outer;
                    case  3 :
                        attIdx = context.getAttribute("", "IssueInstant");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            state = 6;
                            eatText4(v);
                            continue outer;
                        }
                        break;
                    case  2 :
                        if (("AssertionID" == ___local)&&("" == ___uri)) {
                            state = 3;
                            return ;
                        }
                        break;
                    case  12 :
                        attIdx = context.getAttribute("", "MinorVersion");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            state = 15;
                            eatText5(v);
                            continue outer;
                        }
                        break;
                    case  18 :
                        state = 21;
                        continue outer;
                }
                super.leaveAttribute(___uri, ___local, ___qname);
                break;
            }
        }

        public void handleText(final java.lang.String value)
            throws org.xml.sax.SAXException
        {
            int attIdx;
            outer:
            while (true) {
                try {
                    switch (state) {
                        case  4 :
                            state = 5;
                            eatText4(value);
                            return ;
                        case  0 :
                            attIdx = context.getAttribute("", "AssertionID");
                            if (attIdx >= 0) {
                                final java.lang.String v = context.eatAttribute(attIdx);
                                state = 3;
                                eatText1(v);
                                continue outer;
                            }
                            break;
                        case  23 :
                            attIdx = context.getAttribute("", "Id");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().text(value);
                                return ;
                            }
                            break;
                        case  19 :
                            _Advice = ((com.sun.identity.liberty.ws.common.jaxb.assertion.impl.AdviceTypeImpl) spawnChildFromText((com.sun.identity.liberty.ws.common.jaxb.assertion.impl.AdviceTypeImpl.class), 20, value));
                            return ;
                        case  7 :
                            state = 8;
                            eatText3(value);
                            return ;
                        case  25 :
                            revertToParentFromText(value);
                            return ;
                        case  16 :
                            attIdx = context.getAttribute("", "NotBefore");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().text(value);
                                return ;
                            }
                            attIdx = context.getAttribute("", "NotOnOrAfter");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().text(value);
                                return ;
                            }
                            _Conditions = ((com.sun.identity.liberty.ws.common.jaxb.assertion.impl.ConditionsTypeImpl) spawnChildFromText((com.sun.identity.liberty.ws.common.jaxb.assertion.impl.ConditionsTypeImpl.class), 17, value));
                            return ;
                        case  13 :
                            state = 14;
                            eatText5(value);
                            return ;
                        case  15 :
                            state = 18;
                            continue outer;
                        case  9 :
                            attIdx = context.getAttribute("", "MajorVersion");
                            if (attIdx >= 0) {
                                final java.lang.String v = context.eatAttribute(attIdx);
                                state = 12;
                                eatText2(v);
                                continue outer;
                            }
                            break;
                        case  1 :
                            state = 2;
                            eatText1(value);
                            return ;
                        case  6 :
                            attIdx = context.getAttribute("", "Issuer");
                            if (attIdx >= 0) {
                                final java.lang.String v = context.eatAttribute(attIdx);
                                state = 9;
                                eatText3(v);
                                continue outer;
                            }
                            break;
                        case  22 :
                            state = 25;
                            continue outer;
                        case  3 :
                            attIdx = context.getAttribute("", "IssueInstant");
                            if (attIdx >= 0) {
                                final java.lang.String v = context.eatAttribute(attIdx);
                                state = 6;
                                eatText4(v);
                                continue outer;
                            }
                            break;
                        case  12 :
                            attIdx = context.getAttribute("", "MinorVersion");
                            if (attIdx >= 0) {
                                final java.lang.String v = context.eatAttribute(attIdx);
                                state = 15;
                                eatText5(v);
                                continue outer;
                            }
                            break;
                        case  10 :
                            state = 11;
                            eatText2(value);
                            return ;
                        case  18 :
                            state = 21;
                            continue outer;
                    }
                } catch (java.lang.RuntimeException e) {
                    handleUnexpectedTextException(value, e);
                }
                break;
            }
        }

    }

}
