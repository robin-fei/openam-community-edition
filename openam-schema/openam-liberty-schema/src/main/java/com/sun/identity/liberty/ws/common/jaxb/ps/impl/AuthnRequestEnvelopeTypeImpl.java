//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v1.0.6-b27-fcs 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2012.06.11 at 10:33:54 AM PDT 
//


package com.sun.identity.liberty.ws.common.jaxb.ps.impl;

public class AuthnRequestEnvelopeTypeImpl
    extends com.sun.identity.liberty.ws.common.jaxb.ps.impl.RequestEnvelopeTypeImpl
    implements com.sun.identity.liberty.ws.common.jaxb.ps.AuthnRequestEnvelopeType, com.sun.xml.bind.JAXBObject, com.sun.identity.federation.jaxb.entityconfig.impl.runtime.UnmarshallableObject, com.sun.identity.federation.jaxb.entityconfig.impl.runtime.XMLSerializable, com.sun.identity.federation.jaxb.entityconfig.impl.runtime.ValidatableObject
{

    protected com.sun.identity.liberty.ws.common.jaxb.ps.AuthnRequestType _AuthnRequest;
    protected java.lang.String _ProviderName;
    protected boolean has_IsPassive;
    protected boolean _IsPassive;
    protected com.sun.identity.liberty.ws.common.jaxb.ps.IDPListType _IDPList;
    protected java.lang.String _AssertionConsumerServiceURL;
    protected java.lang.String _ProviderID;
    public final static java.lang.Class version = (com.sun.identity.liberty.ws.common.jaxb.ps.impl.JAXBVersion.class);
    private static com.sun.msv.grammar.Grammar schemaFragment;

    private final static java.lang.Class PRIMARY_INTERFACE_CLASS() {
        return (com.sun.identity.liberty.ws.common.jaxb.ps.AuthnRequestEnvelopeType.class);
    }

    public com.sun.identity.liberty.ws.common.jaxb.ps.AuthnRequestType getAuthnRequest() {
        return _AuthnRequest;
    }

    public void setAuthnRequest(com.sun.identity.liberty.ws.common.jaxb.ps.AuthnRequestType value) {
        _AuthnRequest = value;
    }

    public java.lang.String getProviderName() {
        return _ProviderName;
    }

    public void setProviderName(java.lang.String value) {
        _ProviderName = value;
    }

    public boolean isIsPassive() {
        return _IsPassive;
    }

    public void setIsPassive(boolean value) {
        _IsPassive = value;
        has_IsPassive = true;
    }

    public com.sun.identity.liberty.ws.common.jaxb.ps.IDPListType getIDPList() {
        return _IDPList;
    }

    public void setIDPList(com.sun.identity.liberty.ws.common.jaxb.ps.IDPListType value) {
        _IDPList = value;
    }

    public java.lang.String getAssertionConsumerServiceURL() {
        return _AssertionConsumerServiceURL;
    }

    public void setAssertionConsumerServiceURL(java.lang.String value) {
        _AssertionConsumerServiceURL = value;
    }

    public java.lang.String getProviderID() {
        return _ProviderID;
    }

    public void setProviderID(java.lang.String value) {
        _ProviderID = value;
    }

    public com.sun.identity.federation.jaxb.entityconfig.impl.runtime.UnmarshallingEventHandler createUnmarshaller(com.sun.identity.federation.jaxb.entityconfig.impl.runtime.UnmarshallingContext context) {
        return new com.sun.identity.liberty.ws.common.jaxb.ps.impl.AuthnRequestEnvelopeTypeImpl.Unmarshaller(context);
    }

    public void serializeBody(com.sun.identity.federation.jaxb.entityconfig.impl.runtime.XMLSerializer context)
        throws org.xml.sax.SAXException
    {
        super.serializeBody(context);
        if (_AuthnRequest instanceof javax.xml.bind.Element) {
            context.childAsBody(((com.sun.xml.bind.JAXBObject) _AuthnRequest), "AuthnRequest");
        } else {
            context.startElement("urn:liberty:iff:2003-08", "AuthnRequest");
            context.childAsURIs(((com.sun.xml.bind.JAXBObject) _AuthnRequest), "AuthnRequest");
            context.endNamespaceDecls();
            context.childAsAttributes(((com.sun.xml.bind.JAXBObject) _AuthnRequest), "AuthnRequest");
            context.endAttributes();
            context.childAsBody(((com.sun.xml.bind.JAXBObject) _AuthnRequest), "AuthnRequest");
            context.endElement();
        }
        context.startElement("urn:liberty:iff:2003-08", "ProviderID");
        context.endNamespaceDecls();
        context.endAttributes();
        try {
            context.text(((java.lang.String) _ProviderID), "ProviderID");
        } catch (java.lang.Exception e) {
            com.sun.identity.federation.jaxb.entityconfig.impl.runtime.Util.handlePrintConversionException(this, e, context);
        }
        context.endElement();
        if (_ProviderName!= null) {
            context.startElement("urn:liberty:iff:2003-08", "ProviderName");
            context.endNamespaceDecls();
            context.endAttributes();
            try {
                context.text(((java.lang.String) _ProviderName), "ProviderName");
            } catch (java.lang.Exception e) {
                com.sun.identity.federation.jaxb.entityconfig.impl.runtime.Util.handlePrintConversionException(this, e, context);
            }
            context.endElement();
        }
        context.startElement("urn:liberty:iff:2003-08", "AssertionConsumerServiceURL");
        context.endNamespaceDecls();
        context.endAttributes();
        try {
            context.text(((java.lang.String) _AssertionConsumerServiceURL), "AssertionConsumerServiceURL");
        } catch (java.lang.Exception e) {
            com.sun.identity.federation.jaxb.entityconfig.impl.runtime.Util.handlePrintConversionException(this, e, context);
        }
        context.endElement();
        if (_IDPList!= null) {
            if (_IDPList instanceof javax.xml.bind.Element) {
                context.childAsBody(((com.sun.xml.bind.JAXBObject) _IDPList), "IDPList");
            } else {
                context.startElement("urn:liberty:iff:2003-08", "IDPList");
                context.childAsURIs(((com.sun.xml.bind.JAXBObject) _IDPList), "IDPList");
                context.endNamespaceDecls();
                context.childAsAttributes(((com.sun.xml.bind.JAXBObject) _IDPList), "IDPList");
                context.endAttributes();
                context.childAsBody(((com.sun.xml.bind.JAXBObject) _IDPList), "IDPList");
                context.endElement();
            }
        }
        if (has_IsPassive) {
            context.startElement("urn:liberty:iff:2003-08", "IsPassive");
            context.endNamespaceDecls();
            context.endAttributes();
            try {
                context.text(javax.xml.bind.DatatypeConverter.printBoolean(((boolean) _IsPassive)), "IsPassive");
            } catch (java.lang.Exception e) {
                com.sun.identity.federation.jaxb.entityconfig.impl.runtime.Util.handlePrintConversionException(this, e, context);
            }
            context.endElement();
        }
    }

    public void serializeAttributes(com.sun.identity.federation.jaxb.entityconfig.impl.runtime.XMLSerializer context)
        throws org.xml.sax.SAXException
    {
        super.serializeAttributes(context);
        if (_AuthnRequest instanceof javax.xml.bind.Element) {
            context.childAsAttributes(((com.sun.xml.bind.JAXBObject) _AuthnRequest), "AuthnRequest");
        }
        if (_IDPList!= null) {
            if (_IDPList instanceof javax.xml.bind.Element) {
                context.childAsAttributes(((com.sun.xml.bind.JAXBObject) _IDPList), "IDPList");
            }
        }
    }

    public void serializeURIs(com.sun.identity.federation.jaxb.entityconfig.impl.runtime.XMLSerializer context)
        throws org.xml.sax.SAXException
    {
        super.serializeURIs(context);
        if (_AuthnRequest instanceof javax.xml.bind.Element) {
            context.childAsURIs(((com.sun.xml.bind.JAXBObject) _AuthnRequest), "AuthnRequest");
        }
        if (_IDPList!= null) {
            if (_IDPList instanceof javax.xml.bind.Element) {
                context.childAsURIs(((com.sun.xml.bind.JAXBObject) _IDPList), "IDPList");
            }
        }
    }

    public java.lang.Class getPrimaryInterface() {
        return (com.sun.identity.liberty.ws.common.jaxb.ps.AuthnRequestEnvelopeType.class);
    }

    public com.sun.msv.verifier.DocumentDeclaration createRawValidator() {
        if (schemaFragment == null) {
            schemaFragment = com.sun.xml.bind.validator.SchemaDeserializer.deserialize((
 "\u00ac\u00ed\u0000\u0005sr\u0000\u001fcom.sun.msv.grammar.SequenceExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000\u001dcom.su"
+"n.msv.grammar.BinaryExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002L\u0000\u0004exp1t\u0000 Lcom/sun/msv/gra"
+"mmar/Expression;L\u0000\u0004exp2q\u0000~\u0000\u0002xr\u0000\u001ecom.sun.msv.grammar.Expressi"
+"on\u00f8\u0018\u0082\u00e8N5~O\u0002\u0000\u0002L\u0000\u0013epsilonReducibilityt\u0000\u0013Ljava/lang/Boolean;L\u0000\u000b"
+"expandedExpq\u0000~\u0000\u0002xpppsq\u0000~\u0000\u0000ppsq\u0000~\u0000\u0000ppsq\u0000~\u0000\u0000ppsq\u0000~\u0000\u0000ppsq\u0000~\u0000\u0000pp"
+"sr\u0000\u001dcom.sun.msv.grammar.ChoiceExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u0001ppsr\u0000 com."
+"sun.msv.grammar.OneOrMoreExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000\u001ccom.sun.msv.gramm"
+"ar.UnaryExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001L\u0000\u0003expq\u0000~\u0000\u0002xq\u0000~\u0000\u0003sr\u0000\u0011java.lang.Boolean"
+"\u00cd r\u0080\u00d5\u009c\u00fa\u00ee\u0002\u0000\u0001Z\u0000\u0005valuexp\u0000psq\u0000~\u0000\u000bq\u0000~\u0000\u0011psr\u0000\'com.sun.msv.grammar.t"
+"rex.ElementPattern\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001L\u0000\tnameClasst\u0000\u001fLcom/sun/msv/gra"
+"mmar/NameClass;xr\u0000\u001ecom.sun.msv.grammar.ElementExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002"
+"Z\u0000\u001aignoreUndeclaredAttributesL\u0000\fcontentModelq\u0000~\u0000\u0002xq\u0000~\u0000\u0003q\u0000~\u0000\u0011"
+"p\u0000sq\u0000~\u0000\u000bppsq\u0000~\u0000\rq\u0000~\u0000\u0011psr\u0000 com.sun.msv.grammar.AttributeExp\u0000\u0000"
+"\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002L\u0000\u0003expq\u0000~\u0000\u0002L\u0000\tnameClassq\u0000~\u0000\u0014xq\u0000~\u0000\u0003q\u0000~\u0000\u0011psr\u00002com.sun"
+".msv.grammar.Expression$AnyStringExpression\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u0003"
+"sq\u0000~\u0000\u0010\u0001q\u0000~\u0000\u001csr\u0000 com.sun.msv.grammar.AnyNameClass\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000x"
+"r\u0000\u001dcom.sun.msv.grammar.NameClass\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xpsr\u00000com.sun.msv"
+".grammar.Expression$EpsilonExpression\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u0003q\u0000~\u0000\u001dq"
+"\u0000~\u0000\"sr\u0000#com.sun.msv.grammar.SimpleNameClass\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002L\u0000\tloc"
+"alNamet\u0000\u0012Ljava/lang/String;L\u0000\fnamespaceURIq\u0000~\u0000$xq\u0000~\u0000\u001ft\u0000;com."
+"sun.identity.liberty.ws.common.jaxb.ps.ExtensionElementt\u0000+ht"
+"tp://java.sun.com/jaxb/xjc/dummy-elementssq\u0000~\u0000\u0013q\u0000~\u0000\u0011p\u0000sq\u0000~\u0000\u0000"
+"ppsq\u0000~\u0000\u0013pp\u0000sq\u0000~\u0000\u000bppsq\u0000~\u0000\rq\u0000~\u0000\u0011psq\u0000~\u0000\u0019q\u0000~\u0000\u0011pq\u0000~\u0000\u001cq\u0000~\u0000 q\u0000~\u0000\"sq"
+"\u0000~\u0000#t\u00008com.sun.identity.liberty.ws.common.jaxb.ps.ExtensionT"
+"ypeq\u0000~\u0000\'sq\u0000~\u0000\u000bppsq\u0000~\u0000\u0019q\u0000~\u0000\u0011psr\u0000\u001bcom.sun.msv.grammar.DataExp\u0000"
+"\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0003L\u0000\u0002dtt\u0000\u001fLorg/relaxng/datatype/Datatype;L\u0000\u0006exceptq\u0000"
+"~\u0000\u0002L\u0000\u0004namet\u0000\u001dLcom/sun/msv/util/StringPair;xq\u0000~\u0000\u0003q\u0000~\u0000\u0011psr\u0000\"co"
+"m.sun.msv.datatype.xsd.QnameType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000*com.sun.msv.d"
+"atatype.xsd.BuiltinAtomicType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000%com.sun.msv.data"
+"type.xsd.ConcreteType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000\'com.sun.msv.datatype.xsd"
+".XSDatatypeImpl\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0003L\u0000\fnamespaceUriq\u0000~\u0000$L\u0000\btypeNameq\u0000~"
+"\u0000$L\u0000\nwhiteSpacet\u0000.Lcom/sun/msv/datatype/xsd/WhiteSpaceProces"
+"sor;xpt\u0000 http://www.w3.org/2001/XMLSchemat\u0000\u0005QNamesr\u00005com.sun"
+".msv.datatype.xsd.WhiteSpaceProcessor$Collapse\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000"
+",com.sun.msv.datatype.xsd.WhiteSpaceProcessor\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xpsr"
+"\u00000com.sun.msv.grammar.Expression$NullSetExpression\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000"
+"\u0000xq\u0000~\u0000\u0003q\u0000~\u0000\u0011psr\u0000\u001bcom.sun.msv.util.StringPair\u00d0t\u001ejB\u008f\u008d\u00a0\u0002\u0000\u0002L\u0000\tlo"
+"calNameq\u0000~\u0000$L\u0000\fnamespaceURIq\u0000~\u0000$xpq\u0000~\u0000=q\u0000~\u0000<sq\u0000~\u0000#t\u0000\u0004typet\u0000)"
+"http://www.w3.org/2001/XMLSchema-instanceq\u0000~\u0000\"sq\u0000~\u0000#t\u0000\tExten"
+"siont\u0000\u0017urn:liberty:iff:2003-08q\u0000~\u0000\"sq\u0000~\u0000\u000bppsq\u0000~\u0000\u0013pp\u0000sq\u0000~\u0000\u000bpp"
+"sq\u0000~\u0000\rq\u0000~\u0000\u0011psq\u0000~\u0000\u0019q\u0000~\u0000\u0011pq\u0000~\u0000\u001cq\u0000~\u0000 q\u0000~\u0000\"sq\u0000~\u0000#t\u0000>com.sun.iden"
+"tity.liberty.ws.common.jaxb.ps.AuthnRequestElementq\u0000~\u0000\'sq\u0000~\u0000"
+"\u0013pp\u0000sq\u0000~\u0000\u0000ppsq\u0000~\u0000\u0013pp\u0000sq\u0000~\u0000\u000bppsq\u0000~\u0000\rq\u0000~\u0000\u0011psq\u0000~\u0000\u0019q\u0000~\u0000\u0011pq\u0000~\u0000\u001cq\u0000"
+"~\u0000 q\u0000~\u0000\"sq\u0000~\u0000#t\u0000;com.sun.identity.liberty.ws.common.jaxb.ps."
+"AuthnRequestTypeq\u0000~\u0000\'sq\u0000~\u0000\u000bppsq\u0000~\u0000\u0019q\u0000~\u0000\u0011pq\u0000~\u00005q\u0000~\u0000Eq\u0000~\u0000\"sq\u0000~"
+"\u0000#t\u0000\fAuthnRequestq\u0000~\u0000Jsq\u0000~\u0000\u0013pp\u0000sq\u0000~\u0000\u0000ppsq\u0000~\u00002ppsr\u0000\'com.sun.m"
+"sv.datatype.xsd.MaxLengthFacet\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001I\u0000\tmaxLengthxr\u00009com"
+".sun.msv.datatype.xsd.DataTypeWithValueConstraintFacet\"\u00a7Ro\u00ca\u00c7"
+"\u008aT\u0002\u0000\u0000xr\u0000*com.sun.msv.datatype.xsd.DataTypeWithFacet\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002"
+"\u0000\u0005Z\u0000\fisFacetFixedZ\u0000\u0012needValueCheckFlagL\u0000\bbaseTypet\u0000)Lcom/sun"
+"/msv/datatype/xsd/XSDatatypeImpl;L\u0000\fconcreteTypet\u0000\'Lcom/sun/"
+"msv/datatype/xsd/ConcreteType;L\u0000\tfacetNameq\u0000~\u0000$xq\u0000~\u00009t\u0000\u001curn:"
+"liberty:metadata:2003-08t\u0000\fentityIDTypeq\u0000~\u0000@\u0000\u0000sr\u0000#com.sun.ms"
+"v.datatype.xsd.AnyURIType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u00007q\u0000~\u0000<t\u0000\u0006anyURIq\u0000~\u0000"
+"@q\u0000~\u0000jt\u0000\tmaxLength\u0000\u0000\u0004\u0000q\u0000~\u0000Bsq\u0000~\u0000Cq\u0000~\u0000hq\u0000~\u0000gsq\u0000~\u0000\u000bppsq\u0000~\u0000\u0019q\u0000~"
+"\u0000\u0011pq\u0000~\u00005q\u0000~\u0000Eq\u0000~\u0000\"sq\u0000~\u0000#t\u0000\nProviderIDq\u0000~\u0000Jsq\u0000~\u0000\u000bppsq\u0000~\u0000\u0013q\u0000~\u0000"
+"\u0011p\u0000sq\u0000~\u0000\u0000ppsq\u0000~\u00002q\u0000~\u0000\u0011psr\u0000#com.sun.msv.datatype.xsd.StringTy"
+"pe\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001Z\u0000\risAlwaysValidxq\u0000~\u00007q\u0000~\u0000<t\u0000\u0006stringsr\u00005com.sun"
+".msv.datatype.xsd.WhiteSpaceProcessor$Preserve\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000"
+"~\u0000?\u0001q\u0000~\u0000Bsq\u0000~\u0000Cq\u0000~\u0000xq\u0000~\u0000<sq\u0000~\u0000\u000bppsq\u0000~\u0000\u0019q\u0000~\u0000\u0011pq\u0000~\u00005q\u0000~\u0000Eq\u0000~\u0000\""
+"sq\u0000~\u0000#t\u0000\fProviderNameq\u0000~\u0000Jq\u0000~\u0000\"sq\u0000~\u0000\u0013pp\u0000sq\u0000~\u0000\u0000ppsq\u0000~\u00002q\u0000~\u0000\u0011p"
+"q\u0000~\u0000jq\u0000~\u0000Bsq\u0000~\u0000Cq\u0000~\u0000kq\u0000~\u0000<sq\u0000~\u0000\u000bppsq\u0000~\u0000\u0019q\u0000~\u0000\u0011pq\u0000~\u00005q\u0000~\u0000Eq\u0000~\u0000"
+"\"sq\u0000~\u0000#t\u0000\u001bAssertionConsumerServiceURLq\u0000~\u0000Jsq\u0000~\u0000\u000bppsq\u0000~\u0000\u000bq\u0000~\u0000"
+"\u0011psq\u0000~\u0000\u0013q\u0000~\u0000\u0011p\u0000sq\u0000~\u0000\u000bppsq\u0000~\u0000\rq\u0000~\u0000\u0011psq\u0000~\u0000\u0019q\u0000~\u0000\u0011pq\u0000~\u0000\u001cq\u0000~\u0000 q\u0000~"
+"\u0000\"sq\u0000~\u0000#t\u00009com.sun.identity.liberty.ws.common.jaxb.ps.IDPLis"
+"tElementq\u0000~\u0000\'sq\u0000~\u0000\u0013q\u0000~\u0000\u0011p\u0000sq\u0000~\u0000\u0000ppsq\u0000~\u0000\u0013pp\u0000sq\u0000~\u0000\u000bppsq\u0000~\u0000\rq\u0000~"
+"\u0000\u0011psq\u0000~\u0000\u0019q\u0000~\u0000\u0011pq\u0000~\u0000\u001cq\u0000~\u0000 q\u0000~\u0000\"sq\u0000~\u0000#t\u00006com.sun.identity.libe"
+"rty.ws.common.jaxb.ps.IDPListTypeq\u0000~\u0000\'sq\u0000~\u0000\u000bppsq\u0000~\u0000\u0019q\u0000~\u0000\u0011pq\u0000"
+"~\u00005q\u0000~\u0000Eq\u0000~\u0000\"sq\u0000~\u0000#t\u0000\u0007IDPListq\u0000~\u0000Jq\u0000~\u0000\"sq\u0000~\u0000\u000bppsq\u0000~\u0000\u0013q\u0000~\u0000\u0011p\u0000"
+"sq\u0000~\u0000\u0000ppsq\u0000~\u00002ppsr\u0000$com.sun.msv.datatype.xsd.BooleanType\u0000\u0000\u0000\u0000"
+"\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u00007q\u0000~\u0000<t\u0000\u0007booleanq\u0000~\u0000@q\u0000~\u0000Bsq\u0000~\u0000Cq\u0000~\u0000\u00a2q\u0000~\u0000<sq\u0000~\u0000\u000b"
+"ppsq\u0000~\u0000\u0019q\u0000~\u0000\u0011pq\u0000~\u00005q\u0000~\u0000Eq\u0000~\u0000\"sq\u0000~\u0000#t\u0000\tIsPassiveq\u0000~\u0000Jq\u0000~\u0000\"sr\u0000"
+"\"com.sun.msv.grammar.ExpressionPool\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001L\u0000\bexpTablet\u0000/"
+"Lcom/sun/msv/grammar/ExpressionPool$ClosedHash;xpsr\u0000-com.sun"
+".msv.grammar.ExpressionPool$ClosedHash\u00d7j\u00d0N\u00ef\u00e8\u00ed\u001c\u0003\u0000\u0003I\u0000\u0005countB\u0000\r"
+"streamVersionL\u0000\u0006parentt\u0000$Lcom/sun/msv/grammar/ExpressionPool"
+";xp\u0000\u0000\u0000(\u0001pq\u0000~\u0000Kq\u0000~\u0000\u0089q\u0000~\u0000\u009eq\u0000~\u0000\fq\u0000~\u0000\u009cq\u0000~\u0000\u000fq\u0000~\u0000\u0018q\u0000~\u0000,q\u0000~\u0000Nq\u0000~\u0000Vq"
+"\u0000~\u0000\u008cq\u0000~\u0000\u0094q\u0000~\u0000\u0005q\u0000~\u0000\u0081q\u0000~\u0000\u0017q\u0000~\u0000+q\u0000~\u0000Mq\u0000~\u0000Uq\u0000~\u0000\u0007q\u0000~\u0000\u008bq\u0000~\u0000\u0093q\u0000~\u0000_q"
+"\u0000~\u0000\bq\u0000~\u0000)q\u0000~\u0000Sq\u0000~\u0000\u0091q\u0000~\u0000tq\u0000~\u0000rq\u0000~\u0000\tq\u0000~\u0000\u0088q\u0000~\u0000\u0006q\u0000~\u0000\nq\u0000~\u00000q\u0000~\u0000Zq"
+"\u0000~\u0000nq\u0000~\u0000|q\u0000~\u0000\u0084q\u0000~\u0000\u0098q\u0000~\u0000\u00a4q\u0000~\u0000\u0012x"));
        }
        return new com.sun.msv.verifier.regexp.REDocumentDeclaration(schemaFragment);
    }

    public class Unmarshaller
        extends com.sun.identity.federation.jaxb.entityconfig.impl.runtime.AbstractUnmarshallingEventHandlerImpl
    {


        public Unmarshaller(com.sun.identity.federation.jaxb.entityconfig.impl.runtime.UnmarshallingContext context) {
            super(context, "--------------------");
        }

        protected Unmarshaller(com.sun.identity.federation.jaxb.entityconfig.impl.runtime.UnmarshallingContext context, int startState) {
            this(context);
            state = startState;
        }

        public java.lang.Object owner() {
            return com.sun.identity.liberty.ws.common.jaxb.ps.impl.AuthnRequestEnvelopeTypeImpl.this;
        }

        public void enterElement(java.lang.String ___uri, java.lang.String ___local, java.lang.String ___qname, org.xml.sax.Attributes __atts)
            throws org.xml.sax.SAXException
        {
            int attIdx;
            outer:
            while (true) {
                switch (state) {
                    case  5 :
                        if (("ProviderName" == ___local)&&("urn:liberty:iff:2003-08" == ___uri)) {
                            context.pushAttributes(__atts, true);
                            state = 6;
                            return ;
                        }
                        state = 8;
                        continue outer;
                    case  8 :
                        if (("AssertionConsumerServiceURL" == ___local)&&("urn:liberty:iff:2003-08" == ___uri)) {
                            context.pushAttributes(__atts, true);
                            state = 9;
                            return ;
                        }
                        break;
                    case  0 :
                        if (("Extension" == ___local)&&("urn:liberty:iff:2003-08" == ___uri)) {
                            spawnHandlerFromEnterElement((((com.sun.identity.liberty.ws.common.jaxb.ps.impl.RequestEnvelopeTypeImpl)com.sun.identity.liberty.ws.common.jaxb.ps.impl.AuthnRequestEnvelopeTypeImpl.this).new Unmarshaller(context)), 1, ___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        if (("Extension" == ___local)&&("urn:liberty:iff:2003-08" == ___uri)) {
                            spawnHandlerFromEnterElement((((com.sun.identity.liberty.ws.common.jaxb.ps.impl.RequestEnvelopeTypeImpl)com.sun.identity.liberty.ws.common.jaxb.ps.impl.AuthnRequestEnvelopeTypeImpl.this).new Unmarshaller(context)), 1, ___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        spawnHandlerFromEnterElement((((com.sun.identity.liberty.ws.common.jaxb.ps.impl.RequestEnvelopeTypeImpl)com.sun.identity.liberty.ws.common.jaxb.ps.impl.AuthnRequestEnvelopeTypeImpl.this).new Unmarshaller(context)), 1, ___uri, ___local, ___qname, __atts);
                        return ;
                    case  11 :
                        if (("IDPList" == ___local)&&("urn:liberty:iff:2003-08" == ___uri)) {
                            _IDPList = ((com.sun.identity.liberty.ws.common.jaxb.ps.impl.IDPListElementImpl) spawnChildFromEnterElement((com.sun.identity.liberty.ws.common.jaxb.ps.impl.IDPListElementImpl.class), 12, ___uri, ___local, ___qname, __atts));
                            return ;
                        }
                        if (("IDPList" == ___local)&&("urn:liberty:iff:2003-08" == ___uri)) {
                            context.pushAttributes(__atts, false);
                            state = 16;
                            return ;
                        }
                        state = 12;
                        continue outer;
                    case  16 :
                        if (("IDPEntries" == ___local)&&("urn:liberty:iff:2003-08" == ___uri)) {
                            _IDPList = ((com.sun.identity.liberty.ws.common.jaxb.ps.impl.IDPListTypeImpl) spawnChildFromEnterElement((com.sun.identity.liberty.ws.common.jaxb.ps.impl.IDPListTypeImpl.class), 17, ___uri, ___local, ___qname, __atts));
                            return ;
                        }
                        if (("IDPEntries" == ___local)&&("urn:liberty:iff:2003-08" == ___uri)) {
                            _IDPList = ((com.sun.identity.liberty.ws.common.jaxb.ps.impl.IDPListTypeImpl) spawnChildFromEnterElement((com.sun.identity.liberty.ws.common.jaxb.ps.impl.IDPListTypeImpl.class), 17, ___uri, ___local, ___qname, __atts));
                            return ;
                        }
                        break;
                    case  18 :
                        attIdx = context.getAttribute("urn:liberty:iff:2003-08", "consent");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().enterElement(___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        attIdx = context.getAttribute("", "IssueInstant");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().enterElement(___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        break;
                    case  15 :
                        revertToParentFromEnterElement(___uri, ___local, ___qname, __atts);
                        return ;
                    case  2 :
                        if (("ProviderID" == ___local)&&("urn:liberty:iff:2003-08" == ___uri)) {
                            context.pushAttributes(__atts, true);
                            state = 3;
                            return ;
                        }
                        break;
                    case  1 :
                        if (("AuthnRequest" == ___local)&&("urn:liberty:iff:2003-08" == ___uri)) {
                            _AuthnRequest = ((com.sun.identity.liberty.ws.common.jaxb.ps.impl.AuthnRequestElementImpl) spawnChildFromEnterElement((com.sun.identity.liberty.ws.common.jaxb.ps.impl.AuthnRequestElementImpl.class), 2, ___uri, ___local, ___qname, __atts));
                            return ;
                        }
                        if (("AuthnRequest" == ___local)&&("urn:liberty:iff:2003-08" == ___uri)) {
                            context.pushAttributes(__atts, false);
                            state = 18;
                            return ;
                        }
                        break;
                    case  12 :
                        if (("IsPassive" == ___local)&&("urn:liberty:iff:2003-08" == ___uri)) {
                            context.pushAttributes(__atts, true);
                            state = 13;
                            return ;
                        }
                        state = 15;
                        continue outer;
                }
                super.enterElement(___uri, ___local, ___qname, __atts);
                break;
            }
        }

        public void leaveElement(java.lang.String ___uri, java.lang.String ___local, java.lang.String ___qname)
            throws org.xml.sax.SAXException
        {
            int attIdx;
            outer:
            while (true) {
                switch (state) {
                    case  5 :
                        state = 8;
                        continue outer;
                    case  4 :
                        if (("ProviderID" == ___local)&&("urn:liberty:iff:2003-08" == ___uri)) {
                            context.popAttributes();
                            state = 5;
                            return ;
                        }
                        break;
                    case  10 :
                        if (("AssertionConsumerServiceURL" == ___local)&&("urn:liberty:iff:2003-08" == ___uri)) {
                            context.popAttributes();
                            state = 11;
                            return ;
                        }
                        break;
                    case  0 :
                        spawnHandlerFromLeaveElement((((com.sun.identity.liberty.ws.common.jaxb.ps.impl.RequestEnvelopeTypeImpl)com.sun.identity.liberty.ws.common.jaxb.ps.impl.AuthnRequestEnvelopeTypeImpl.this).new Unmarshaller(context)), 1, ___uri, ___local, ___qname);
                        return ;
                    case  11 :
                        state = 12;
                        continue outer;
                    case  18 :
                        attIdx = context.getAttribute("urn:liberty:iff:2003-08", "consent");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().leaveElement(___uri, ___local, ___qname);
                            return ;
                        }
                        attIdx = context.getAttribute("", "IssueInstant");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().leaveElement(___uri, ___local, ___qname);
                            return ;
                        }
                        break;
                    case  7 :
                        if (("ProviderName" == ___local)&&("urn:liberty:iff:2003-08" == ___uri)) {
                            context.popAttributes();
                            state = 8;
                            return ;
                        }
                        break;
                    case  15 :
                        revertToParentFromLeaveElement(___uri, ___local, ___qname);
                        return ;
                    case  17 :
                        if (("IDPList" == ___local)&&("urn:liberty:iff:2003-08" == ___uri)) {
                            context.popAttributes();
                            state = 12;
                            return ;
                        }
                        break;
                    case  19 :
                        if (("AuthnRequest" == ___local)&&("urn:liberty:iff:2003-08" == ___uri)) {
                            context.popAttributes();
                            state = 2;
                            return ;
                        }
                        break;
                    case  14 :
                        if (("IsPassive" == ___local)&&("urn:liberty:iff:2003-08" == ___uri)) {
                            context.popAttributes();
                            state = 15;
                            return ;
                        }
                        break;
                    case  12 :
                        state = 15;
                        continue outer;
                }
                super.leaveElement(___uri, ___local, ___qname);
                break;
            }
        }

        public void enterAttribute(java.lang.String ___uri, java.lang.String ___local, java.lang.String ___qname)
            throws org.xml.sax.SAXException
        {
            int attIdx;
            outer:
            while (true) {
                switch (state) {
                    case  5 :
                        state = 8;
                        continue outer;
                    case  0 :
                        spawnHandlerFromEnterAttribute((((com.sun.identity.liberty.ws.common.jaxb.ps.impl.RequestEnvelopeTypeImpl)com.sun.identity.liberty.ws.common.jaxb.ps.impl.AuthnRequestEnvelopeTypeImpl.this).new Unmarshaller(context)), 1, ___uri, ___local, ___qname);
                        return ;
                    case  11 :
                        state = 12;
                        continue outer;
                    case  18 :
                        if (("consent" == ___local)&&("urn:liberty:iff:2003-08" == ___uri)) {
                            _AuthnRequest = ((com.sun.identity.liberty.ws.common.jaxb.ps.impl.AuthnRequestTypeImpl) spawnChildFromEnterAttribute((com.sun.identity.liberty.ws.common.jaxb.ps.impl.AuthnRequestTypeImpl.class), 19, ___uri, ___local, ___qname));
                            return ;
                        }
                        if (("IssueInstant" == ___local)&&("" == ___uri)) {
                            _AuthnRequest = ((com.sun.identity.liberty.ws.common.jaxb.ps.impl.AuthnRequestTypeImpl) spawnChildFromEnterAttribute((com.sun.identity.liberty.ws.common.jaxb.ps.impl.AuthnRequestTypeImpl.class), 19, ___uri, ___local, ___qname));
                            return ;
                        }
                        break;
                    case  15 :
                        revertToParentFromEnterAttribute(___uri, ___local, ___qname);
                        return ;
                    case  12 :
                        state = 15;
                        continue outer;
                }
                super.enterAttribute(___uri, ___local, ___qname);
                break;
            }
        }

        public void leaveAttribute(java.lang.String ___uri, java.lang.String ___local, java.lang.String ___qname)
            throws org.xml.sax.SAXException
        {
            int attIdx;
            outer:
            while (true) {
                switch (state) {
                    case  5 :
                        state = 8;
                        continue outer;
                    case  0 :
                        spawnHandlerFromLeaveAttribute((((com.sun.identity.liberty.ws.common.jaxb.ps.impl.RequestEnvelopeTypeImpl)com.sun.identity.liberty.ws.common.jaxb.ps.impl.AuthnRequestEnvelopeTypeImpl.this).new Unmarshaller(context)), 1, ___uri, ___local, ___qname);
                        return ;
                    case  11 :
                        state = 12;
                        continue outer;
                    case  18 :
                        attIdx = context.getAttribute("urn:liberty:iff:2003-08", "consent");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().leaveAttribute(___uri, ___local, ___qname);
                            return ;
                        }
                        attIdx = context.getAttribute("", "IssueInstant");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().leaveAttribute(___uri, ___local, ___qname);
                            return ;
                        }
                        break;
                    case  15 :
                        revertToParentFromLeaveAttribute(___uri, ___local, ___qname);
                        return ;
                    case  12 :
                        state = 15;
                        continue outer;
                }
                super.leaveAttribute(___uri, ___local, ___qname);
                break;
            }
        }

        public void handleText(final java.lang.String value)
            throws org.xml.sax.SAXException
        {
            int attIdx;
            outer:
            while (true) {
                try {
                    switch (state) {
                        case  5 :
                            state = 8;
                            continue outer;
                        case  0 :
                            spawnHandlerFromText((((com.sun.identity.liberty.ws.common.jaxb.ps.impl.RequestEnvelopeTypeImpl)com.sun.identity.liberty.ws.common.jaxb.ps.impl.AuthnRequestEnvelopeTypeImpl.this).new Unmarshaller(context)), 1, value);
                            return ;
                        case  11 :
                            state = 12;
                            continue outer;
                        case  9 :
                            state = 10;
                            eatText1(value);
                            return ;
                        case  18 :
                            attIdx = context.getAttribute("urn:liberty:iff:2003-08", "consent");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().text(value);
                                return ;
                            }
                            attIdx = context.getAttribute("", "IssueInstant");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().text(value);
                                return ;
                            }
                            break;
                        case  6 :
                            state = 7;
                            eatText2(value);
                            return ;
                        case  15 :
                            revertToParentFromText(value);
                            return ;
                        case  3 :
                            state = 4;
                            eatText3(value);
                            return ;
                        case  13 :
                            state = 14;
                            eatText4(value);
                            return ;
                        case  12 :
                            state = 15;
                            continue outer;
                    }
                } catch (java.lang.RuntimeException e) {
                    handleUnexpectedTextException(value, e);
                }
                break;
            }
        }

        private void eatText1(final java.lang.String value)
            throws org.xml.sax.SAXException
        {
            try {
                _AssertionConsumerServiceURL = com.sun.xml.bind.WhiteSpaceProcessor.collapse(value);
            } catch (java.lang.Exception e) {
                handleParseConversionException(e);
            }
        }

        private void eatText2(final java.lang.String value)
            throws org.xml.sax.SAXException
        {
            try {
                _ProviderName = value;
            } catch (java.lang.Exception e) {
                handleParseConversionException(e);
            }
        }

        private void eatText3(final java.lang.String value)
            throws org.xml.sax.SAXException
        {
            try {
                _ProviderID = com.sun.xml.bind.WhiteSpaceProcessor.collapse(value);
            } catch (java.lang.Exception e) {
                handleParseConversionException(e);
            }
        }

        private void eatText4(final java.lang.String value)
            throws org.xml.sax.SAXException
        {
            try {
                _IsPassive = javax.xml.bind.DatatypeConverter.parseBoolean(com.sun.xml.bind.WhiteSpaceProcessor.collapse(value));
                has_IsPassive = true;
            } catch (java.lang.Exception e) {
                handleParseConversionException(e);
            }
        }

    }

}
