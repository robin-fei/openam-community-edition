//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v1.0.6-b27-fcs 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2012.06.11 at 10:33:54 AM PDT 
//


package com.sun.identity.liberty.ws.common.jaxb.ps.impl;

public class AuthnRequestTypeImpl
    extends com.sun.identity.liberty.ws.common.jaxb.protocol.impl.RequestAbstractTypeImpl
    implements com.sun.identity.liberty.ws.common.jaxb.ps.AuthnRequestType, com.sun.xml.bind.JAXBObject, com.sun.identity.federation.jaxb.entityconfig.impl.runtime.UnmarshallableObject, com.sun.identity.federation.jaxb.entityconfig.impl.runtime.XMLSerializable, com.sun.identity.federation.jaxb.entityconfig.impl.runtime.ValidatableObject
{

    protected boolean has_ForceAuthn;
    protected boolean _ForceAuthn;
    protected java.lang.String _AffiliationID;
    protected com.sun.xml.bind.util.ListImpl _Extension;
    protected java.lang.String _NameIDPolicy;
    protected com.sun.identity.liberty.ws.common.jaxb.ps.ScopingType _Scoping;
    protected java.lang.String _AssertionConsumerServiceID;
    protected boolean has_IsPassive;
    protected boolean _IsPassive;
    protected com.sun.identity.liberty.ws.common.jaxb.ps.RequestAuthnContextType _RequestAuthnContext;
    protected java.lang.String _ProviderID;
    protected java.lang.String _Consent;
    protected java.lang.String _RelayState;
    protected java.lang.String _ProtocolProfile;
    public final static java.lang.Class version = (com.sun.identity.liberty.ws.common.jaxb.ps.impl.JAXBVersion.class);
    private static com.sun.msv.grammar.Grammar schemaFragment;

    private final static java.lang.Class PRIMARY_INTERFACE_CLASS() {
        return (com.sun.identity.liberty.ws.common.jaxb.ps.AuthnRequestType.class);
    }

    public boolean isForceAuthn() {
        return _ForceAuthn;
    }

    public void setForceAuthn(boolean value) {
        _ForceAuthn = value;
        has_ForceAuthn = true;
    }

    public java.lang.String getAffiliationID() {
        return _AffiliationID;
    }

    public void setAffiliationID(java.lang.String value) {
        _AffiliationID = value;
    }

    protected com.sun.xml.bind.util.ListImpl _getExtension() {
        if (_Extension == null) {
            _Extension = new com.sun.xml.bind.util.ListImpl(new java.util.ArrayList());
        }
        return _Extension;
    }

    public java.util.List getExtension() {
        return _getExtension();
    }

    public java.lang.String getNameIDPolicy() {
        return _NameIDPolicy;
    }

    public void setNameIDPolicy(java.lang.String value) {
        _NameIDPolicy = value;
    }

    public com.sun.identity.liberty.ws.common.jaxb.ps.ScopingType getScoping() {
        return _Scoping;
    }

    public void setScoping(com.sun.identity.liberty.ws.common.jaxb.ps.ScopingType value) {
        _Scoping = value;
    }

    public java.lang.String getAssertionConsumerServiceID() {
        return _AssertionConsumerServiceID;
    }

    public void setAssertionConsumerServiceID(java.lang.String value) {
        _AssertionConsumerServiceID = value;
    }

    public boolean isIsPassive() {
        return _IsPassive;
    }

    public void setIsPassive(boolean value) {
        _IsPassive = value;
        has_IsPassive = true;
    }

    public com.sun.identity.liberty.ws.common.jaxb.ps.RequestAuthnContextType getRequestAuthnContext() {
        return _RequestAuthnContext;
    }

    public void setRequestAuthnContext(com.sun.identity.liberty.ws.common.jaxb.ps.RequestAuthnContextType value) {
        _RequestAuthnContext = value;
    }

    public java.lang.String getProviderID() {
        return _ProviderID;
    }

    public void setProviderID(java.lang.String value) {
        _ProviderID = value;
    }

    public java.lang.String getConsent() {
        return _Consent;
    }

    public void setConsent(java.lang.String value) {
        _Consent = value;
    }

    public java.lang.String getRelayState() {
        return _RelayState;
    }

    public void setRelayState(java.lang.String value) {
        _RelayState = value;
    }

    public java.lang.String getProtocolProfile() {
        return _ProtocolProfile;
    }

    public void setProtocolProfile(java.lang.String value) {
        _ProtocolProfile = value;
    }

    public com.sun.identity.federation.jaxb.entityconfig.impl.runtime.UnmarshallingEventHandler createUnmarshaller(com.sun.identity.federation.jaxb.entityconfig.impl.runtime.UnmarshallingContext context) {
        return new com.sun.identity.liberty.ws.common.jaxb.ps.impl.AuthnRequestTypeImpl.Unmarshaller(context);
    }

    public void serializeBody(com.sun.identity.federation.jaxb.entityconfig.impl.runtime.XMLSerializer context)
        throws org.xml.sax.SAXException
    {
        int idx3 = 0;
        final int len3 = ((_Extension == null)? 0 :_Extension.size());
        super.serializeBody(context);
        while (idx3 != len3) {
            if (_Extension.get(idx3) instanceof javax.xml.bind.Element) {
                context.childAsBody(((com.sun.xml.bind.JAXBObject) _Extension.get(idx3 ++)), "Extension");
            } else {
                context.startElement("urn:liberty:iff:2003-08", "Extension");
                int idx_0 = idx3;
                context.childAsURIs(((com.sun.xml.bind.JAXBObject) _Extension.get(idx_0 ++)), "Extension");
                context.endNamespaceDecls();
                int idx_1 = idx3;
                context.childAsAttributes(((com.sun.xml.bind.JAXBObject) _Extension.get(idx_1 ++)), "Extension");
                context.endAttributes();
                context.childAsBody(((com.sun.xml.bind.JAXBObject) _Extension.get(idx3 ++)), "Extension");
                context.endElement();
            }
        }
        context.startElement("urn:liberty:iff:2003-08", "ProviderID");
        context.endNamespaceDecls();
        context.endAttributes();
        try {
            context.text(((java.lang.String) _ProviderID), "ProviderID");
        } catch (java.lang.Exception e) {
            com.sun.identity.federation.jaxb.entityconfig.impl.runtime.Util.handlePrintConversionException(this, e, context);
        }
        context.endElement();
        if (_AffiliationID!= null) {
            context.startElement("urn:liberty:iff:2003-08", "AffiliationID");
            context.endNamespaceDecls();
            context.endAttributes();
            try {
                context.text(((java.lang.String) _AffiliationID), "AffiliationID");
            } catch (java.lang.Exception e) {
                com.sun.identity.federation.jaxb.entityconfig.impl.runtime.Util.handlePrintConversionException(this, e, context);
            }
            context.endElement();
        }
        if (_NameIDPolicy!= null) {
            context.startElement("urn:liberty:iff:2003-08", "NameIDPolicy");
            context.endNamespaceDecls();
            context.endAttributes();
            try {
                context.text(((java.lang.String) _NameIDPolicy), "NameIDPolicy");
            } catch (java.lang.Exception e) {
                com.sun.identity.federation.jaxb.entityconfig.impl.runtime.Util.handlePrintConversionException(this, e, context);
            }
            context.endElement();
        }
        if (has_ForceAuthn) {
            context.startElement("urn:liberty:iff:2003-08", "ForceAuthn");
            context.endNamespaceDecls();
            context.endAttributes();
            try {
                context.text(javax.xml.bind.DatatypeConverter.printBoolean(((boolean) _ForceAuthn)), "ForceAuthn");
            } catch (java.lang.Exception e) {
                com.sun.identity.federation.jaxb.entityconfig.impl.runtime.Util.handlePrintConversionException(this, e, context);
            }
            context.endElement();
        }
        if (has_IsPassive) {
            context.startElement("urn:liberty:iff:2003-08", "IsPassive");
            context.endNamespaceDecls();
            context.endAttributes();
            try {
                context.text(javax.xml.bind.DatatypeConverter.printBoolean(((boolean) _IsPassive)), "IsPassive");
            } catch (java.lang.Exception e) {
                com.sun.identity.federation.jaxb.entityconfig.impl.runtime.Util.handlePrintConversionException(this, e, context);
            }
            context.endElement();
        }
        if (_ProtocolProfile!= null) {
            context.startElement("urn:liberty:iff:2003-08", "ProtocolProfile");
            context.endNamespaceDecls();
            context.endAttributes();
            try {
                context.text(((java.lang.String) _ProtocolProfile), "ProtocolProfile");
            } catch (java.lang.Exception e) {
                com.sun.identity.federation.jaxb.entityconfig.impl.runtime.Util.handlePrintConversionException(this, e, context);
            }
            context.endElement();
        }
        if (_AssertionConsumerServiceID!= null) {
            context.startElement("urn:liberty:iff:2003-08", "AssertionConsumerServiceID");
            context.endNamespaceDecls();
            context.endAttributes();
            try {
                context.text(((java.lang.String) _AssertionConsumerServiceID), "AssertionConsumerServiceID");
            } catch (java.lang.Exception e) {
                com.sun.identity.federation.jaxb.entityconfig.impl.runtime.Util.handlePrintConversionException(this, e, context);
            }
            context.endElement();
        }
        if (_RequestAuthnContext!= null) {
            if (_RequestAuthnContext instanceof javax.xml.bind.Element) {
                context.childAsBody(((com.sun.xml.bind.JAXBObject) _RequestAuthnContext), "RequestAuthnContext");
            } else {
                context.startElement("urn:liberty:iff:2003-08", "RequestAuthnContext");
                context.childAsURIs(((com.sun.xml.bind.JAXBObject) _RequestAuthnContext), "RequestAuthnContext");
                context.endNamespaceDecls();
                context.childAsAttributes(((com.sun.xml.bind.JAXBObject) _RequestAuthnContext), "RequestAuthnContext");
                context.endAttributes();
                context.childAsBody(((com.sun.xml.bind.JAXBObject) _RequestAuthnContext), "RequestAuthnContext");
                context.endElement();
            }
        }
        if (_RelayState!= null) {
            context.startElement("urn:liberty:iff:2003-08", "RelayState");
            context.endNamespaceDecls();
            context.endAttributes();
            try {
                context.text(((java.lang.String) _RelayState), "RelayState");
            } catch (java.lang.Exception e) {
                com.sun.identity.federation.jaxb.entityconfig.impl.runtime.Util.handlePrintConversionException(this, e, context);
            }
            context.endElement();
        }
        if (_Scoping!= null) {
            if (_Scoping instanceof javax.xml.bind.Element) {
                context.childAsBody(((com.sun.xml.bind.JAXBObject) _Scoping), "Scoping");
            } else {
                context.startElement("urn:liberty:iff:2003-08", "Scoping");
                context.childAsURIs(((com.sun.xml.bind.JAXBObject) _Scoping), "Scoping");
                context.endNamespaceDecls();
                context.childAsAttributes(((com.sun.xml.bind.JAXBObject) _Scoping), "Scoping");
                context.endAttributes();
                context.childAsBody(((com.sun.xml.bind.JAXBObject) _Scoping), "Scoping");
                context.endElement();
            }
        }
    }

    public void serializeAttributes(com.sun.identity.federation.jaxb.entityconfig.impl.runtime.XMLSerializer context)
        throws org.xml.sax.SAXException
    {
        int idx3 = 0;
        final int len3 = ((_Extension == null)? 0 :_Extension.size());
        if (_Consent!= null) {
            context.startAttribute("urn:liberty:iff:2003-08", "consent");
            try {
                context.text(((java.lang.String) _Consent), "Consent");
            } catch (java.lang.Exception e) {
                com.sun.identity.federation.jaxb.entityconfig.impl.runtime.Util.handlePrintConversionException(this, e, context);
            }
            context.endAttribute();
        }
        super.serializeAttributes(context);
        while (idx3 != len3) {
            if (_Extension.get(idx3) instanceof javax.xml.bind.Element) {
                context.childAsAttributes(((com.sun.xml.bind.JAXBObject) _Extension.get(idx3 ++)), "Extension");
            } else {
                idx3 += 1;
            }
        }
        if (_RequestAuthnContext!= null) {
            if (_RequestAuthnContext instanceof javax.xml.bind.Element) {
                context.childAsAttributes(((com.sun.xml.bind.JAXBObject) _RequestAuthnContext), "RequestAuthnContext");
            }
        }
        if (_Scoping!= null) {
            if (_Scoping instanceof javax.xml.bind.Element) {
                context.childAsAttributes(((com.sun.xml.bind.JAXBObject) _Scoping), "Scoping");
            }
        }
    }

    public void serializeURIs(com.sun.identity.federation.jaxb.entityconfig.impl.runtime.XMLSerializer context)
        throws org.xml.sax.SAXException
    {
        int idx3 = 0;
        final int len3 = ((_Extension == null)? 0 :_Extension.size());
        if (_Consent!= null) {
            context.getNamespaceContext().declareNamespace("urn:liberty:iff:2003-08", null, true);
        }
        super.serializeURIs(context);
        while (idx3 != len3) {
            if (_Extension.get(idx3) instanceof javax.xml.bind.Element) {
                context.childAsURIs(((com.sun.xml.bind.JAXBObject) _Extension.get(idx3 ++)), "Extension");
            } else {
                idx3 += 1;
            }
        }
        if (_RequestAuthnContext!= null) {
            if (_RequestAuthnContext instanceof javax.xml.bind.Element) {
                context.childAsURIs(((com.sun.xml.bind.JAXBObject) _RequestAuthnContext), "RequestAuthnContext");
            }
        }
        if (_Scoping!= null) {
            if (_Scoping instanceof javax.xml.bind.Element) {
                context.childAsURIs(((com.sun.xml.bind.JAXBObject) _Scoping), "Scoping");
            }
        }
    }

    public java.lang.Class getPrimaryInterface() {
        return (com.sun.identity.liberty.ws.common.jaxb.ps.AuthnRequestType.class);
    }

    public com.sun.msv.verifier.DocumentDeclaration createRawValidator() {
        if (schemaFragment == null) {
            schemaFragment = com.sun.xml.bind.validator.SchemaDeserializer.deserialize((
 "\u00ac\u00ed\u0000\u0005sr\u0000\u001fcom.sun.msv.grammar.SequenceExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000\u001dcom.su"
+"n.msv.grammar.BinaryExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002L\u0000\u0004exp1t\u0000 Lcom/sun/msv/gra"
+"mmar/Expression;L\u0000\u0004exp2q\u0000~\u0000\u0002xr\u0000\u001ecom.sun.msv.grammar.Expressi"
+"on\u00f8\u0018\u0082\u00e8N5~O\u0002\u0000\u0002L\u0000\u0013epsilonReducibilityt\u0000\u0013Ljava/lang/Boolean;L\u0000\u000b"
+"expandedExpq\u0000~\u0000\u0002xpppsq\u0000~\u0000\u0000ppsq\u0000~\u0000\u0000ppsq\u0000~\u0000\u0000ppsq\u0000~\u0000\u0000ppsq\u0000~\u0000\u0000pp"
+"sq\u0000~\u0000\u0000ppsq\u0000~\u0000\u0000ppsq\u0000~\u0000\u0000ppsq\u0000~\u0000\u0000ppsq\u0000~\u0000\u0000ppsq\u0000~\u0000\u0000ppsq\u0000~\u0000\u0000ppsq\u0000~"
+"\u0000\u0000ppsq\u0000~\u0000\u0000ppsq\u0000~\u0000\u0000ppsq\u0000~\u0000\u0000ppsr\u0000\u001dcom.sun.msv.grammar.ChoiceEx"
+"p\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u0001ppsr\u0000 com.sun.msv.grammar.OneOrMoreExp\u0000\u0000\u0000\u0000"
+"\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000\u001ccom.sun.msv.grammar.UnaryExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001L\u0000\u0003expq\u0000~\u0000"
+"\u0002xq\u0000~\u0000\u0003sr\u0000\u0011java.lang.Boolean\u00cd r\u0080\u00d5\u009c\u00fa\u00ee\u0002\u0000\u0001Z\u0000\u0005valuexp\u0000psr\u0000\'com.s"
+"un.msv.grammar.trex.ElementPattern\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001L\u0000\tnameClasst\u0000\u001f"
+"Lcom/sun/msv/grammar/NameClass;xr\u0000\u001ecom.sun.msv.grammar.Eleme"
+"ntExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002Z\u0000\u001aignoreUndeclaredAttributesL\u0000\fcontentModel"
+"q\u0000~\u0000\u0002xq\u0000~\u0000\u0003q\u0000~\u0000\u001cp\u0000sq\u0000~\u0000\u0000ppsr\u0000\u001bcom.sun.msv.grammar.DataExp\u0000\u0000\u0000"
+"\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0003L\u0000\u0002dtt\u0000\u001fLorg/relaxng/datatype/Datatype;L\u0000\u0006exceptq\u0000~\u0000"
+"\u0002L\u0000\u0004namet\u0000\u001dLcom/sun/msv/util/StringPair;xq\u0000~\u0000\u0003q\u0000~\u0000\u001cpsr\u0000\"com."
+"sun.msv.datatype.xsd.QnameType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000*com.sun.msv.dat"
+"atype.xsd.BuiltinAtomicType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000%com.sun.msv.dataty"
+"pe.xsd.ConcreteType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000\'com.sun.msv.datatype.xsd.X"
+"SDatatypeImpl\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0003L\u0000\fnamespaceUrit\u0000\u0012Ljava/lang/String;"
+"L\u0000\btypeNameq\u0000~\u0000*L\u0000\nwhiteSpacet\u0000.Lcom/sun/msv/datatype/xsd/Wh"
+"iteSpaceProcessor;xpt\u0000 http://www.w3.org/2001/XMLSchemat\u0000\u0005QN"
+"amesr\u00005com.sun.msv.datatype.xsd.WhiteSpaceProcessor$Collapse"
+"\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000,com.sun.msv.datatype.xsd.WhiteSpaceProcessor\u0000"
+"\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xpsr\u00000com.sun.msv.grammar.Expression$NullSetExpres"
+"sion\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u0003q\u0000~\u0000\u001cpsr\u0000\u001bcom.sun.msv.util.StringPair\u00d0t"
+"\u001ejB\u008f\u008d\u00a0\u0002\u0000\u0002L\u0000\tlocalNameq\u0000~\u0000*L\u0000\fnamespaceURIq\u0000~\u0000*xpq\u0000~\u0000.q\u0000~\u0000-sq"
+"\u0000~\u0000\u0016ppsr\u0000 com.sun.msv.grammar.AttributeExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002L\u0000\u0003expq"
+"\u0000~\u0000\u0002L\u0000\tnameClassq\u0000~\u0000\u001exq\u0000~\u0000\u0003q\u0000~\u0000\u001cpq\u0000~\u0000%sr\u0000#com.sun.msv.gramma"
+"r.SimpleNameClass\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002L\u0000\tlocalNameq\u0000~\u0000*L\u0000\fnamespaceURI"
+"q\u0000~\u0000*xr\u0000\u001dcom.sun.msv.grammar.NameClass\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xpt\u0000\u0004typet\u0000"
+")http://www.w3.org/2001/XMLSchema-instancesr\u00000com.sun.msv.gr"
+"ammar.Expression$EpsilonExpression\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u0003sq\u0000~\u0000\u001b\u0001q\u0000"
+"~\u0000?sq\u0000~\u00009t\u0000\u000bRespondWitht\u0000$urn:oasis:names:tc:SAML:1.0:protoc"
+"olq\u0000~\u0000?sq\u0000~\u0000\u0016ppsq\u0000~\u0000\u0016q\u0000~\u0000\u001cpsq\u0000~\u0000\u001dq\u0000~\u0000\u001cp\u0000sq\u0000~\u0000\u0016ppsq\u0000~\u0000\u0018q\u0000~\u0000\u001cp"
+"sq\u0000~\u00007q\u0000~\u0000\u001cpsr\u00002com.sun.msv.grammar.Expression$AnyStringExpr"
+"ession\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u0003q\u0000~\u0000@q\u0000~\u0000Ksr\u0000 com.sun.msv.grammar.Any"
+"NameClass\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000:q\u0000~\u0000?sq\u0000~\u00009t\u0000?com.sun.identity.lib"
+"erty.ws.common.jaxb.xmlsig.SignatureElementt\u0000+http://java.su"
+"n.com/jaxb/xjc/dummy-elementssq\u0000~\u0000\u001dq\u0000~\u0000\u001cp\u0000sq\u0000~\u0000\u0000ppsq\u0000~\u0000\u001dpp\u0000s"
+"q\u0000~\u0000\u0016ppsq\u0000~\u0000\u0018q\u0000~\u0000\u001cpsq\u0000~\u00007q\u0000~\u0000\u001cpq\u0000~\u0000Kq\u0000~\u0000Mq\u0000~\u0000?sq\u0000~\u00009t\u0000<com.s"
+"un.identity.liberty.ws.common.jaxb.xmlsig.SignatureTypeq\u0000~\u0000P"
+"sq\u0000~\u0000\u0016ppsq\u0000~\u00007q\u0000~\u0000\u001cpq\u0000~\u0000%q\u0000~\u0000;q\u0000~\u0000?sq\u0000~\u00009t\u0000\tSignaturet\u0000\"http"
+"://www.w3.org/2000/09/xmldsig#q\u0000~\u0000?sq\u0000~\u0000\u0016ppsq\u0000~\u0000\u0018q\u0000~\u0000\u001cpsq\u0000~\u0000"
+"\u0016q\u0000~\u0000\u001cpsq\u0000~\u0000\u001dq\u0000~\u0000\u001cp\u0000sq\u0000~\u0000\u0016ppsq\u0000~\u0000\u0018q\u0000~\u0000\u001cpsq\u0000~\u00007q\u0000~\u0000\u001cpq\u0000~\u0000Kq\u0000~"
+"\u0000Mq\u0000~\u0000?sq\u0000~\u00009t\u0000;com.sun.identity.liberty.ws.common.jaxb.ps.E"
+"xtensionElementq\u0000~\u0000Psq\u0000~\u0000\u001dq\u0000~\u0000\u001cp\u0000sq\u0000~\u0000\u0000ppsq\u0000~\u0000\u001dpp\u0000sq\u0000~\u0000\u0016ppsq"
+"\u0000~\u0000\u0018q\u0000~\u0000\u001cpsq\u0000~\u00007q\u0000~\u0000\u001cpq\u0000~\u0000Kq\u0000~\u0000Mq\u0000~\u0000?sq\u0000~\u00009t\u00008com.sun.identi"
+"ty.liberty.ws.common.jaxb.ps.ExtensionTypeq\u0000~\u0000Psq\u0000~\u0000\u0016ppsq\u0000~\u0000"
+"7q\u0000~\u0000\u001cpq\u0000~\u0000%q\u0000~\u0000;q\u0000~\u0000?sq\u0000~\u00009t\u0000\tExtensiont\u0000\u0017urn:liberty:iff:2"
+"003-08q\u0000~\u0000?sq\u0000~\u0000\u001dpp\u0000sq\u0000~\u0000\u0000ppsq\u0000~\u0000\"ppsr\u0000\'com.sun.msv.datatype"
+".xsd.MaxLengthFacet\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001I\u0000\tmaxLengthxr\u00009com.sun.msv.da"
+"tatype.xsd.DataTypeWithValueConstraintFacet\"\u00a7Ro\u00ca\u00c7\u008aT\u0002\u0000\u0000xr\u0000*co"
+"m.sun.msv.datatype.xsd.DataTypeWithFacet\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0005Z\u0000\fisFace"
+"tFixedZ\u0000\u0012needValueCheckFlagL\u0000\bbaseTypet\u0000)Lcom/sun/msv/dataty"
+"pe/xsd/XSDatatypeImpl;L\u0000\fconcreteTypet\u0000\'Lcom/sun/msv/datatyp"
+"e/xsd/ConcreteType;L\u0000\tfacetNameq\u0000~\u0000*xq\u0000~\u0000)t\u0000\u001curn:liberty:met"
+"adata:2003-08t\u0000\fentityIDTypeq\u0000~\u00001\u0000\u0000sr\u0000#com.sun.msv.datatype."
+"xsd.AnyURIType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\'q\u0000~\u0000-t\u0000\u0006anyURIq\u0000~\u00001q\u0000~\u0000\u0080t\u0000\tma"
+"xLength\u0000\u0000\u0004\u0000q\u0000~\u00003sq\u0000~\u00004q\u0000~\u0000~q\u0000~\u0000}sq\u0000~\u0000\u0016ppsq\u0000~\u00007q\u0000~\u0000\u001cpq\u0000~\u0000%q\u0000~"
+"\u0000;q\u0000~\u0000?sq\u0000~\u00009t\u0000\nProviderIDq\u0000~\u0000ssq\u0000~\u0000\u0016ppsq\u0000~\u0000\u001dq\u0000~\u0000\u001cp\u0000sq\u0000~\u0000\u0000pp"
+"q\u0000~\u0000vsq\u0000~\u0000\u0016ppsq\u0000~\u00007q\u0000~\u0000\u001cpq\u0000~\u0000%q\u0000~\u0000;q\u0000~\u0000?sq\u0000~\u00009t\u0000\rAffiliation"
+"IDq\u0000~\u0000sq\u0000~\u0000?sq\u0000~\u0000\u0016ppsq\u0000~\u0000\u001dq\u0000~\u0000\u001cp\u0000sq\u0000~\u0000\u0000ppsq\u0000~\u0000\"ppsr\u0000)com.sun"
+".msv.datatype.xsd.EnumerationFacet\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001L\u0000\u0006valuest\u0000\u000fLja"
+"va/util/Set;xq\u0000~\u0000xq\u0000~\u0000st\u0000\u0010NameIDPolicyTypesr\u00005com.sun.msv.da"
+"tatype.xsd.WhiteSpaceProcessor$Preserve\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u00000\u0000\u0000sr"
+"\u0000#com.sun.msv.datatype.xsd.StringType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001Z\u0000\risAlwaysV"
+"alidxq\u0000~\u0000\'q\u0000~\u0000-t\u0000\u0006stringq\u0000~\u0000\u0098\u0001q\u0000~\u0000\u009at\u0000\u000benumerationsr\u0000\u0011java.ut"
+"il.HashSet\u00baD\u0085\u0095\u0096\u00b8\u00b74\u0003\u0000\u0000xpw\f\u0000\u0000\u0000\u0010?@\u0000\u0000\u0000\u0000\u0000\u0004t\u0000\u0003anyt\u0000\u0004nonet\u0000\tfederat"
+"edt\u0000\u0007onetimexq\u0000~\u00003sq\u0000~\u00004q\u0000~\u0000\u0096q\u0000~\u0000ssq\u0000~\u0000\u0016ppsq\u0000~\u00007q\u0000~\u0000\u001cpq\u0000~\u0000%q"
+"\u0000~\u0000;q\u0000~\u0000?sq\u0000~\u00009t\u0000\fNameIDPolicyq\u0000~\u0000sq\u0000~\u0000?sq\u0000~\u0000\u0016ppsq\u0000~\u0000\u001dq\u0000~\u0000\u001cp"
+"\u0000sq\u0000~\u0000\u0000ppsq\u0000~\u0000\"ppsr\u0000$com.sun.msv.datatype.xsd.BooleanType\u0000\u0000\u0000"
+"\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\'q\u0000~\u0000-t\u0000\u0007booleanq\u0000~\u00001q\u0000~\u00003sq\u0000~\u00004q\u0000~\u0000\u00aeq\u0000~\u0000-sq\u0000~\u0000"
+"\u0016ppsq\u0000~\u00007q\u0000~\u0000\u001cpq\u0000~\u0000%q\u0000~\u0000;q\u0000~\u0000?sq\u0000~\u00009t\u0000\nForceAuthnq\u0000~\u0000sq\u0000~\u0000?s"
+"q\u0000~\u0000\u0016ppsq\u0000~\u0000\u001dq\u0000~\u0000\u001cp\u0000sq\u0000~\u0000\u0000ppq\u0000~\u0000\u00absq\u0000~\u0000\u0016ppsq\u0000~\u00007q\u0000~\u0000\u001cpq\u0000~\u0000%q\u0000"
+"~\u0000;q\u0000~\u0000?sq\u0000~\u00009t\u0000\tIsPassiveq\u0000~\u0000sq\u0000~\u0000?sq\u0000~\u0000\u0016ppsq\u0000~\u0000\u001dq\u0000~\u0000\u001cp\u0000sq\u0000"
+"~\u0000\u0000ppsq\u0000~\u0000\"q\u0000~\u0000\u001cpq\u0000~\u0000\u0080q\u0000~\u00003sq\u0000~\u00004q\u0000~\u0000\u0081q\u0000~\u0000-sq\u0000~\u0000\u0016ppsq\u0000~\u00007q\u0000~"
+"\u0000\u001cpq\u0000~\u0000%q\u0000~\u0000;q\u0000~\u0000?sq\u0000~\u00009t\u0000\u000fProtocolProfileq\u0000~\u0000sq\u0000~\u0000?sq\u0000~\u0000\u0016pp"
+"sq\u0000~\u0000\u001dq\u0000~\u0000\u001cp\u0000sq\u0000~\u0000\u0000ppsq\u0000~\u0000\"q\u0000~\u0000\u001cpq\u0000~\u0000\u009aq\u0000~\u00003sq\u0000~\u00004q\u0000~\u0000\u009bq\u0000~\u0000-s"
+"q\u0000~\u0000\u0016ppsq\u0000~\u00007q\u0000~\u0000\u001cpq\u0000~\u0000%q\u0000~\u0000;q\u0000~\u0000?sq\u0000~\u00009t\u0000\u001aAssertionConsumer"
+"ServiceIDq\u0000~\u0000sq\u0000~\u0000?sq\u0000~\u0000\u0016ppsq\u0000~\u0000\u0016q\u0000~\u0000\u001cpsq\u0000~\u0000\u001dq\u0000~\u0000\u001cp\u0000sq\u0000~\u0000\u0016pp"
+"sq\u0000~\u0000\u0018q\u0000~\u0000\u001cpsq\u0000~\u00007q\u0000~\u0000\u001cpq\u0000~\u0000Kq\u0000~\u0000Mq\u0000~\u0000?sq\u0000~\u00009t\u0000Ecom.sun.iden"
+"tity.liberty.ws.common.jaxb.ps.RequestAuthnContextElementq\u0000~"
+"\u0000Psq\u0000~\u0000\u001dq\u0000~\u0000\u001cp\u0000sq\u0000~\u0000\u0000ppsq\u0000~\u0000\u001dpp\u0000sq\u0000~\u0000\u0016ppsq\u0000~\u0000\u0018q\u0000~\u0000\u001cpsq\u0000~\u00007q\u0000"
+"~\u0000\u001cpq\u0000~\u0000Kq\u0000~\u0000Mq\u0000~\u0000?sq\u0000~\u00009t\u0000Bcom.sun.identity.liberty.ws.comm"
+"on.jaxb.ps.RequestAuthnContextTypeq\u0000~\u0000Psq\u0000~\u0000\u0016ppsq\u0000~\u00007q\u0000~\u0000\u001cpq"
+"\u0000~\u0000%q\u0000~\u0000;q\u0000~\u0000?sq\u0000~\u00009t\u0000\u0013RequestAuthnContextq\u0000~\u0000sq\u0000~\u0000?sq\u0000~\u0000\u0016pp"
+"sq\u0000~\u0000\u001dq\u0000~\u0000\u001cp\u0000sq\u0000~\u0000\u0000ppq\u0000~\u0000\u00c7sq\u0000~\u0000\u0016ppsq\u0000~\u00007q\u0000~\u0000\u001cpq\u0000~\u0000%q\u0000~\u0000;q\u0000~\u0000"
+"?sq\u0000~\u00009t\u0000\nRelayStateq\u0000~\u0000sq\u0000~\u0000?sq\u0000~\u0000\u0016ppsq\u0000~\u0000\u0016q\u0000~\u0000\u001cpsq\u0000~\u0000\u001dq\u0000~\u0000"
+"\u001cp\u0000sq\u0000~\u0000\u0016ppsq\u0000~\u0000\u0018q\u0000~\u0000\u001cpsq\u0000~\u00007q\u0000~\u0000\u001cpq\u0000~\u0000Kq\u0000~\u0000Mq\u0000~\u0000?sq\u0000~\u00009t\u00009c"
+"om.sun.identity.liberty.ws.common.jaxb.ps.ScopingElementq\u0000~\u0000"
+"Psq\u0000~\u0000\u001dq\u0000~\u0000\u001cp\u0000sq\u0000~\u0000\u0000ppsq\u0000~\u0000\u001dpp\u0000sq\u0000~\u0000\u0016ppsq\u0000~\u0000\u0018q\u0000~\u0000\u001cpsq\u0000~\u00007q\u0000~"
+"\u0000\u001cpq\u0000~\u0000Kq\u0000~\u0000Mq\u0000~\u0000?sq\u0000~\u00009t\u00006com.sun.identity.liberty.ws.commo"
+"n.jaxb.ps.ScopingTypeq\u0000~\u0000Psq\u0000~\u0000\u0016ppsq\u0000~\u00007q\u0000~\u0000\u001cpq\u0000~\u0000%q\u0000~\u0000;q\u0000~\u0000"
+"?sq\u0000~\u00009t\u0000\u0007Scopingq\u0000~\u0000sq\u0000~\u0000?sq\u0000~\u00007ppsq\u0000~\u0000\"ppsr\u0000%com.sun.msv.d"
+"atatype.xsd.DateTimeType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000)com.sun.msv.datatype."
+"xsd.DateTimeBaseType\u0014W\u001a@3\u00a5\u00b4\u00e5\u0002\u0000\u0000xq\u0000~\u0000\'q\u0000~\u0000-t\u0000\bdateTimeq\u0000~\u00001q\u0000"
+"~\u00003sq\u0000~\u00004q\u0000~\u0001\u0001q\u0000~\u0000-sq\u0000~\u00009t\u0000\fIssueInstantt\u0000\u0000sq\u0000~\u00007ppsq\u0000~\u0000\"pps"
+"r\u0000$com.sun.msv.datatype.xsd.IntegerType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000+com.su"
+"n.msv.datatype.xsd.IntegerDerivedType\u0099\u00f1]\u0090&6k\u00be\u0002\u0000\u0001L\u0000\nbaseFacet"
+"sq\u0000~\u0000zxq\u0000~\u0000\'q\u0000~\u0000-t\u0000\u0007integerq\u0000~\u00001sr\u0000,com.sun.msv.datatype.xsd"
+".FractionDigitsFacet\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001I\u0000\u0005scalexr\u0000;com.sun.msv.datat"
+"ype.xsd.DataTypeWithLexicalConstraintFacetT\u0090\u001c>\u001azb\u00ea\u0002\u0000\u0000xq\u0000~\u0000yp"
+"pq\u0000~\u00001\u0001\u0000sr\u0000#com.sun.msv.datatype.xsd.NumberType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq"
+"\u0000~\u0000\'q\u0000~\u0000-t\u0000\u0007decimalq\u0000~\u00001q\u0000~\u0001\u0010t\u0000\u000efractionDigits\u0000\u0000\u0000\u0000q\u0000~\u00003sq\u0000~\u0000"
+"4q\u0000~\u0001\u000bq\u0000~\u0000-sq\u0000~\u00009t\u0000\fMajorVersionq\u0000~\u0001\u0005sq\u0000~\u00007ppq\u0000~\u0001\u0007sq\u0000~\u00009t\u0000\fM"
+"inorVersionq\u0000~\u0001\u0005sq\u0000~\u00007ppsq\u0000~\u0000\"ppsr\u0000\u001fcom.sun.msv.datatype.xsd"
+".IDType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000#com.sun.msv.datatype.xsd.NcnameType\u0000\u0000\u0000"
+"\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000\"com.sun.msv.datatype.xsd.TokenType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000"
+"~\u0000\u0099q\u0000~\u0000-t\u0000\u0002IDq\u0000~\u00001\u0000q\u0000~\u00003sq\u0000~\u00004q\u0000~\u0001\u001fq\u0000~\u0000-sq\u0000~\u00009t\u0000\tRequestIDq\u0000"
+"~\u0001\u0005sq\u0000~\u0000\u0016ppsq\u0000~\u00007q\u0000~\u0000\u001cpq\u0000~\u0000\u00besq\u0000~\u00009t\u0000\u0007consentq\u0000~\u0000sq\u0000~\u0000?sr\u0000\"co"
+"m.sun.msv.grammar.ExpressionPool\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001L\u0000\bexpTablet\u0000/Lco"
+"m/sun/msv/grammar/ExpressionPool$ClosedHash;xpsr\u0000-com.sun.ms"
+"v.grammar.ExpressionPool$ClosedHash\u00d7j\u00d0N\u00ef\u00e8\u00ed\u001c\u0003\u0000\u0003I\u0000\u0005countB\u0000\rstr"
+"eamVersionL\u0000\u0006parentt\u0000$Lcom/sun/msv/grammar/ExpressionPool;xp"
+"\u0000\u0000\u0000N\u0001pq\u0000~\u0000\u00c6q\u0000~\u0000\u00e3q\u0000~\u0000\u00c4q\u0000~\u0000\u00e1q\u0000~\u0000\u0007q\u0000~\u0000\u0012q\u0000~\u0001#q\u0000~\u0000\u0005q\u0000~\u0000\u0015q\u0000~\u0000\u00bbq\u0000~\u0000"
+"\u0013q\u0000~\u0000!q\u0000~\u0000\u0006q\u0000~\u0000Dq\u0000~\u0000\u00cdq\u0000~\u0000\u00e8q\u0000~\u0000\bq\u0000~\u0000\u0088q\u0000~\u0000^q\u0000~\u0000\u00d8q\u0000~\u0000\u00d0q\u0000~\u0000jq\u0000~\u0000"
+"bq\u0000~\u0000Tq\u0000~\u0000Gq\u0000~\u0000\u00ebq\u0000~\u0000\u00f3q\u0000~\u0000Eq\u0000~\u0000\u00ceq\u0000~\u0000`q\u0000~\u0000\u00e9q\u0000~\u0000\u00b6q\u0000~\u0000\u00aaq\u0000~\u0000\u00ddq\u0000~\u0000"
+"\u00c9q\u0000~\u0000\u00c0q\u0000~\u0000\u00b7q\u0000~\u0000\u00b0q\u0000~\u0000\u00a4q\u0000~\u0000\u008bq\u0000~\u0000\u0084q\u0000~\u0000oq\u0000~\u0000Yq\u0000~\u00006q\u0000~\u0000\u0091q\u0000~\u0000\u000eq\u0000~\u0000"
+"\u00e4q\u0000~\u0000\u00f8q\u0000~\u0000\u00bdq\u0000~\u0000\u001aq\u0000~\u0000\rq\u0000~\u0000\u000fq\u0000~\u0000\u0014q\u0000~\u0000\u008aq\u0000~\u0000uq\u0000~\u0000\u0017q\u0000~\u0000\u008fq\u0000~\u0000\u0010q\u0000~\u0000"
+"\u00b4q\u0000~\u0000\u00a8q\u0000~\u0000\u000bq\u0000~\u0000\u00d6q\u0000~\u0000hq\u0000~\u0000Rq\u0000~\u0000\u00f1q\u0000~\u0000\u0011q\u0000~\u0000_q\u0000~\u0000\tq\u0000~\u0000\nq\u0000~\u0000\fq\u0000~\u0000"
+"\u00d9q\u0000~\u0000\u00d1q\u0000~\u0000kq\u0000~\u0000cq\u0000~\u0000Uq\u0000~\u0000Hq\u0000~\u0000\u00ecq\u0000~\u0000\u00f4x"));
        }
        return new com.sun.msv.verifier.regexp.REDocumentDeclaration(schemaFragment);
    }

    public class Unmarshaller
        extends com.sun.identity.federation.jaxb.entityconfig.impl.runtime.AbstractUnmarshallingEventHandlerImpl
    {


        public Unmarshaller(com.sun.identity.federation.jaxb.entityconfig.impl.runtime.UnmarshallingContext context) {
            super(context, "--------------------------------------");
        }

        protected Unmarshaller(com.sun.identity.federation.jaxb.entityconfig.impl.runtime.UnmarshallingContext context, int startState) {
            this(context);
            state = startState;
        }

        public java.lang.Object owner() {
            return com.sun.identity.liberty.ws.common.jaxb.ps.impl.AuthnRequestTypeImpl.this;
        }

        public void enterElement(java.lang.String ___uri, java.lang.String ___local, java.lang.String ___qname, org.xml.sax.Attributes __atts)
            throws org.xml.sax.SAXException
        {
            int attIdx;
            outer:
            while (true) {
                switch (state) {
                    case  37 :
                        revertToParentFromEnterElement(___uri, ___local, ___qname, __atts);
                        return ;
                    case  3 :
                        attIdx = context.getAttribute("", "IssueInstant");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().enterElement(___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        break;
                    case  34 :
                        if (("Scoping" == ___local)&&("urn:liberty:iff:2003-08" == ___uri)) {
                            _Scoping = ((com.sun.identity.liberty.ws.common.jaxb.ps.impl.ScopingElementImpl) spawnChildFromEnterElement((com.sun.identity.liberty.ws.common.jaxb.ps.impl.ScopingElementImpl.class), 37, ___uri, ___local, ___qname, __atts));
                            return ;
                        }
                        if (("Scoping" == ___local)&&("urn:liberty:iff:2003-08" == ___uri)) {
                            context.pushAttributes(__atts, false);
                            state = 35;
                            return ;
                        }
                        state = 37;
                        continue outer;
                    case  25 :
                        if (("AssertionConsumerServiceID" == ___local)&&("urn:liberty:iff:2003-08" == ___uri)) {
                            context.pushAttributes(__atts, true);
                            state = 26;
                            return ;
                        }
                        state = 28;
                        continue outer;
                    case  28 :
                        if (("RequestAuthnContext" == ___local)&&("urn:liberty:iff:2003-08" == ___uri)) {
                            _RequestAuthnContext = ((com.sun.identity.liberty.ws.common.jaxb.ps.impl.RequestAuthnContextElementImpl) spawnChildFromEnterElement((com.sun.identity.liberty.ws.common.jaxb.ps.impl.RequestAuthnContextElementImpl.class), 31, ___uri, ___local, ___qname, __atts));
                            return ;
                        }
                        if (("RequestAuthnContext" == ___local)&&("urn:liberty:iff:2003-08" == ___uri)) {
                            context.pushAttributes(__atts, false);
                            state = 29;
                            return ;
                        }
                        state = 31;
                        continue outer;
                    case  4 :
                        if (("Extension" == ___local)&&("urn:liberty:iff:2003-08" == ___uri)) {
                            _getExtension().add(((com.sun.identity.liberty.ws.common.jaxb.ps.impl.ExtensionElementImpl) spawnChildFromEnterElement((com.sun.identity.liberty.ws.common.jaxb.ps.impl.ExtensionElementImpl.class), 7, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("Extension" == ___local)&&("urn:liberty:iff:2003-08" == ___uri)) {
                            context.pushAttributes(__atts, false);
                            state = 5;
                            return ;
                        }
                        state = 7;
                        continue outer;
                    case  16 :
                        if (("ForceAuthn" == ___local)&&("urn:liberty:iff:2003-08" == ___uri)) {
                            context.pushAttributes(__atts, true);
                            state = 17;
                            return ;
                        }
                        state = 19;
                        continue outer;
                    case  5 :
                        if (!(("" == ___uri)||("urn:liberty:iff:2003-08" == ___uri))) {
                            _getExtension().add(((com.sun.identity.liberty.ws.common.jaxb.ps.impl.ExtensionTypeImpl) spawnChildFromEnterElement((com.sun.identity.liberty.ws.common.jaxb.ps.impl.ExtensionTypeImpl.class), 6, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        break;
                    case  0 :
                        attIdx = context.getAttribute("urn:liberty:iff:2003-08", "consent");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            state = 3;
                            eatText1(v);
                            continue outer;
                        }
                        state = 3;
                        continue outer;
                    case  13 :
                        if (("NameIDPolicy" == ___local)&&("urn:liberty:iff:2003-08" == ___uri)) {
                            context.pushAttributes(__atts, true);
                            state = 14;
                            return ;
                        }
                        state = 16;
                        continue outer;
                    case  31 :
                        if (("RelayState" == ___local)&&("urn:liberty:iff:2003-08" == ___uri)) {
                            context.pushAttributes(__atts, true);
                            state = 32;
                            return ;
                        }
                        state = 34;
                        continue outer;
                    case  29 :
                        if (("AuthnContextClassRef" == ___local)&&("urn:liberty:iff:2003-08" == ___uri)) {
                            _RequestAuthnContext = ((com.sun.identity.liberty.ws.common.jaxb.ps.impl.RequestAuthnContextTypeImpl) spawnChildFromEnterElement((com.sun.identity.liberty.ws.common.jaxb.ps.impl.RequestAuthnContextTypeImpl.class), 30, ___uri, ___local, ___qname, __atts));
                            return ;
                        }
                        if (("AuthnContextStatementRef" == ___local)&&("urn:liberty:iff:2003-08" == ___uri)) {
                            _RequestAuthnContext = ((com.sun.identity.liberty.ws.common.jaxb.ps.impl.RequestAuthnContextTypeImpl) spawnChildFromEnterElement((com.sun.identity.liberty.ws.common.jaxb.ps.impl.RequestAuthnContextTypeImpl.class), 30, ___uri, ___local, ___qname, __atts));
                            return ;
                        }
                        break;
                    case  35 :
                        if (("ProxyCount" == ___local)&&("urn:liberty:iff:2003-08" == ___uri)) {
                            _Scoping = ((com.sun.identity.liberty.ws.common.jaxb.ps.impl.ScopingTypeImpl) spawnChildFromEnterElement((com.sun.identity.liberty.ws.common.jaxb.ps.impl.ScopingTypeImpl.class), 36, ___uri, ___local, ___qname, __atts));
                            return ;
                        }
                        if (("IDPList" == ___local)&&("urn:liberty:iff:2003-08" == ___uri)) {
                            _Scoping = ((com.sun.identity.liberty.ws.common.jaxb.ps.impl.ScopingTypeImpl) spawnChildFromEnterElement((com.sun.identity.liberty.ws.common.jaxb.ps.impl.ScopingTypeImpl.class), 36, ___uri, ___local, ___qname, __atts));
                            return ;
                        }
                        if (("IDPList" == ___local)&&("urn:liberty:iff:2003-08" == ___uri)) {
                            _Scoping = ((com.sun.identity.liberty.ws.common.jaxb.ps.impl.ScopingTypeImpl) spawnChildFromEnterElement((com.sun.identity.liberty.ws.common.jaxb.ps.impl.ScopingTypeImpl.class), 36, ___uri, ___local, ___qname, __atts));
                            return ;
                        }
                        _Scoping = ((com.sun.identity.liberty.ws.common.jaxb.ps.impl.ScopingTypeImpl) spawnChildFromEnterElement((com.sun.identity.liberty.ws.common.jaxb.ps.impl.ScopingTypeImpl.class), 36, ___uri, ___local, ___qname, __atts));
                        return ;
                    case  7 :
                        if (("Extension" == ___local)&&("urn:liberty:iff:2003-08" == ___uri)) {
                            _getExtension().add(((com.sun.identity.liberty.ws.common.jaxb.ps.impl.ExtensionElementImpl) spawnChildFromEnterElement((com.sun.identity.liberty.ws.common.jaxb.ps.impl.ExtensionElementImpl.class), 7, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("Extension" == ___local)&&("urn:liberty:iff:2003-08" == ___uri)) {
                            context.pushAttributes(__atts, false);
                            state = 5;
                            return ;
                        }
                        if (("ProviderID" == ___local)&&("urn:liberty:iff:2003-08" == ___uri)) {
                            context.pushAttributes(__atts, true);
                            state = 8;
                            return ;
                        }
                        break;
                    case  19 :
                        if (("IsPassive" == ___local)&&("urn:liberty:iff:2003-08" == ___uri)) {
                            context.pushAttributes(__atts, true);
                            state = 20;
                            return ;
                        }
                        state = 22;
                        continue outer;
                    case  22 :
                        if (("ProtocolProfile" == ___local)&&("urn:liberty:iff:2003-08" == ___uri)) {
                            context.pushAttributes(__atts, true);
                            state = 23;
                            return ;
                        }
                        state = 25;
                        continue outer;
                    case  10 :
                        if (("AffiliationID" == ___local)&&("urn:liberty:iff:2003-08" == ___uri)) {
                            context.pushAttributes(__atts, true);
                            state = 11;
                            return ;
                        }
                        state = 13;
                        continue outer;
                }
                super.enterElement(___uri, ___local, ___qname, __atts);
                break;
            }
        }

        private void eatText1(final java.lang.String value)
            throws org.xml.sax.SAXException
        {
            try {
                _Consent = com.sun.xml.bind.WhiteSpaceProcessor.collapse(value);
            } catch (java.lang.Exception e) {
                handleParseConversionException(e);
            }
        }

        public void leaveElement(java.lang.String ___uri, java.lang.String ___local, java.lang.String ___qname)
            throws org.xml.sax.SAXException
        {
            int attIdx;
            outer:
            while (true) {
                switch (state) {
                    case  9 :
                        if (("ProviderID" == ___local)&&("urn:liberty:iff:2003-08" == ___uri)) {
                            context.popAttributes();
                            state = 10;
                            return ;
                        }
                        break;
                    case  37 :
                        revertToParentFromLeaveElement(___uri, ___local, ___qname);
                        return ;
                    case  15 :
                        if (("NameIDPolicy" == ___local)&&("urn:liberty:iff:2003-08" == ___uri)) {
                            context.popAttributes();
                            state = 16;
                            return ;
                        }
                        break;
                    case  24 :
                        if (("ProtocolProfile" == ___local)&&("urn:liberty:iff:2003-08" == ___uri)) {
                            context.popAttributes();
                            state = 25;
                            return ;
                        }
                        break;
                    case  3 :
                        attIdx = context.getAttribute("", "IssueInstant");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().leaveElement(___uri, ___local, ___qname);
                            return ;
                        }
                        break;
                    case  33 :
                        if (("RelayState" == ___local)&&("urn:liberty:iff:2003-08" == ___uri)) {
                            context.popAttributes();
                            state = 34;
                            return ;
                        }
                        break;
                    case  34 :
                        state = 37;
                        continue outer;
                    case  25 :
                        state = 28;
                        continue outer;
                    case  28 :
                        state = 31;
                        continue outer;
                    case  18 :
                        if (("ForceAuthn" == ___local)&&("urn:liberty:iff:2003-08" == ___uri)) {
                            context.popAttributes();
                            state = 19;
                            return ;
                        }
                        break;
                    case  6 :
                        if (("Extension" == ___local)&&("urn:liberty:iff:2003-08" == ___uri)) {
                            context.popAttributes();
                            state = 7;
                            return ;
                        }
                        break;
                    case  4 :
                        state = 7;
                        continue outer;
                    case  16 :
                        state = 19;
                        continue outer;
                    case  0 :
                        attIdx = context.getAttribute("urn:liberty:iff:2003-08", "consent");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            state = 3;
                            eatText1(v);
                            continue outer;
                        }
                        state = 3;
                        continue outer;
                    case  13 :
                        state = 16;
                        continue outer;
                    case  31 :
                        state = 34;
                        continue outer;
                    case  30 :
                        if (("RequestAuthnContext" == ___local)&&("urn:liberty:iff:2003-08" == ___uri)) {
                            context.popAttributes();
                            state = 31;
                            return ;
                        }
                        break;
                    case  35 :
                        _Scoping = ((com.sun.identity.liberty.ws.common.jaxb.ps.impl.ScopingTypeImpl) spawnChildFromLeaveElement((com.sun.identity.liberty.ws.common.jaxb.ps.impl.ScopingTypeImpl.class), 36, ___uri, ___local, ___qname));
                        return ;
                    case  19 :
                        state = 22;
                        continue outer;
                    case  27 :
                        if (("AssertionConsumerServiceID" == ___local)&&("urn:liberty:iff:2003-08" == ___uri)) {
                            context.popAttributes();
                            state = 28;
                            return ;
                        }
                        break;
                    case  12 :
                        if (("AffiliationID" == ___local)&&("urn:liberty:iff:2003-08" == ___uri)) {
                            context.popAttributes();
                            state = 13;
                            return ;
                        }
                        break;
                    case  22 :
                        state = 25;
                        continue outer;
                    case  10 :
                        state = 13;
                        continue outer;
                    case  21 :
                        if (("IsPassive" == ___local)&&("urn:liberty:iff:2003-08" == ___uri)) {
                            context.popAttributes();
                            state = 22;
                            return ;
                        }
                        break;
                    case  36 :
                        if (("Scoping" == ___local)&&("urn:liberty:iff:2003-08" == ___uri)) {
                            context.popAttributes();
                            state = 37;
                            return ;
                        }
                        break;
                }
                super.leaveElement(___uri, ___local, ___qname);
                break;
            }
        }

        public void enterAttribute(java.lang.String ___uri, java.lang.String ___local, java.lang.String ___qname)
            throws org.xml.sax.SAXException
        {
            int attIdx;
            outer:
            while (true) {
                switch (state) {
                    case  37 :
                        revertToParentFromEnterAttribute(___uri, ___local, ___qname);
                        return ;
                    case  3 :
                        if (("IssueInstant" == ___local)&&("" == ___uri)) {
                            spawnHandlerFromEnterAttribute((((com.sun.identity.liberty.ws.common.jaxb.protocol.impl.RequestAbstractTypeImpl)com.sun.identity.liberty.ws.common.jaxb.ps.impl.AuthnRequestTypeImpl.this).new Unmarshaller(context)), 4, ___uri, ___local, ___qname);
                            return ;
                        }
                        break;
                    case  34 :
                        state = 37;
                        continue outer;
                    case  25 :
                        state = 28;
                        continue outer;
                    case  28 :
                        state = 31;
                        continue outer;
                    case  4 :
                        state = 7;
                        continue outer;
                    case  16 :
                        state = 19;
                        continue outer;
                    case  0 :
                        if (("consent" == ___local)&&("urn:liberty:iff:2003-08" == ___uri)) {
                            state = 1;
                            return ;
                        }
                        state = 3;
                        continue outer;
                    case  13 :
                        state = 16;
                        continue outer;
                    case  31 :
                        state = 34;
                        continue outer;
                    case  35 :
                        _Scoping = ((com.sun.identity.liberty.ws.common.jaxb.ps.impl.ScopingTypeImpl) spawnChildFromEnterAttribute((com.sun.identity.liberty.ws.common.jaxb.ps.impl.ScopingTypeImpl.class), 36, ___uri, ___local, ___qname));
                        return ;
                    case  19 :
                        state = 22;
                        continue outer;
                    case  22 :
                        state = 25;
                        continue outer;
                    case  10 :
                        state = 13;
                        continue outer;
                }
                super.enterAttribute(___uri, ___local, ___qname);
                break;
            }
        }

        public void leaveAttribute(java.lang.String ___uri, java.lang.String ___local, java.lang.String ___qname)
            throws org.xml.sax.SAXException
        {
            int attIdx;
            outer:
            while (true) {
                switch (state) {
                    case  37 :
                        revertToParentFromLeaveAttribute(___uri, ___local, ___qname);
                        return ;
                    case  3 :
                        attIdx = context.getAttribute("", "IssueInstant");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().leaveAttribute(___uri, ___local, ___qname);
                            return ;
                        }
                        break;
                    case  34 :
                        state = 37;
                        continue outer;
                    case  25 :
                        state = 28;
                        continue outer;
                    case  28 :
                        state = 31;
                        continue outer;
                    case  4 :
                        state = 7;
                        continue outer;
                    case  16 :
                        state = 19;
                        continue outer;
                    case  0 :
                        attIdx = context.getAttribute("urn:liberty:iff:2003-08", "consent");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            state = 3;
                            eatText1(v);
                            continue outer;
                        }
                        state = 3;
                        continue outer;
                    case  13 :
                        state = 16;
                        continue outer;
                    case  31 :
                        state = 34;
                        continue outer;
                    case  35 :
                        _Scoping = ((com.sun.identity.liberty.ws.common.jaxb.ps.impl.ScopingTypeImpl) spawnChildFromLeaveAttribute((com.sun.identity.liberty.ws.common.jaxb.ps.impl.ScopingTypeImpl.class), 36, ___uri, ___local, ___qname));
                        return ;
                    case  19 :
                        state = 22;
                        continue outer;
                    case  22 :
                        state = 25;
                        continue outer;
                    case  10 :
                        state = 13;
                        continue outer;
                    case  2 :
                        if (("consent" == ___local)&&("urn:liberty:iff:2003-08" == ___uri)) {
                            state = 3;
                            return ;
                        }
                        break;
                }
                super.leaveAttribute(___uri, ___local, ___qname);
                break;
            }
        }

        public void handleText(final java.lang.String value)
            throws org.xml.sax.SAXException
        {
            int attIdx;
            outer:
            while (true) {
                try {
                    switch (state) {
                        case  37 :
                            revertToParentFromText(value);
                            return ;
                        case  3 :
                            attIdx = context.getAttribute("", "IssueInstant");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().text(value);
                                return ;
                            }
                            break;
                        case  34 :
                            state = 37;
                            continue outer;
                        case  23 :
                            state = 24;
                            eatText2(value);
                            return ;
                        case  25 :
                            state = 28;
                            continue outer;
                        case  20 :
                            state = 21;
                            eatText3(value);
                            return ;
                        case  28 :
                            state = 31;
                            continue outer;
                        case  11 :
                            state = 12;
                            eatText4(value);
                            return ;
                        case  4 :
                            state = 7;
                            continue outer;
                        case  16 :
                            state = 19;
                            continue outer;
                        case  26 :
                            state = 27;
                            eatText5(value);
                            return ;
                        case  0 :
                            attIdx = context.getAttribute("urn:liberty:iff:2003-08", "consent");
                            if (attIdx >= 0) {
                                final java.lang.String v = context.eatAttribute(attIdx);
                                state = 3;
                                eatText1(v);
                                continue outer;
                            }
                            state = 3;
                            continue outer;
                        case  13 :
                            state = 16;
                            continue outer;
                        case  31 :
                            state = 34;
                            continue outer;
                        case  35 :
                            _Scoping = ((com.sun.identity.liberty.ws.common.jaxb.ps.impl.ScopingTypeImpl) spawnChildFromText((com.sun.identity.liberty.ws.common.jaxb.ps.impl.ScopingTypeImpl.class), 36, value));
                            return ;
                        case  19 :
                            state = 22;
                            continue outer;
                        case  17 :
                            state = 18;
                            eatText6(value);
                            return ;
                        case  22 :
                            state = 25;
                            continue outer;
                        case  8 :
                            state = 9;
                            eatText7(value);
                            return ;
                        case  10 :
                            state = 13;
                            continue outer;
                        case  1 :
                            state = 2;
                            eatText1(value);
                            return ;
                        case  32 :
                            state = 33;
                            eatText8(value);
                            return ;
                        case  14 :
                            state = 15;
                            eatText9(value);
                            return ;
                    }
                } catch (java.lang.RuntimeException e) {
                    handleUnexpectedTextException(value, e);
                }
                break;
            }
        }

        private void eatText2(final java.lang.String value)
            throws org.xml.sax.SAXException
        {
            try {
                _ProtocolProfile = com.sun.xml.bind.WhiteSpaceProcessor.collapse(value);
            } catch (java.lang.Exception e) {
                handleParseConversionException(e);
            }
        }

        private void eatText3(final java.lang.String value)
            throws org.xml.sax.SAXException
        {
            try {
                _IsPassive = javax.xml.bind.DatatypeConverter.parseBoolean(com.sun.xml.bind.WhiteSpaceProcessor.collapse(value));
                has_IsPassive = true;
            } catch (java.lang.Exception e) {
                handleParseConversionException(e);
            }
        }

        private void eatText4(final java.lang.String value)
            throws org.xml.sax.SAXException
        {
            try {
                _AffiliationID = com.sun.xml.bind.WhiteSpaceProcessor.collapse(value);
            } catch (java.lang.Exception e) {
                handleParseConversionException(e);
            }
        }

        private void eatText5(final java.lang.String value)
            throws org.xml.sax.SAXException
        {
            try {
                _AssertionConsumerServiceID = value;
            } catch (java.lang.Exception e) {
                handleParseConversionException(e);
            }
        }

        private void eatText6(final java.lang.String value)
            throws org.xml.sax.SAXException
        {
            try {
                _ForceAuthn = javax.xml.bind.DatatypeConverter.parseBoolean(com.sun.xml.bind.WhiteSpaceProcessor.collapse(value));
                has_ForceAuthn = true;
            } catch (java.lang.Exception e) {
                handleParseConversionException(e);
            }
        }

        private void eatText7(final java.lang.String value)
            throws org.xml.sax.SAXException
        {
            try {
                _ProviderID = com.sun.xml.bind.WhiteSpaceProcessor.collapse(value);
            } catch (java.lang.Exception e) {
                handleParseConversionException(e);
            }
        }

        private void eatText8(final java.lang.String value)
            throws org.xml.sax.SAXException
        {
            try {
                _RelayState = value;
            } catch (java.lang.Exception e) {
                handleParseConversionException(e);
            }
        }

        private void eatText9(final java.lang.String value)
            throws org.xml.sax.SAXException
        {
            try {
                _NameIDPolicy = value;
            } catch (java.lang.Exception e) {
                handleParseConversionException(e);
            }
        }

    }

}
