//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v1.0.6-b27-fcs 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2012.06.11 at 10:33:54 AM PDT 
//


package com.sun.identity.liberty.ws.common.jaxb.ac;


/**
 * This object contains factory methods for each 
 * Java content interface and Java element interface 
 * generated in the com.sun.identity.liberty.ws.common.jaxb.ac package. 
 * <p>An ObjectFactory allows you to programatically 
 * construct new instances of the Java representation 
 * for XML content. The Java representation of XML 
 * content can consist of schema derived interfaces 
 * and classes representing the binding of schema 
 * type definitions, element declarations and model 
 * groups.  Factory methods for each of these are 
 * provided in this class.
 * 
 */
public class ObjectFactory
    extends com.sun.identity.federation.jaxb.entityconfig.impl.runtime.DefaultJAXBContextImpl
{

    private static java.util.HashMap defaultImplementations = new java.util.HashMap(139, 0.75F);
    private static java.util.HashMap rootTagMap = new java.util.HashMap();
    public final static com.sun.identity.federation.jaxb.entityconfig.impl.runtime.GrammarInfo grammarInfo = new com.sun.identity.federation.jaxb.entityconfig.impl.runtime.GrammarInfoImpl(rootTagMap, defaultImplementations, (com.sun.identity.liberty.ws.common.jaxb.ac.ObjectFactory.class));
    public final static java.lang.Class version = (com.sun.identity.liberty.ws.common.jaxb.ac.impl.JAXBVersion.class);

    static {
        defaultImplementations.put((com.sun.identity.liberty.ws.common.jaxb.ac.PrincipalAuthenticationMechanismElement.class), "com.sun.identity.liberty.ws.common.jaxb.ac.impl.PrincipalAuthenticationMechanismElementImpl");
        defaultImplementations.put((com.sun.identity.liberty.ws.common.jaxb.ac.AuthenticatorType.class), "com.sun.identity.liberty.ws.common.jaxb.ac.impl.AuthenticatorTypeImpl");
        defaultImplementations.put((com.sun.identity.liberty.ws.common.jaxb.ac.ActivationLimitDurationElement.class), "com.sun.identity.liberty.ws.common.jaxb.ac.impl.ActivationLimitDurationElementImpl");
        defaultImplementations.put((com.sun.identity.liberty.ws.common.jaxb.ac.AuthenticatorTransportProtocolType.class), "com.sun.identity.liberty.ws.common.jaxb.ac.impl.AuthenticatorTransportProtocolTypeImpl");
        defaultImplementations.put((com.sun.identity.liberty.ws.common.jaxb.ac.AuthenticationMethodType.class), "com.sun.identity.liberty.ws.common.jaxb.ac.impl.AuthenticationMethodTypeImpl");
        defaultImplementations.put((com.sun.identity.liberty.ws.common.jaxb.ac.KeyActivationElement.class), "com.sun.identity.liberty.ws.common.jaxb.ac.impl.KeyActivationElementImpl");
        defaultImplementations.put((com.sun.identity.liberty.ws.common.jaxb.ac.MobileNetworkNoEncryptionType.class), "com.sun.identity.liberty.ws.common.jaxb.ac.impl.MobileNetworkNoEncryptionTypeImpl");
        defaultImplementations.put((com.sun.identity.liberty.ws.common.jaxb.ac.SecurityAuditType.class), "com.sun.identity.liberty.ws.common.jaxb.ac.impl.SecurityAuditTypeImpl");
        defaultImplementations.put((com.sun.identity.liberty.ws.common.jaxb.ac.KeyStorageType.class), "com.sun.identity.liberty.ws.common.jaxb.ac.impl.KeyStorageTypeImpl");
        defaultImplementations.put((com.sun.identity.liberty.ws.common.jaxb.ac.StatusType.class), "com.sun.identity.liberty.ws.common.jaxb.ac.impl.StatusTypeImpl");
        defaultImplementations.put((com.sun.identity.liberty.ws.common.jaxb.ac.PrivateKeyProtectionElement.class), "com.sun.identity.liberty.ws.common.jaxb.ac.impl.PrivateKeyProtectionElementImpl");
        defaultImplementations.put((com.sun.identity.liberty.ws.common.jaxb.ac.IdentificationElement.class), "com.sun.identity.liberty.ws.common.jaxb.ac.impl.IdentificationElementImpl");
        defaultImplementations.put((com.sun.identity.liberty.ws.common.jaxb.ac.SharedSecretDynamicPlaintextType.class), "com.sun.identity.liberty.ws.common.jaxb.ac.impl.SharedSecretDynamicPlaintextTypeImpl");
        defaultImplementations.put((com.sun.identity.liberty.ws.common.jaxb.ac.AuthenticationMethodElement.class), "com.sun.identity.liberty.ws.common.jaxb.ac.impl.AuthenticationMethodElementImpl");
        defaultImplementations.put((com.sun.identity.liberty.ws.common.jaxb.ac.ResumeSessionType.class), "com.sun.identity.liberty.ws.common.jaxb.ac.impl.ResumeSessionTypeImpl");
        defaultImplementations.put((com.sun.identity.liberty.ws.common.jaxb.ac.ActivationPinType.class), "com.sun.identity.liberty.ws.common.jaxb.ac.impl.ActivationPinTypeImpl");
        defaultImplementations.put((com.sun.identity.liberty.ws.common.jaxb.ac.GoverningAgreementsElement.class), "com.sun.identity.liberty.ws.common.jaxb.ac.impl.GoverningAgreementsElementImpl");
        defaultImplementations.put((com.sun.identity.liberty.ws.common.jaxb.ac.ZeroKnowledgeElement.class), "com.sun.identity.liberty.ws.common.jaxb.ac.impl.ZeroKnowledgeElementImpl");
        defaultImplementations.put((com.sun.identity.liberty.ws.common.jaxb.ac.DigSigType.class), "com.sun.identity.liberty.ws.common.jaxb.ac.impl.DigSigTypeImpl");
        defaultImplementations.put((com.sun.identity.liberty.ws.common.jaxb.ac.PreviousSessionElement.class), "com.sun.identity.liberty.ws.common.jaxb.ac.impl.PreviousSessionElementImpl");
        defaultImplementations.put((com.sun.identity.liberty.ws.common.jaxb.ac.TechnicalProtectionType.class), "com.sun.identity.liberty.ws.common.jaxb.ac.impl.TechnicalProtectionTypeImpl");
        defaultImplementations.put((com.sun.identity.liberty.ws.common.jaxb.ac.AsymmetricDecryptionType.class), "com.sun.identity.liberty.ws.common.jaxb.ac.impl.AsymmetricDecryptionTypeImpl");
        defaultImplementations.put((com.sun.identity.liberty.ws.common.jaxb.ac.AsymmetricKeyAgreementType.class), "com.sun.identity.liberty.ws.common.jaxb.ac.impl.AsymmetricKeyAgreementTypeImpl");
        defaultImplementations.put((com.sun.identity.liberty.ws.common.jaxb.ac.SSLElement.class), "com.sun.identity.liberty.ws.common.jaxb.ac.impl.SSLElementImpl");
        defaultImplementations.put((com.sun.identity.liberty.ws.common.jaxb.ac.WTLSType.class), "com.sun.identity.liberty.ws.common.jaxb.ac.impl.WTLSTypeImpl");
        defaultImplementations.put((com.sun.identity.liberty.ws.common.jaxb.ac.WrittenConsentElement.class), "com.sun.identity.liberty.ws.common.jaxb.ac.impl.WrittenConsentElementImpl");
        defaultImplementations.put((com.sun.identity.liberty.ws.common.jaxb.ac.SmartcardType.class), "com.sun.identity.liberty.ws.common.jaxb.ac.impl.SmartcardTypeImpl");
        defaultImplementations.put((com.sun.identity.liberty.ws.common.jaxb.ac.MobileNetworkNoEncryptionElement.class), "com.sun.identity.liberty.ws.common.jaxb.ac.impl.MobileNetworkNoEncryptionElementImpl");
        defaultImplementations.put((com.sun.identity.liberty.ws.common.jaxb.ac.IdentificationType.class), "com.sun.identity.liberty.ws.common.jaxb.ac.impl.IdentificationTypeImpl");
        defaultImplementations.put((com.sun.identity.liberty.ws.common.jaxb.ac.GenerationElement.class), "com.sun.identity.liberty.ws.common.jaxb.ac.impl.GenerationElementImpl");
        defaultImplementations.put((com.sun.identity.liberty.ws.common.jaxb.ac.LengthElement.class), "com.sun.identity.liberty.ws.common.jaxb.ac.impl.LengthElementImpl");
        defaultImplementations.put((com.sun.identity.liberty.ws.common.jaxb.ac.PhysicalVerificationType.class), "com.sun.identity.liberty.ws.common.jaxb.ac.impl.PhysicalVerificationTypeImpl");
        defaultImplementations.put((com.sun.identity.liberty.ws.common.jaxb.ac.GoverningAgreementRefType.class), "com.sun.identity.liberty.ws.common.jaxb.ac.impl.GoverningAgreementRefTypeImpl");
        defaultImplementations.put((com.sun.identity.liberty.ws.common.jaxb.ac.IPAddressType.class), "com.sun.identity.liberty.ws.common.jaxb.ac.impl.IPAddressTypeImpl");
        defaultImplementations.put((com.sun.identity.liberty.ws.common.jaxb.ac.ActivationLimitSessionElement.class), "com.sun.identity.liberty.ws.common.jaxb.ac.impl.ActivationLimitSessionElementImpl");
        defaultImplementations.put((com.sun.identity.liberty.ws.common.jaxb.ac.StatusElement.class), "com.sun.identity.liberty.ws.common.jaxb.ac.impl.StatusElementImpl");
        defaultImplementations.put((com.sun.identity.liberty.ws.common.jaxb.ac.SecretKeyProtectionElement.class), "com.sun.identity.liberty.ws.common.jaxb.ac.impl.SecretKeyProtectionElementImpl");
        defaultImplementations.put((com.sun.identity.liberty.ws.common.jaxb.ac.IPAddressElement.class), "com.sun.identity.liberty.ws.common.jaxb.ac.impl.IPAddressElementImpl");
        defaultImplementations.put((com.sun.identity.liberty.ws.common.jaxb.ac.IPSecType.class), "com.sun.identity.liberty.ws.common.jaxb.ac.impl.IPSecTypeImpl");
        defaultImplementations.put((com.sun.identity.liberty.ws.common.jaxb.ac.ActivationPinElement.class), "com.sun.identity.liberty.ws.common.jaxb.ac.impl.ActivationPinElementImpl");
        defaultImplementations.put((com.sun.identity.liberty.ws.common.jaxb.ac.ActivationLimitElement.class), "com.sun.identity.liberty.ws.common.jaxb.ac.impl.ActivationLimitElementImpl");
        defaultImplementations.put((com.sun.identity.liberty.ws.common.jaxb.ac.TokenElement.class), "com.sun.identity.liberty.ws.common.jaxb.ac.impl.TokenElementImpl");
        defaultImplementations.put((com.sun.identity.liberty.ws.common.jaxb.ac.ActivationLimitUsagesElement.class), "com.sun.identity.liberty.ws.common.jaxb.ac.impl.ActivationLimitUsagesElementImpl");
        defaultImplementations.put((com.sun.identity.liberty.ws.common.jaxb.ac.PasswordType.class), "com.sun.identity.liberty.ws.common.jaxb.ac.impl.PasswordTypeImpl");
        defaultImplementations.put((com.sun.identity.liberty.ws.common.jaxb.ac.WTLSElement.class), "com.sun.identity.liberty.ws.common.jaxb.ac.impl.WTLSElementImpl");
        defaultImplementations.put((com.sun.identity.liberty.ws.common.jaxb.ac.TimeSyncTokenType.class), "com.sun.identity.liberty.ws.common.jaxb.ac.impl.TimeSyncTokenTypeImpl");
        defaultImplementations.put((com.sun.identity.liberty.ws.common.jaxb.ac.IPSecElement.class), "com.sun.identity.liberty.ws.common.jaxb.ac.impl.IPSecElementImpl");
        defaultImplementations.put((com.sun.identity.liberty.ws.common.jaxb.ac.ResumeSessionElement.class), "com.sun.identity.liberty.ws.common.jaxb.ac.impl.ResumeSessionElementImpl");
        defaultImplementations.put((com.sun.identity.liberty.ws.common.jaxb.ac.MobileNetworkEndToEndEncryptionElement.class), "com.sun.identity.liberty.ws.common.jaxb.ac.impl.MobileNetworkEndToEndEncryptionElementImpl");
        defaultImplementations.put((com.sun.identity.liberty.ws.common.jaxb.ac.SecurityAuditElement.class), "com.sun.identity.liberty.ws.common.jaxb.ac.impl.SecurityAuditElementImpl");
        defaultImplementations.put((com.sun.identity.liberty.ws.common.jaxb.ac.AuthenticationContextStatementType.class), "com.sun.identity.liberty.ws.common.jaxb.ac.impl.AuthenticationContextStatementTypeImpl");
        defaultImplementations.put((com.sun.identity.liberty.ws.common.jaxb.ac.OperationalProtectionElement.class), "com.sun.identity.liberty.ws.common.jaxb.ac.impl.OperationalProtectionElementImpl");
        defaultImplementations.put((com.sun.identity.liberty.ws.common.jaxb.ac.AuthenticationContextStatementElement.class), "com.sun.identity.liberty.ws.common.jaxb.ac.impl.AuthenticationContextStatementElementImpl");
        defaultImplementations.put((com.sun.identity.liberty.ws.common.jaxb.ac.ExtensionElement.class), "com.sun.identity.liberty.ws.common.jaxb.ac.impl.ExtensionElementImpl");
        defaultImplementations.put((com.sun.identity.liberty.ws.common.jaxb.ac.AuthenticatorElement.class), "com.sun.identity.liberty.ws.common.jaxb.ac.impl.AuthenticatorElementImpl");
        defaultImplementations.put((com.sun.identity.liberty.ws.common.jaxb.ac.SecretKeyProtectionType.class), "com.sun.identity.liberty.ws.common.jaxb.ac.impl.SecretKeyProtectionTypeImpl");
        defaultImplementations.put((com.sun.identity.liberty.ws.common.jaxb.ac.AuthenticatingAuthorityElement.class), "com.sun.identity.liberty.ws.common.jaxb.ac.impl.AuthenticatingAuthorityElementImpl");
        defaultImplementations.put((com.sun.identity.liberty.ws.common.jaxb.ac.ActivationLimitSessionType.class), "com.sun.identity.liberty.ws.common.jaxb.ac.impl.ActivationLimitSessionTypeImpl");
        defaultImplementations.put((com.sun.identity.liberty.ws.common.jaxb.ac.KeyStorageElement.class), "com.sun.identity.liberty.ws.common.jaxb.ac.impl.KeyStorageElementImpl");
        defaultImplementations.put((com.sun.identity.liberty.ws.common.jaxb.ac.TechnicalProtectionElement.class), "com.sun.identity.liberty.ws.common.jaxb.ac.impl.TechnicalProtectionElementImpl");
        defaultImplementations.put((com.sun.identity.liberty.ws.common.jaxb.ac.ActivationLimitDurationType.class), "com.sun.identity.liberty.ws.common.jaxb.ac.impl.ActivationLimitDurationTypeImpl");
        defaultImplementations.put((com.sun.identity.liberty.ws.common.jaxb.ac.KeySharingElement.class), "com.sun.identity.liberty.ws.common.jaxb.ac.impl.KeySharingElementImpl");
        defaultImplementations.put((com.sun.identity.liberty.ws.common.jaxb.ac.MobileNetworkEndToEndEncryptionType.class), "com.sun.identity.liberty.ws.common.jaxb.ac.impl.MobileNetworkEndToEndEncryptionTypeImpl");
        defaultImplementations.put((com.sun.identity.liberty.ws.common.jaxb.ac.DeactivationCallCenterType.class), "com.sun.identity.liberty.ws.common.jaxb.ac.impl.DeactivationCallCenterTypeImpl");
        defaultImplementations.put((com.sun.identity.liberty.ws.common.jaxb.ac.SmartcardElement.class), "com.sun.identity.liberty.ws.common.jaxb.ac.impl.SmartcardElementImpl");
        defaultImplementations.put((com.sun.identity.liberty.ws.common.jaxb.ac.EmptyType.class), "com.sun.identity.liberty.ws.common.jaxb.ac.impl.EmptyTypeImpl");
        defaultImplementations.put((com.sun.identity.liberty.ws.common.jaxb.ac.TimeSyncTokenElement.class), "com.sun.identity.liberty.ws.common.jaxb.ac.impl.TimeSyncTokenElementImpl");
        defaultImplementations.put((com.sun.identity.liberty.ws.common.jaxb.ac.KeyActivationType.class), "com.sun.identity.liberty.ws.common.jaxb.ac.impl.KeyActivationTypeImpl");
        defaultImplementations.put((com.sun.identity.liberty.ws.common.jaxb.ac.ActivationLimitType.class), "com.sun.identity.liberty.ws.common.jaxb.ac.impl.ActivationLimitTypeImpl");
        defaultImplementations.put((com.sun.identity.liberty.ws.common.jaxb.ac.PasswordElement.class), "com.sun.identity.liberty.ws.common.jaxb.ac.impl.PasswordElementImpl");
        defaultImplementations.put((com.sun.identity.liberty.ws.common.jaxb.ac.KeySharingType.class), "com.sun.identity.liberty.ws.common.jaxb.ac.impl.KeySharingTypeImpl");
        defaultImplementations.put((com.sun.identity.liberty.ws.common.jaxb.ac.GoverningAgreementsType.class), "com.sun.identity.liberty.ws.common.jaxb.ac.impl.GoverningAgreementsTypeImpl");
        defaultImplementations.put((com.sun.identity.liberty.ws.common.jaxb.ac.SwitchAuditType.class), "com.sun.identity.liberty.ws.common.jaxb.ac.impl.SwitchAuditTypeImpl");
        defaultImplementations.put((com.sun.identity.liberty.ws.common.jaxb.ac.TokenType.class), "com.sun.identity.liberty.ws.common.jaxb.ac.impl.TokenTypeImpl");
        defaultImplementations.put((com.sun.identity.liberty.ws.common.jaxb.ac.GenerationType.class), "com.sun.identity.liberty.ws.common.jaxb.ac.impl.GenerationTypeImpl");
        defaultImplementations.put((com.sun.identity.liberty.ws.common.jaxb.ac.OperationalProtectionType.class), "com.sun.identity.liberty.ws.common.jaxb.ac.impl.OperationalProtectionTypeImpl");
        defaultImplementations.put((com.sun.identity.liberty.ws.common.jaxb.ac.PhysicalVerificationElement.class), "com.sun.identity.liberty.ws.common.jaxb.ac.impl.PhysicalVerificationElementImpl");
        defaultImplementations.put((com.sun.identity.liberty.ws.common.jaxb.ac.AlphabetElement.class), "com.sun.identity.liberty.ws.common.jaxb.ac.impl.AlphabetElementImpl");
        defaultImplementations.put((com.sun.identity.liberty.ws.common.jaxb.ac.MobileNetworkRadioEncryptionType.class), "com.sun.identity.liberty.ws.common.jaxb.ac.impl.MobileNetworkRadioEncryptionTypeImpl");
        defaultImplementations.put((com.sun.identity.liberty.ws.common.jaxb.ac.HTTPElement.class), "com.sun.identity.liberty.ws.common.jaxb.ac.impl.HTTPElementImpl");
        defaultImplementations.put((com.sun.identity.liberty.ws.common.jaxb.ac.AsymmetricDecryptionElement.class), "com.sun.identity.liberty.ws.common.jaxb.ac.impl.AsymmetricDecryptionElementImpl");
        defaultImplementations.put((com.sun.identity.liberty.ws.common.jaxb.ac.ZeroKnowledgeType.class), "com.sun.identity.liberty.ws.common.jaxb.ac.impl.ZeroKnowledgeTypeImpl");
        defaultImplementations.put((com.sun.identity.liberty.ws.common.jaxb.ac.SharedSecretChallengeResponseElement.class), "com.sun.identity.liberty.ws.common.jaxb.ac.impl.SharedSecretChallengeResponseElementImpl");
        defaultImplementations.put((com.sun.identity.liberty.ws.common.jaxb.ac.AlphabetType.class), "com.sun.identity.liberty.ws.common.jaxb.ac.impl.AlphabetTypeImpl");
        defaultImplementations.put((com.sun.identity.liberty.ws.common.jaxb.ac.PrivateKeyProtectionType.class), "com.sun.identity.liberty.ws.common.jaxb.ac.impl.PrivateKeyProtectionTypeImpl");
        defaultImplementations.put((com.sun.identity.liberty.ws.common.jaxb.ac.LengthType.class), "com.sun.identity.liberty.ws.common.jaxb.ac.impl.LengthTypeImpl");
        defaultImplementations.put((com.sun.identity.liberty.ws.common.jaxb.ac.MobileNetworkRadioEncryptionElement.class), "com.sun.identity.liberty.ws.common.jaxb.ac.impl.MobileNetworkRadioEncryptionElementImpl");
        defaultImplementations.put((com.sun.identity.liberty.ws.common.jaxb.ac.ExtensionType.class), "com.sun.identity.liberty.ws.common.jaxb.ac.impl.ExtensionTypeImpl");
        defaultImplementations.put((com.sun.identity.liberty.ws.common.jaxb.ac.SharedSecretDynamicPlaintextElement.class), "com.sun.identity.liberty.ws.common.jaxb.ac.impl.SharedSecretDynamicPlaintextElementImpl");
        defaultImplementations.put((com.sun.identity.liberty.ws.common.jaxb.ac.SharedSecretChallengeResponseType.class), "com.sun.identity.liberty.ws.common.jaxb.ac.impl.SharedSecretChallengeResponseTypeImpl");
        defaultImplementations.put((com.sun.identity.liberty.ws.common.jaxb.ac.ActivationLimitUsagesType.class), "com.sun.identity.liberty.ws.common.jaxb.ac.impl.ActivationLimitUsagesTypeImpl");
        defaultImplementations.put((com.sun.identity.liberty.ws.common.jaxb.ac.WrittenConsentType.class), "com.sun.identity.liberty.ws.common.jaxb.ac.impl.WrittenConsentTypeImpl");
        defaultImplementations.put((com.sun.identity.liberty.ws.common.jaxb.ac.AsymmetricKeyAgreementElement.class), "com.sun.identity.liberty.ws.common.jaxb.ac.impl.AsymmetricKeyAgreementElementImpl");
        defaultImplementations.put((com.sun.identity.liberty.ws.common.jaxb.ac.GoverningAgreementRefElement.class), "com.sun.identity.liberty.ws.common.jaxb.ac.impl.GoverningAgreementRefElementImpl");
        defaultImplementations.put((com.sun.identity.liberty.ws.common.jaxb.ac.SSLType.class), "com.sun.identity.liberty.ws.common.jaxb.ac.impl.SSLTypeImpl");
        defaultImplementations.put((com.sun.identity.liberty.ws.common.jaxb.ac.DigSigElement.class), "com.sun.identity.liberty.ws.common.jaxb.ac.impl.DigSigElementImpl");
        defaultImplementations.put((com.sun.identity.liberty.ws.common.jaxb.ac.PreviousSessionType.class), "com.sun.identity.liberty.ws.common.jaxb.ac.impl.PreviousSessionTypeImpl");
        defaultImplementations.put((com.sun.identity.liberty.ws.common.jaxb.ac.AuthenticatorTransportProtocolElement.class), "com.sun.identity.liberty.ws.common.jaxb.ac.impl.AuthenticatorTransportProtocolElementImpl");
        defaultImplementations.put((com.sun.identity.liberty.ws.common.jaxb.ac.HTTPType.class), "com.sun.identity.liberty.ws.common.jaxb.ac.impl.HTTPTypeImpl");
        defaultImplementations.put((com.sun.identity.liberty.ws.common.jaxb.ac.AuthenticatingAuthorityType.class), "com.sun.identity.liberty.ws.common.jaxb.ac.impl.AuthenticatingAuthorityTypeImpl");
        defaultImplementations.put((com.sun.identity.liberty.ws.common.jaxb.ac.PrincipalAuthenticationMechanismType.class), "com.sun.identity.liberty.ws.common.jaxb.ac.impl.PrincipalAuthenticationMechanismTypeImpl");
        defaultImplementations.put((com.sun.identity.liberty.ws.common.jaxb.ac.DeactivationCallCenterElement.class), "com.sun.identity.liberty.ws.common.jaxb.ac.impl.DeactivationCallCenterElementImpl");
        defaultImplementations.put((com.sun.identity.liberty.ws.common.jaxb.ac.SwitchAuditElement.class), "com.sun.identity.liberty.ws.common.jaxb.ac.impl.SwitchAuditElementImpl");
        rootTagMap.put(new javax.xml.namespace.QName("urn:liberty:ac:2003-08", "Length"), (com.sun.identity.liberty.ws.common.jaxb.ac.LengthElement.class));
        rootTagMap.put(new javax.xml.namespace.QName("urn:liberty:ac:2003-08", "Status"), (com.sun.identity.liberty.ws.common.jaxb.ac.StatusElement.class));
        rootTagMap.put(new javax.xml.namespace.QName("urn:liberty:ac:2003-08", "SwitchAudit"), (com.sun.identity.liberty.ws.common.jaxb.ac.SwitchAuditElement.class));
        rootTagMap.put(new javax.xml.namespace.QName("urn:liberty:ac:2003-08", "PrivateKeyProtection"), (com.sun.identity.liberty.ws.common.jaxb.ac.PrivateKeyProtectionElement.class));
        rootTagMap.put(new javax.xml.namespace.QName("urn:liberty:ac:2003-08", "Identification"), (com.sun.identity.liberty.ws.common.jaxb.ac.IdentificationElement.class));
        rootTagMap.put(new javax.xml.namespace.QName("urn:liberty:ac:2003-08", "AsymmetricKeyAgreement"), (com.sun.identity.liberty.ws.common.jaxb.ac.AsymmetricKeyAgreementElement.class));
        rootTagMap.put(new javax.xml.namespace.QName("urn:liberty:ac:2003-08", "Token"), (com.sun.identity.liberty.ws.common.jaxb.ac.TokenElement.class));
        rootTagMap.put(new javax.xml.namespace.QName("urn:liberty:ac:2003-08", "Generation"), (com.sun.identity.liberty.ws.common.jaxb.ac.GenerationElement.class));
        rootTagMap.put(new javax.xml.namespace.QName("urn:liberty:ac:2003-08", "SSL"), (com.sun.identity.liberty.ws.common.jaxb.ac.SSLElement.class));
        rootTagMap.put(new javax.xml.namespace.QName("urn:liberty:ac:2003-08", "ActivationLimitSession"), (com.sun.identity.liberty.ws.common.jaxb.ac.ActivationLimitSessionElement.class));
        rootTagMap.put(new javax.xml.namespace.QName("urn:liberty:ac:2003-08", "ActivationLimitDuration"), (com.sun.identity.liberty.ws.common.jaxb.ac.ActivationLimitDurationElement.class));
        rootTagMap.put(new javax.xml.namespace.QName("urn:liberty:ac:2003-08", "MobileNetworkRadioEncryption"), (com.sun.identity.liberty.ws.common.jaxb.ac.MobileNetworkRadioEncryptionElement.class));
        rootTagMap.put(new javax.xml.namespace.QName("urn:liberty:ac:2003-08", "DigSig"), (com.sun.identity.liberty.ws.common.jaxb.ac.DigSigElement.class));
        rootTagMap.put(new javax.xml.namespace.QName("urn:liberty:ac:2003-08", "TimeSyncToken"), (com.sun.identity.liberty.ws.common.jaxb.ac.TimeSyncTokenElement.class));
        rootTagMap.put(new javax.xml.namespace.QName("urn:liberty:ac:2003-08", "ZeroKnowledge"), (com.sun.identity.liberty.ws.common.jaxb.ac.ZeroKnowledgeElement.class));
        rootTagMap.put(new javax.xml.namespace.QName("urn:liberty:ac:2003-08", "ActivationPin"), (com.sun.identity.liberty.ws.common.jaxb.ac.ActivationPinElement.class));
        rootTagMap.put(new javax.xml.namespace.QName("urn:liberty:ac:2003-08", "DeactivationCallCenter"), (com.sun.identity.liberty.ws.common.jaxb.ac.DeactivationCallCenterElement.class));
        rootTagMap.put(new javax.xml.namespace.QName("urn:liberty:ac:2003-08", "MobileNetworkNoEncryption"), (com.sun.identity.liberty.ws.common.jaxb.ac.MobileNetworkNoEncryptionElement.class));
        rootTagMap.put(new javax.xml.namespace.QName("urn:liberty:ac:2003-08", "AuthenticationContextStatement"), (com.sun.identity.liberty.ws.common.jaxb.ac.AuthenticationContextStatementElement.class));
        rootTagMap.put(new javax.xml.namespace.QName("urn:liberty:ac:2003-08", "Password"), (com.sun.identity.liberty.ws.common.jaxb.ac.PasswordElement.class));
        rootTagMap.put(new javax.xml.namespace.QName("urn:liberty:ac:2003-08", "AuthenticatorTransportProtocol"), (com.sun.identity.liberty.ws.common.jaxb.ac.AuthenticatorTransportProtocolElement.class));
        rootTagMap.put(new javax.xml.namespace.QName("urn:liberty:ac:2003-08", "AsymmetricDecryption"), (com.sun.identity.liberty.ws.common.jaxb.ac.AsymmetricDecryptionElement.class));
        rootTagMap.put(new javax.xml.namespace.QName("urn:liberty:ac:2003-08", "IPAddress"), (com.sun.identity.liberty.ws.common.jaxb.ac.IPAddressElement.class));
        rootTagMap.put(new javax.xml.namespace.QName("urn:liberty:ac:2003-08", "ResumeSession"), (com.sun.identity.liberty.ws.common.jaxb.ac.ResumeSessionElement.class));
        rootTagMap.put(new javax.xml.namespace.QName("urn:liberty:ac:2003-08", "SharedSecretDynamicPlaintext"), (com.sun.identity.liberty.ws.common.jaxb.ac.SharedSecretDynamicPlaintextElement.class));
        rootTagMap.put(new javax.xml.namespace.QName("urn:liberty:ac:2003-08", "SharedSecretChallengeResponse"), (com.sun.identity.liberty.ws.common.jaxb.ac.SharedSecretChallengeResponseElement.class));
        rootTagMap.put(new javax.xml.namespace.QName("urn:liberty:ac:2003-08", "WTLS"), (com.sun.identity.liberty.ws.common.jaxb.ac.WTLSElement.class));
        rootTagMap.put(new javax.xml.namespace.QName("urn:liberty:ac:2003-08", "KeySharing"), (com.sun.identity.liberty.ws.common.jaxb.ac.KeySharingElement.class));
        rootTagMap.put(new javax.xml.namespace.QName("urn:liberty:ac:2003-08", "SecretKeyProtection"), (com.sun.identity.liberty.ws.common.jaxb.ac.SecretKeyProtectionElement.class));
        rootTagMap.put(new javax.xml.namespace.QName("urn:liberty:ac:2003-08", "ActivationLimitUsages"), (com.sun.identity.liberty.ws.common.jaxb.ac.ActivationLimitUsagesElement.class));
        rootTagMap.put(new javax.xml.namespace.QName("urn:liberty:ac:2003-08", "Smartcard"), (com.sun.identity.liberty.ws.common.jaxb.ac.SmartcardElement.class));
        rootTagMap.put(new javax.xml.namespace.QName("urn:liberty:ac:2003-08", "WrittenConsent"), (com.sun.identity.liberty.ws.common.jaxb.ac.WrittenConsentElement.class));
        rootTagMap.put(new javax.xml.namespace.QName("urn:liberty:ac:2003-08", "GoverningAgreements"), (com.sun.identity.liberty.ws.common.jaxb.ac.GoverningAgreementsElement.class));
        rootTagMap.put(new javax.xml.namespace.QName("urn:liberty:ac:2003-08", "GoverningAgreementRef"), (com.sun.identity.liberty.ws.common.jaxb.ac.GoverningAgreementRefElement.class));
        rootTagMap.put(new javax.xml.namespace.QName("urn:liberty:ac:2003-08", "PhysicalVerification"), (com.sun.identity.liberty.ws.common.jaxb.ac.PhysicalVerificationElement.class));
        rootTagMap.put(new javax.xml.namespace.QName("urn:liberty:ac:2003-08", "OperationalProtection"), (com.sun.identity.liberty.ws.common.jaxb.ac.OperationalProtectionElement.class));
        rootTagMap.put(new javax.xml.namespace.QName("urn:liberty:ac:2003-08", "Alphabet"), (com.sun.identity.liberty.ws.common.jaxb.ac.AlphabetElement.class));
        rootTagMap.put(new javax.xml.namespace.QName("urn:liberty:ac:2003-08", "AuthenticationMethod"), (com.sun.identity.liberty.ws.common.jaxb.ac.AuthenticationMethodElement.class));
        rootTagMap.put(new javax.xml.namespace.QName("urn:liberty:ac:2003-08", "PrincipalAuthenticationMechanism"), (com.sun.identity.liberty.ws.common.jaxb.ac.PrincipalAuthenticationMechanismElement.class));
        rootTagMap.put(new javax.xml.namespace.QName("urn:liberty:ac:2003-08", "MobileNetworkEndToEndEncryption"), (com.sun.identity.liberty.ws.common.jaxb.ac.MobileNetworkEndToEndEncryptionElement.class));
        rootTagMap.put(new javax.xml.namespace.QName("urn:liberty:ac:2003-08", "ActivationLimit"), (com.sun.identity.liberty.ws.common.jaxb.ac.ActivationLimitElement.class));
        rootTagMap.put(new javax.xml.namespace.QName("urn:liberty:ac:2003-08", "IPSec"), (com.sun.identity.liberty.ws.common.jaxb.ac.IPSecElement.class));
        rootTagMap.put(new javax.xml.namespace.QName("urn:liberty:ac:2003-08", "Extension"), (com.sun.identity.liberty.ws.common.jaxb.ac.ExtensionElement.class));
        rootTagMap.put(new javax.xml.namespace.QName("urn:liberty:ac:2003-08", "PreviousSession"), (com.sun.identity.liberty.ws.common.jaxb.ac.PreviousSessionElement.class));
        rootTagMap.put(new javax.xml.namespace.QName("urn:liberty:ac:2003-08", "Authenticator"), (com.sun.identity.liberty.ws.common.jaxb.ac.AuthenticatorElement.class));
        rootTagMap.put(new javax.xml.namespace.QName("urn:liberty:ac:2003-08", "AuthenticatingAuthority"), (com.sun.identity.liberty.ws.common.jaxb.ac.AuthenticatingAuthorityElement.class));
        rootTagMap.put(new javax.xml.namespace.QName("urn:liberty:ac:2003-08", "KeyActivation"), (com.sun.identity.liberty.ws.common.jaxb.ac.KeyActivationElement.class));
        rootTagMap.put(new javax.xml.namespace.QName("urn:liberty:ac:2003-08", "KeyStorage"), (com.sun.identity.liberty.ws.common.jaxb.ac.KeyStorageElement.class));
        rootTagMap.put(new javax.xml.namespace.QName("urn:liberty:ac:2003-08", "HTTP"), (com.sun.identity.liberty.ws.common.jaxb.ac.HTTPElement.class));
        rootTagMap.put(new javax.xml.namespace.QName("urn:liberty:ac:2003-08", "SecurityAudit"), (com.sun.identity.liberty.ws.common.jaxb.ac.SecurityAuditElement.class));
        rootTagMap.put(new javax.xml.namespace.QName("urn:liberty:ac:2003-08", "TechnicalProtection"), (com.sun.identity.liberty.ws.common.jaxb.ac.TechnicalProtectionElement.class));
    }

    /**
     * Create a new ObjectFactory that can be used to create new instances of schema derived classes for package: com.sun.identity.liberty.ws.common.jaxb.ac
     * 
     */
    public ObjectFactory() {
        super(grammarInfo);
    }

    /**
     * Create an instance of the specified Java content interface.
     * 
     * @param javaContentInterface
     *     the Class object of the javacontent interface to instantiate
     * @return
     *     a new instance
     * @throws JAXBException
     *     if an error occurs
     */
    public java.lang.Object newInstance(java.lang.Class javaContentInterface)
        throws javax.xml.bind.JAXBException
    {
        return super.newInstance(javaContentInterface);
    }

    /**
     * Get the specified property. This method can only be
     * used to get provider specific properties.
     * Attempting to get an undefined property will result
     * in a PropertyException being thrown.
     * 
     * @param name
     *     the name of the property to retrieve
     * @return
     *     the value of the requested property
     * @throws PropertyException
     *     when there is an error retrieving the given property or value
     */
    public java.lang.Object getProperty(java.lang.String name)
        throws javax.xml.bind.PropertyException
    {
        return super.getProperty(name);
    }

    /**
     * Set the specified property. This method can only be
     * used to set provider specific properties.
     * Attempting to set an undefined property will result
     * in a PropertyException being thrown.
     * 
     * @param name
     *     the name of the property to retrieve
     * @param value
     *     the value of the property to be set
     * @throws PropertyException
     *     when there is an error processing the given property or value
     */
    public void setProperty(java.lang.String name, java.lang.Object value)
        throws javax.xml.bind.PropertyException
    {
        super.setProperty(name, value);
    }

    /**
     * Create an instance of PrincipalAuthenticationMechanismElement
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public com.sun.identity.liberty.ws.common.jaxb.ac.PrincipalAuthenticationMechanismElement createPrincipalAuthenticationMechanismElement()
        throws javax.xml.bind.JAXBException
    {
        return new com.sun.identity.liberty.ws.common.jaxb.ac.impl.PrincipalAuthenticationMechanismElementImpl();
    }

    /**
     * Create an instance of AuthenticatorType
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public com.sun.identity.liberty.ws.common.jaxb.ac.AuthenticatorType createAuthenticatorType()
        throws javax.xml.bind.JAXBException
    {
        return new com.sun.identity.liberty.ws.common.jaxb.ac.impl.AuthenticatorTypeImpl();
    }

    /**
     * Create an instance of ActivationLimitDurationElement
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public com.sun.identity.liberty.ws.common.jaxb.ac.ActivationLimitDurationElement createActivationLimitDurationElement()
        throws javax.xml.bind.JAXBException
    {
        return new com.sun.identity.liberty.ws.common.jaxb.ac.impl.ActivationLimitDurationElementImpl();
    }

    /**
     * Create an instance of AuthenticatorTransportProtocolType
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public com.sun.identity.liberty.ws.common.jaxb.ac.AuthenticatorTransportProtocolType createAuthenticatorTransportProtocolType()
        throws javax.xml.bind.JAXBException
    {
        return new com.sun.identity.liberty.ws.common.jaxb.ac.impl.AuthenticatorTransportProtocolTypeImpl();
    }

    /**
     * Create an instance of AuthenticationMethodType
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public com.sun.identity.liberty.ws.common.jaxb.ac.AuthenticationMethodType createAuthenticationMethodType()
        throws javax.xml.bind.JAXBException
    {
        return new com.sun.identity.liberty.ws.common.jaxb.ac.impl.AuthenticationMethodTypeImpl();
    }

    /**
     * Create an instance of KeyActivationElement
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public com.sun.identity.liberty.ws.common.jaxb.ac.KeyActivationElement createKeyActivationElement()
        throws javax.xml.bind.JAXBException
    {
        return new com.sun.identity.liberty.ws.common.jaxb.ac.impl.KeyActivationElementImpl();
    }

    /**
     * Create an instance of MobileNetworkNoEncryptionType
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public com.sun.identity.liberty.ws.common.jaxb.ac.MobileNetworkNoEncryptionType createMobileNetworkNoEncryptionType()
        throws javax.xml.bind.JAXBException
    {
        return new com.sun.identity.liberty.ws.common.jaxb.ac.impl.MobileNetworkNoEncryptionTypeImpl();
    }

    /**
     * Create an instance of SecurityAuditType
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public com.sun.identity.liberty.ws.common.jaxb.ac.SecurityAuditType createSecurityAuditType()
        throws javax.xml.bind.JAXBException
    {
        return new com.sun.identity.liberty.ws.common.jaxb.ac.impl.SecurityAuditTypeImpl();
    }

    /**
     * Create an instance of KeyStorageType
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public com.sun.identity.liberty.ws.common.jaxb.ac.KeyStorageType createKeyStorageType()
        throws javax.xml.bind.JAXBException
    {
        return new com.sun.identity.liberty.ws.common.jaxb.ac.impl.KeyStorageTypeImpl();
    }

    /**
     * Create an instance of StatusType
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public com.sun.identity.liberty.ws.common.jaxb.ac.StatusType createStatusType()
        throws javax.xml.bind.JAXBException
    {
        return new com.sun.identity.liberty.ws.common.jaxb.ac.impl.StatusTypeImpl();
    }

    /**
     * Create an instance of PrivateKeyProtectionElement
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public com.sun.identity.liberty.ws.common.jaxb.ac.PrivateKeyProtectionElement createPrivateKeyProtectionElement()
        throws javax.xml.bind.JAXBException
    {
        return new com.sun.identity.liberty.ws.common.jaxb.ac.impl.PrivateKeyProtectionElementImpl();
    }

    /**
     * Create an instance of IdentificationElement
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public com.sun.identity.liberty.ws.common.jaxb.ac.IdentificationElement createIdentificationElement()
        throws javax.xml.bind.JAXBException
    {
        return new com.sun.identity.liberty.ws.common.jaxb.ac.impl.IdentificationElementImpl();
    }

    /**
     * Create an instance of SharedSecretDynamicPlaintextType
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public com.sun.identity.liberty.ws.common.jaxb.ac.SharedSecretDynamicPlaintextType createSharedSecretDynamicPlaintextType()
        throws javax.xml.bind.JAXBException
    {
        return new com.sun.identity.liberty.ws.common.jaxb.ac.impl.SharedSecretDynamicPlaintextTypeImpl();
    }

    /**
     * Create an instance of AuthenticationMethodElement
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public com.sun.identity.liberty.ws.common.jaxb.ac.AuthenticationMethodElement createAuthenticationMethodElement()
        throws javax.xml.bind.JAXBException
    {
        return new com.sun.identity.liberty.ws.common.jaxb.ac.impl.AuthenticationMethodElementImpl();
    }

    /**
     * Create an instance of ResumeSessionType
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public com.sun.identity.liberty.ws.common.jaxb.ac.ResumeSessionType createResumeSessionType()
        throws javax.xml.bind.JAXBException
    {
        return new com.sun.identity.liberty.ws.common.jaxb.ac.impl.ResumeSessionTypeImpl();
    }

    /**
     * Create an instance of ActivationPinType
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public com.sun.identity.liberty.ws.common.jaxb.ac.ActivationPinType createActivationPinType()
        throws javax.xml.bind.JAXBException
    {
        return new com.sun.identity.liberty.ws.common.jaxb.ac.impl.ActivationPinTypeImpl();
    }

    /**
     * Create an instance of GoverningAgreementsElement
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public com.sun.identity.liberty.ws.common.jaxb.ac.GoverningAgreementsElement createGoverningAgreementsElement()
        throws javax.xml.bind.JAXBException
    {
        return new com.sun.identity.liberty.ws.common.jaxb.ac.impl.GoverningAgreementsElementImpl();
    }

    /**
     * Create an instance of ZeroKnowledgeElement
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public com.sun.identity.liberty.ws.common.jaxb.ac.ZeroKnowledgeElement createZeroKnowledgeElement()
        throws javax.xml.bind.JAXBException
    {
        return new com.sun.identity.liberty.ws.common.jaxb.ac.impl.ZeroKnowledgeElementImpl();
    }

    /**
     * Create an instance of DigSigType
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public com.sun.identity.liberty.ws.common.jaxb.ac.DigSigType createDigSigType()
        throws javax.xml.bind.JAXBException
    {
        return new com.sun.identity.liberty.ws.common.jaxb.ac.impl.DigSigTypeImpl();
    }

    /**
     * Create an instance of PreviousSessionElement
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public com.sun.identity.liberty.ws.common.jaxb.ac.PreviousSessionElement createPreviousSessionElement()
        throws javax.xml.bind.JAXBException
    {
        return new com.sun.identity.liberty.ws.common.jaxb.ac.impl.PreviousSessionElementImpl();
    }

    /**
     * Create an instance of TechnicalProtectionType
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public com.sun.identity.liberty.ws.common.jaxb.ac.TechnicalProtectionType createTechnicalProtectionType()
        throws javax.xml.bind.JAXBException
    {
        return new com.sun.identity.liberty.ws.common.jaxb.ac.impl.TechnicalProtectionTypeImpl();
    }

    /**
     * Create an instance of AsymmetricDecryptionType
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public com.sun.identity.liberty.ws.common.jaxb.ac.AsymmetricDecryptionType createAsymmetricDecryptionType()
        throws javax.xml.bind.JAXBException
    {
        return new com.sun.identity.liberty.ws.common.jaxb.ac.impl.AsymmetricDecryptionTypeImpl();
    }

    /**
     * Create an instance of AsymmetricKeyAgreementType
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public com.sun.identity.liberty.ws.common.jaxb.ac.AsymmetricKeyAgreementType createAsymmetricKeyAgreementType()
        throws javax.xml.bind.JAXBException
    {
        return new com.sun.identity.liberty.ws.common.jaxb.ac.impl.AsymmetricKeyAgreementTypeImpl();
    }

    /**
     * Create an instance of SSLElement
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public com.sun.identity.liberty.ws.common.jaxb.ac.SSLElement createSSLElement()
        throws javax.xml.bind.JAXBException
    {
        return new com.sun.identity.liberty.ws.common.jaxb.ac.impl.SSLElementImpl();
    }

    /**
     * Create an instance of WTLSType
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public com.sun.identity.liberty.ws.common.jaxb.ac.WTLSType createWTLSType()
        throws javax.xml.bind.JAXBException
    {
        return new com.sun.identity.liberty.ws.common.jaxb.ac.impl.WTLSTypeImpl();
    }

    /**
     * Create an instance of WrittenConsentElement
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public com.sun.identity.liberty.ws.common.jaxb.ac.WrittenConsentElement createWrittenConsentElement()
        throws javax.xml.bind.JAXBException
    {
        return new com.sun.identity.liberty.ws.common.jaxb.ac.impl.WrittenConsentElementImpl();
    }

    /**
     * Create an instance of SmartcardType
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public com.sun.identity.liberty.ws.common.jaxb.ac.SmartcardType createSmartcardType()
        throws javax.xml.bind.JAXBException
    {
        return new com.sun.identity.liberty.ws.common.jaxb.ac.impl.SmartcardTypeImpl();
    }

    /**
     * Create an instance of MobileNetworkNoEncryptionElement
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public com.sun.identity.liberty.ws.common.jaxb.ac.MobileNetworkNoEncryptionElement createMobileNetworkNoEncryptionElement()
        throws javax.xml.bind.JAXBException
    {
        return new com.sun.identity.liberty.ws.common.jaxb.ac.impl.MobileNetworkNoEncryptionElementImpl();
    }

    /**
     * Create an instance of IdentificationType
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public com.sun.identity.liberty.ws.common.jaxb.ac.IdentificationType createIdentificationType()
        throws javax.xml.bind.JAXBException
    {
        return new com.sun.identity.liberty.ws.common.jaxb.ac.impl.IdentificationTypeImpl();
    }

    /**
     * Create an instance of GenerationElement
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public com.sun.identity.liberty.ws.common.jaxb.ac.GenerationElement createGenerationElement()
        throws javax.xml.bind.JAXBException
    {
        return new com.sun.identity.liberty.ws.common.jaxb.ac.impl.GenerationElementImpl();
    }

    /**
     * Create an instance of LengthElement
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public com.sun.identity.liberty.ws.common.jaxb.ac.LengthElement createLengthElement()
        throws javax.xml.bind.JAXBException
    {
        return new com.sun.identity.liberty.ws.common.jaxb.ac.impl.LengthElementImpl();
    }

    /**
     * Create an instance of PhysicalVerificationType
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public com.sun.identity.liberty.ws.common.jaxb.ac.PhysicalVerificationType createPhysicalVerificationType()
        throws javax.xml.bind.JAXBException
    {
        return new com.sun.identity.liberty.ws.common.jaxb.ac.impl.PhysicalVerificationTypeImpl();
    }

    /**
     * Create an instance of GoverningAgreementRefType
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public com.sun.identity.liberty.ws.common.jaxb.ac.GoverningAgreementRefType createGoverningAgreementRefType()
        throws javax.xml.bind.JAXBException
    {
        return new com.sun.identity.liberty.ws.common.jaxb.ac.impl.GoverningAgreementRefTypeImpl();
    }

    /**
     * Create an instance of IPAddressType
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public com.sun.identity.liberty.ws.common.jaxb.ac.IPAddressType createIPAddressType()
        throws javax.xml.bind.JAXBException
    {
        return new com.sun.identity.liberty.ws.common.jaxb.ac.impl.IPAddressTypeImpl();
    }

    /**
     * Create an instance of ActivationLimitSessionElement
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public com.sun.identity.liberty.ws.common.jaxb.ac.ActivationLimitSessionElement createActivationLimitSessionElement()
        throws javax.xml.bind.JAXBException
    {
        return new com.sun.identity.liberty.ws.common.jaxb.ac.impl.ActivationLimitSessionElementImpl();
    }

    /**
     * Create an instance of StatusElement
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public com.sun.identity.liberty.ws.common.jaxb.ac.StatusElement createStatusElement()
        throws javax.xml.bind.JAXBException
    {
        return new com.sun.identity.liberty.ws.common.jaxb.ac.impl.StatusElementImpl();
    }

    /**
     * Create an instance of SecretKeyProtectionElement
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public com.sun.identity.liberty.ws.common.jaxb.ac.SecretKeyProtectionElement createSecretKeyProtectionElement()
        throws javax.xml.bind.JAXBException
    {
        return new com.sun.identity.liberty.ws.common.jaxb.ac.impl.SecretKeyProtectionElementImpl();
    }

    /**
     * Create an instance of IPAddressElement
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public com.sun.identity.liberty.ws.common.jaxb.ac.IPAddressElement createIPAddressElement()
        throws javax.xml.bind.JAXBException
    {
        return new com.sun.identity.liberty.ws.common.jaxb.ac.impl.IPAddressElementImpl();
    }

    /**
     * Create an instance of IPSecType
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public com.sun.identity.liberty.ws.common.jaxb.ac.IPSecType createIPSecType()
        throws javax.xml.bind.JAXBException
    {
        return new com.sun.identity.liberty.ws.common.jaxb.ac.impl.IPSecTypeImpl();
    }

    /**
     * Create an instance of ActivationPinElement
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public com.sun.identity.liberty.ws.common.jaxb.ac.ActivationPinElement createActivationPinElement()
        throws javax.xml.bind.JAXBException
    {
        return new com.sun.identity.liberty.ws.common.jaxb.ac.impl.ActivationPinElementImpl();
    }

    /**
     * Create an instance of ActivationLimitElement
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public com.sun.identity.liberty.ws.common.jaxb.ac.ActivationLimitElement createActivationLimitElement()
        throws javax.xml.bind.JAXBException
    {
        return new com.sun.identity.liberty.ws.common.jaxb.ac.impl.ActivationLimitElementImpl();
    }

    /**
     * Create an instance of TokenElement
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public com.sun.identity.liberty.ws.common.jaxb.ac.TokenElement createTokenElement()
        throws javax.xml.bind.JAXBException
    {
        return new com.sun.identity.liberty.ws.common.jaxb.ac.impl.TokenElementImpl();
    }

    /**
     * Create an instance of ActivationLimitUsagesElement
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public com.sun.identity.liberty.ws.common.jaxb.ac.ActivationLimitUsagesElement createActivationLimitUsagesElement()
        throws javax.xml.bind.JAXBException
    {
        return new com.sun.identity.liberty.ws.common.jaxb.ac.impl.ActivationLimitUsagesElementImpl();
    }

    /**
     * Create an instance of PasswordType
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public com.sun.identity.liberty.ws.common.jaxb.ac.PasswordType createPasswordType()
        throws javax.xml.bind.JAXBException
    {
        return new com.sun.identity.liberty.ws.common.jaxb.ac.impl.PasswordTypeImpl();
    }

    /**
     * Create an instance of WTLSElement
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public com.sun.identity.liberty.ws.common.jaxb.ac.WTLSElement createWTLSElement()
        throws javax.xml.bind.JAXBException
    {
        return new com.sun.identity.liberty.ws.common.jaxb.ac.impl.WTLSElementImpl();
    }

    /**
     * Create an instance of TimeSyncTokenType
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public com.sun.identity.liberty.ws.common.jaxb.ac.TimeSyncTokenType createTimeSyncTokenType()
        throws javax.xml.bind.JAXBException
    {
        return new com.sun.identity.liberty.ws.common.jaxb.ac.impl.TimeSyncTokenTypeImpl();
    }

    /**
     * Create an instance of IPSecElement
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public com.sun.identity.liberty.ws.common.jaxb.ac.IPSecElement createIPSecElement()
        throws javax.xml.bind.JAXBException
    {
        return new com.sun.identity.liberty.ws.common.jaxb.ac.impl.IPSecElementImpl();
    }

    /**
     * Create an instance of ResumeSessionElement
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public com.sun.identity.liberty.ws.common.jaxb.ac.ResumeSessionElement createResumeSessionElement()
        throws javax.xml.bind.JAXBException
    {
        return new com.sun.identity.liberty.ws.common.jaxb.ac.impl.ResumeSessionElementImpl();
    }

    /**
     * Create an instance of MobileNetworkEndToEndEncryptionElement
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public com.sun.identity.liberty.ws.common.jaxb.ac.MobileNetworkEndToEndEncryptionElement createMobileNetworkEndToEndEncryptionElement()
        throws javax.xml.bind.JAXBException
    {
        return new com.sun.identity.liberty.ws.common.jaxb.ac.impl.MobileNetworkEndToEndEncryptionElementImpl();
    }

    /**
     * Create an instance of SecurityAuditElement
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public com.sun.identity.liberty.ws.common.jaxb.ac.SecurityAuditElement createSecurityAuditElement()
        throws javax.xml.bind.JAXBException
    {
        return new com.sun.identity.liberty.ws.common.jaxb.ac.impl.SecurityAuditElementImpl();
    }

    /**
     * Create an instance of AuthenticationContextStatementType
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public com.sun.identity.liberty.ws.common.jaxb.ac.AuthenticationContextStatementType createAuthenticationContextStatementType()
        throws javax.xml.bind.JAXBException
    {
        return new com.sun.identity.liberty.ws.common.jaxb.ac.impl.AuthenticationContextStatementTypeImpl();
    }

    /**
     * Create an instance of OperationalProtectionElement
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public com.sun.identity.liberty.ws.common.jaxb.ac.OperationalProtectionElement createOperationalProtectionElement()
        throws javax.xml.bind.JAXBException
    {
        return new com.sun.identity.liberty.ws.common.jaxb.ac.impl.OperationalProtectionElementImpl();
    }

    /**
     * Create an instance of AuthenticationContextStatementElement
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public com.sun.identity.liberty.ws.common.jaxb.ac.AuthenticationContextStatementElement createAuthenticationContextStatementElement()
        throws javax.xml.bind.JAXBException
    {
        return new com.sun.identity.liberty.ws.common.jaxb.ac.impl.AuthenticationContextStatementElementImpl();
    }

    /**
     * Create an instance of ExtensionElement
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public com.sun.identity.liberty.ws.common.jaxb.ac.ExtensionElement createExtensionElement()
        throws javax.xml.bind.JAXBException
    {
        return new com.sun.identity.liberty.ws.common.jaxb.ac.impl.ExtensionElementImpl();
    }

    /**
     * Create an instance of AuthenticatorElement
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public com.sun.identity.liberty.ws.common.jaxb.ac.AuthenticatorElement createAuthenticatorElement()
        throws javax.xml.bind.JAXBException
    {
        return new com.sun.identity.liberty.ws.common.jaxb.ac.impl.AuthenticatorElementImpl();
    }

    /**
     * Create an instance of SecretKeyProtectionType
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public com.sun.identity.liberty.ws.common.jaxb.ac.SecretKeyProtectionType createSecretKeyProtectionType()
        throws javax.xml.bind.JAXBException
    {
        return new com.sun.identity.liberty.ws.common.jaxb.ac.impl.SecretKeyProtectionTypeImpl();
    }

    /**
     * Create an instance of AuthenticatingAuthorityElement
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public com.sun.identity.liberty.ws.common.jaxb.ac.AuthenticatingAuthorityElement createAuthenticatingAuthorityElement()
        throws javax.xml.bind.JAXBException
    {
        return new com.sun.identity.liberty.ws.common.jaxb.ac.impl.AuthenticatingAuthorityElementImpl();
    }

    /**
     * Create an instance of ActivationLimitSessionType
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public com.sun.identity.liberty.ws.common.jaxb.ac.ActivationLimitSessionType createActivationLimitSessionType()
        throws javax.xml.bind.JAXBException
    {
        return new com.sun.identity.liberty.ws.common.jaxb.ac.impl.ActivationLimitSessionTypeImpl();
    }

    /**
     * Create an instance of KeyStorageElement
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public com.sun.identity.liberty.ws.common.jaxb.ac.KeyStorageElement createKeyStorageElement()
        throws javax.xml.bind.JAXBException
    {
        return new com.sun.identity.liberty.ws.common.jaxb.ac.impl.KeyStorageElementImpl();
    }

    /**
     * Create an instance of TechnicalProtectionElement
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public com.sun.identity.liberty.ws.common.jaxb.ac.TechnicalProtectionElement createTechnicalProtectionElement()
        throws javax.xml.bind.JAXBException
    {
        return new com.sun.identity.liberty.ws.common.jaxb.ac.impl.TechnicalProtectionElementImpl();
    }

    /**
     * Create an instance of ActivationLimitDurationType
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public com.sun.identity.liberty.ws.common.jaxb.ac.ActivationLimitDurationType createActivationLimitDurationType()
        throws javax.xml.bind.JAXBException
    {
        return new com.sun.identity.liberty.ws.common.jaxb.ac.impl.ActivationLimitDurationTypeImpl();
    }

    /**
     * Create an instance of KeySharingElement
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public com.sun.identity.liberty.ws.common.jaxb.ac.KeySharingElement createKeySharingElement()
        throws javax.xml.bind.JAXBException
    {
        return new com.sun.identity.liberty.ws.common.jaxb.ac.impl.KeySharingElementImpl();
    }

    /**
     * Create an instance of MobileNetworkEndToEndEncryptionType
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public com.sun.identity.liberty.ws.common.jaxb.ac.MobileNetworkEndToEndEncryptionType createMobileNetworkEndToEndEncryptionType()
        throws javax.xml.bind.JAXBException
    {
        return new com.sun.identity.liberty.ws.common.jaxb.ac.impl.MobileNetworkEndToEndEncryptionTypeImpl();
    }

    /**
     * Create an instance of DeactivationCallCenterType
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public com.sun.identity.liberty.ws.common.jaxb.ac.DeactivationCallCenterType createDeactivationCallCenterType()
        throws javax.xml.bind.JAXBException
    {
        return new com.sun.identity.liberty.ws.common.jaxb.ac.impl.DeactivationCallCenterTypeImpl();
    }

    /**
     * Create an instance of SmartcardElement
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public com.sun.identity.liberty.ws.common.jaxb.ac.SmartcardElement createSmartcardElement()
        throws javax.xml.bind.JAXBException
    {
        return new com.sun.identity.liberty.ws.common.jaxb.ac.impl.SmartcardElementImpl();
    }

    /**
     * Create an instance of EmptyType
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public com.sun.identity.liberty.ws.common.jaxb.ac.EmptyType createEmptyType()
        throws javax.xml.bind.JAXBException
    {
        return new com.sun.identity.liberty.ws.common.jaxb.ac.impl.EmptyTypeImpl();
    }

    /**
     * Create an instance of TimeSyncTokenElement
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public com.sun.identity.liberty.ws.common.jaxb.ac.TimeSyncTokenElement createTimeSyncTokenElement()
        throws javax.xml.bind.JAXBException
    {
        return new com.sun.identity.liberty.ws.common.jaxb.ac.impl.TimeSyncTokenElementImpl();
    }

    /**
     * Create an instance of KeyActivationType
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public com.sun.identity.liberty.ws.common.jaxb.ac.KeyActivationType createKeyActivationType()
        throws javax.xml.bind.JAXBException
    {
        return new com.sun.identity.liberty.ws.common.jaxb.ac.impl.KeyActivationTypeImpl();
    }

    /**
     * Create an instance of ActivationLimitType
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public com.sun.identity.liberty.ws.common.jaxb.ac.ActivationLimitType createActivationLimitType()
        throws javax.xml.bind.JAXBException
    {
        return new com.sun.identity.liberty.ws.common.jaxb.ac.impl.ActivationLimitTypeImpl();
    }

    /**
     * Create an instance of PasswordElement
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public com.sun.identity.liberty.ws.common.jaxb.ac.PasswordElement createPasswordElement()
        throws javax.xml.bind.JAXBException
    {
        return new com.sun.identity.liberty.ws.common.jaxb.ac.impl.PasswordElementImpl();
    }

    /**
     * Create an instance of KeySharingType
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public com.sun.identity.liberty.ws.common.jaxb.ac.KeySharingType createKeySharingType()
        throws javax.xml.bind.JAXBException
    {
        return new com.sun.identity.liberty.ws.common.jaxb.ac.impl.KeySharingTypeImpl();
    }

    /**
     * Create an instance of GoverningAgreementsType
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public com.sun.identity.liberty.ws.common.jaxb.ac.GoverningAgreementsType createGoverningAgreementsType()
        throws javax.xml.bind.JAXBException
    {
        return new com.sun.identity.liberty.ws.common.jaxb.ac.impl.GoverningAgreementsTypeImpl();
    }

    /**
     * Create an instance of SwitchAuditType
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public com.sun.identity.liberty.ws.common.jaxb.ac.SwitchAuditType createSwitchAuditType()
        throws javax.xml.bind.JAXBException
    {
        return new com.sun.identity.liberty.ws.common.jaxb.ac.impl.SwitchAuditTypeImpl();
    }

    /**
     * Create an instance of TokenType
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public com.sun.identity.liberty.ws.common.jaxb.ac.TokenType createTokenType()
        throws javax.xml.bind.JAXBException
    {
        return new com.sun.identity.liberty.ws.common.jaxb.ac.impl.TokenTypeImpl();
    }

    /**
     * Create an instance of GenerationType
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public com.sun.identity.liberty.ws.common.jaxb.ac.GenerationType createGenerationType()
        throws javax.xml.bind.JAXBException
    {
        return new com.sun.identity.liberty.ws.common.jaxb.ac.impl.GenerationTypeImpl();
    }

    /**
     * Create an instance of OperationalProtectionType
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public com.sun.identity.liberty.ws.common.jaxb.ac.OperationalProtectionType createOperationalProtectionType()
        throws javax.xml.bind.JAXBException
    {
        return new com.sun.identity.liberty.ws.common.jaxb.ac.impl.OperationalProtectionTypeImpl();
    }

    /**
     * Create an instance of PhysicalVerificationElement
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public com.sun.identity.liberty.ws.common.jaxb.ac.PhysicalVerificationElement createPhysicalVerificationElement()
        throws javax.xml.bind.JAXBException
    {
        return new com.sun.identity.liberty.ws.common.jaxb.ac.impl.PhysicalVerificationElementImpl();
    }

    /**
     * Create an instance of AlphabetElement
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public com.sun.identity.liberty.ws.common.jaxb.ac.AlphabetElement createAlphabetElement()
        throws javax.xml.bind.JAXBException
    {
        return new com.sun.identity.liberty.ws.common.jaxb.ac.impl.AlphabetElementImpl();
    }

    /**
     * Create an instance of MobileNetworkRadioEncryptionType
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public com.sun.identity.liberty.ws.common.jaxb.ac.MobileNetworkRadioEncryptionType createMobileNetworkRadioEncryptionType()
        throws javax.xml.bind.JAXBException
    {
        return new com.sun.identity.liberty.ws.common.jaxb.ac.impl.MobileNetworkRadioEncryptionTypeImpl();
    }

    /**
     * Create an instance of HTTPElement
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public com.sun.identity.liberty.ws.common.jaxb.ac.HTTPElement createHTTPElement()
        throws javax.xml.bind.JAXBException
    {
        return new com.sun.identity.liberty.ws.common.jaxb.ac.impl.HTTPElementImpl();
    }

    /**
     * Create an instance of AsymmetricDecryptionElement
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public com.sun.identity.liberty.ws.common.jaxb.ac.AsymmetricDecryptionElement createAsymmetricDecryptionElement()
        throws javax.xml.bind.JAXBException
    {
        return new com.sun.identity.liberty.ws.common.jaxb.ac.impl.AsymmetricDecryptionElementImpl();
    }

    /**
     * Create an instance of ZeroKnowledgeType
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public com.sun.identity.liberty.ws.common.jaxb.ac.ZeroKnowledgeType createZeroKnowledgeType()
        throws javax.xml.bind.JAXBException
    {
        return new com.sun.identity.liberty.ws.common.jaxb.ac.impl.ZeroKnowledgeTypeImpl();
    }

    /**
     * Create an instance of SharedSecretChallengeResponseElement
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public com.sun.identity.liberty.ws.common.jaxb.ac.SharedSecretChallengeResponseElement createSharedSecretChallengeResponseElement()
        throws javax.xml.bind.JAXBException
    {
        return new com.sun.identity.liberty.ws.common.jaxb.ac.impl.SharedSecretChallengeResponseElementImpl();
    }

    /**
     * Create an instance of AlphabetType
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public com.sun.identity.liberty.ws.common.jaxb.ac.AlphabetType createAlphabetType()
        throws javax.xml.bind.JAXBException
    {
        return new com.sun.identity.liberty.ws.common.jaxb.ac.impl.AlphabetTypeImpl();
    }

    /**
     * Create an instance of PrivateKeyProtectionType
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public com.sun.identity.liberty.ws.common.jaxb.ac.PrivateKeyProtectionType createPrivateKeyProtectionType()
        throws javax.xml.bind.JAXBException
    {
        return new com.sun.identity.liberty.ws.common.jaxb.ac.impl.PrivateKeyProtectionTypeImpl();
    }

    /**
     * Create an instance of LengthType
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public com.sun.identity.liberty.ws.common.jaxb.ac.LengthType createLengthType()
        throws javax.xml.bind.JAXBException
    {
        return new com.sun.identity.liberty.ws.common.jaxb.ac.impl.LengthTypeImpl();
    }

    /**
     * Create an instance of MobileNetworkRadioEncryptionElement
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public com.sun.identity.liberty.ws.common.jaxb.ac.MobileNetworkRadioEncryptionElement createMobileNetworkRadioEncryptionElement()
        throws javax.xml.bind.JAXBException
    {
        return new com.sun.identity.liberty.ws.common.jaxb.ac.impl.MobileNetworkRadioEncryptionElementImpl();
    }

    /**
     * Create an instance of ExtensionType
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public com.sun.identity.liberty.ws.common.jaxb.ac.ExtensionType createExtensionType()
        throws javax.xml.bind.JAXBException
    {
        return new com.sun.identity.liberty.ws.common.jaxb.ac.impl.ExtensionTypeImpl();
    }

    /**
     * Create an instance of SharedSecretDynamicPlaintextElement
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public com.sun.identity.liberty.ws.common.jaxb.ac.SharedSecretDynamicPlaintextElement createSharedSecretDynamicPlaintextElement()
        throws javax.xml.bind.JAXBException
    {
        return new com.sun.identity.liberty.ws.common.jaxb.ac.impl.SharedSecretDynamicPlaintextElementImpl();
    }

    /**
     * Create an instance of SharedSecretChallengeResponseType
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public com.sun.identity.liberty.ws.common.jaxb.ac.SharedSecretChallengeResponseType createSharedSecretChallengeResponseType()
        throws javax.xml.bind.JAXBException
    {
        return new com.sun.identity.liberty.ws.common.jaxb.ac.impl.SharedSecretChallengeResponseTypeImpl();
    }

    /**
     * Create an instance of ActivationLimitUsagesType
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public com.sun.identity.liberty.ws.common.jaxb.ac.ActivationLimitUsagesType createActivationLimitUsagesType()
        throws javax.xml.bind.JAXBException
    {
        return new com.sun.identity.liberty.ws.common.jaxb.ac.impl.ActivationLimitUsagesTypeImpl();
    }

    /**
     * Create an instance of WrittenConsentType
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public com.sun.identity.liberty.ws.common.jaxb.ac.WrittenConsentType createWrittenConsentType()
        throws javax.xml.bind.JAXBException
    {
        return new com.sun.identity.liberty.ws.common.jaxb.ac.impl.WrittenConsentTypeImpl();
    }

    /**
     * Create an instance of AsymmetricKeyAgreementElement
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public com.sun.identity.liberty.ws.common.jaxb.ac.AsymmetricKeyAgreementElement createAsymmetricKeyAgreementElement()
        throws javax.xml.bind.JAXBException
    {
        return new com.sun.identity.liberty.ws.common.jaxb.ac.impl.AsymmetricKeyAgreementElementImpl();
    }

    /**
     * Create an instance of GoverningAgreementRefElement
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public com.sun.identity.liberty.ws.common.jaxb.ac.GoverningAgreementRefElement createGoverningAgreementRefElement()
        throws javax.xml.bind.JAXBException
    {
        return new com.sun.identity.liberty.ws.common.jaxb.ac.impl.GoverningAgreementRefElementImpl();
    }

    /**
     * Create an instance of SSLType
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public com.sun.identity.liberty.ws.common.jaxb.ac.SSLType createSSLType()
        throws javax.xml.bind.JAXBException
    {
        return new com.sun.identity.liberty.ws.common.jaxb.ac.impl.SSLTypeImpl();
    }

    /**
     * Create an instance of DigSigElement
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public com.sun.identity.liberty.ws.common.jaxb.ac.DigSigElement createDigSigElement()
        throws javax.xml.bind.JAXBException
    {
        return new com.sun.identity.liberty.ws.common.jaxb.ac.impl.DigSigElementImpl();
    }

    /**
     * Create an instance of PreviousSessionType
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public com.sun.identity.liberty.ws.common.jaxb.ac.PreviousSessionType createPreviousSessionType()
        throws javax.xml.bind.JAXBException
    {
        return new com.sun.identity.liberty.ws.common.jaxb.ac.impl.PreviousSessionTypeImpl();
    }

    /**
     * Create an instance of AuthenticatorTransportProtocolElement
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public com.sun.identity.liberty.ws.common.jaxb.ac.AuthenticatorTransportProtocolElement createAuthenticatorTransportProtocolElement()
        throws javax.xml.bind.JAXBException
    {
        return new com.sun.identity.liberty.ws.common.jaxb.ac.impl.AuthenticatorTransportProtocolElementImpl();
    }

    /**
     * Create an instance of HTTPType
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public com.sun.identity.liberty.ws.common.jaxb.ac.HTTPType createHTTPType()
        throws javax.xml.bind.JAXBException
    {
        return new com.sun.identity.liberty.ws.common.jaxb.ac.impl.HTTPTypeImpl();
    }

    /**
     * Create an instance of AuthenticatingAuthorityType
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public com.sun.identity.liberty.ws.common.jaxb.ac.AuthenticatingAuthorityType createAuthenticatingAuthorityType()
        throws javax.xml.bind.JAXBException
    {
        return new com.sun.identity.liberty.ws.common.jaxb.ac.impl.AuthenticatingAuthorityTypeImpl();
    }

    /**
     * Create an instance of PrincipalAuthenticationMechanismType
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public com.sun.identity.liberty.ws.common.jaxb.ac.PrincipalAuthenticationMechanismType createPrincipalAuthenticationMechanismType()
        throws javax.xml.bind.JAXBException
    {
        return new com.sun.identity.liberty.ws.common.jaxb.ac.impl.PrincipalAuthenticationMechanismTypeImpl();
    }

    /**
     * Create an instance of DeactivationCallCenterElement
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public com.sun.identity.liberty.ws.common.jaxb.ac.DeactivationCallCenterElement createDeactivationCallCenterElement()
        throws javax.xml.bind.JAXBException
    {
        return new com.sun.identity.liberty.ws.common.jaxb.ac.impl.DeactivationCallCenterElementImpl();
    }

    /**
     * Create an instance of SwitchAuditElement
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public com.sun.identity.liberty.ws.common.jaxb.ac.SwitchAuditElement createSwitchAuditElement()
        throws javax.xml.bind.JAXBException
    {
        return new com.sun.identity.liberty.ws.common.jaxb.ac.impl.SwitchAuditElementImpl();
    }

}
