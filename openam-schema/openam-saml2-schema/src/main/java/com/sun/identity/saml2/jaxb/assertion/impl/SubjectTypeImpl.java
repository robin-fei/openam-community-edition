//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v1.0.6-b27-fcs 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2012.06.11 at 10:34:07 AM PDT 
//


package com.sun.identity.saml2.jaxb.assertion.impl;

public class SubjectTypeImpl implements com.sun.identity.saml2.jaxb.assertion.SubjectType, com.sun.xml.bind.JAXBObject, com.sun.identity.saml2.jaxb.assertion.impl.runtime.UnmarshallableObject, com.sun.identity.saml2.jaxb.assertion.impl.runtime.XMLSerializable, com.sun.identity.saml2.jaxb.assertion.impl.runtime.ValidatableObject
{

    protected com.sun.identity.saml2.jaxb.assertion.EncryptedElementType _EncryptedID;
    protected com.sun.xml.bind.util.ListImpl _SubjectConfirmation;
    protected com.sun.identity.saml2.jaxb.assertion.BaseIDAbstractType _BaseID;
    protected com.sun.identity.saml2.jaxb.assertion.NameIDType _NameID;
    public final static java.lang.Class version = (com.sun.identity.saml2.jaxb.assertion.impl.JAXBVersion.class);
    private static com.sun.msv.grammar.Grammar schemaFragment;

    private final static java.lang.Class PRIMARY_INTERFACE_CLASS() {
        return (com.sun.identity.saml2.jaxb.assertion.SubjectType.class);
    }

    public com.sun.identity.saml2.jaxb.assertion.EncryptedElementType getEncryptedID() {
        return _EncryptedID;
    }

    public void setEncryptedID(com.sun.identity.saml2.jaxb.assertion.EncryptedElementType value) {
        _EncryptedID = value;
    }

    protected com.sun.xml.bind.util.ListImpl _getSubjectConfirmation() {
        if (_SubjectConfirmation == null) {
            _SubjectConfirmation = new com.sun.xml.bind.util.ListImpl(new java.util.ArrayList());
        }
        return _SubjectConfirmation;
    }

    public java.util.List getSubjectConfirmation() {
        return _getSubjectConfirmation();
    }

    public com.sun.identity.saml2.jaxb.assertion.BaseIDAbstractType getBaseID() {
        return _BaseID;
    }

    public void setBaseID(com.sun.identity.saml2.jaxb.assertion.BaseIDAbstractType value) {
        _BaseID = value;
    }

    public com.sun.identity.saml2.jaxb.assertion.NameIDType getNameID() {
        return _NameID;
    }

    public void setNameID(com.sun.identity.saml2.jaxb.assertion.NameIDType value) {
        _NameID = value;
    }

    public com.sun.identity.saml2.jaxb.assertion.impl.runtime.UnmarshallingEventHandler createUnmarshaller(com.sun.identity.saml2.jaxb.assertion.impl.runtime.UnmarshallingContext context) {
        return new com.sun.identity.saml2.jaxb.assertion.impl.SubjectTypeImpl.Unmarshaller(context);
    }

    public void serializeBody(com.sun.identity.saml2.jaxb.assertion.impl.runtime.XMLSerializer context)
        throws org.xml.sax.SAXException
    {
        int idx2 = 0;
        final int len2 = ((_SubjectConfirmation == null)? 0 :_SubjectConfirmation.size());
        if (true) {
            if (((_EncryptedID == null)&&(_NameID == null))&&(_BaseID!= null)) {
                if (_BaseID instanceof javax.xml.bind.Element) {
                    context.childAsBody(((com.sun.xml.bind.JAXBObject) _BaseID), "BaseID");
                } else {
                    context.startElement("urn:oasis:names:tc:SAML:2.0:assertion", "BaseID");
                    context.childAsURIs(((com.sun.xml.bind.JAXBObject) _BaseID), "BaseID");
                    context.endNamespaceDecls();
                    context.childAsAttributes(((com.sun.xml.bind.JAXBObject) _BaseID), "BaseID");
                    context.endAttributes();
                    context.childAsBody(((com.sun.xml.bind.JAXBObject) _BaseID), "BaseID");
                    context.endElement();
                }
            } else {
                if (((_EncryptedID == null)&&(_NameID!= null))&&(_BaseID == null)) {
                    if (_NameID instanceof javax.xml.bind.Element) {
                        context.childAsBody(((com.sun.xml.bind.JAXBObject) _NameID), "NameID");
                    } else {
                        context.startElement("urn:oasis:names:tc:SAML:2.0:assertion", "NameID");
                        context.childAsURIs(((com.sun.xml.bind.JAXBObject) _NameID), "NameID");
                        context.endNamespaceDecls();
                        context.childAsAttributes(((com.sun.xml.bind.JAXBObject) _NameID), "NameID");
                        context.endAttributes();
                        context.childAsBody(((com.sun.xml.bind.JAXBObject) _NameID), "NameID");
                        context.endElement();
                    }
                } else {
                    if (((_EncryptedID!= null)&&(_NameID == null))&&(_BaseID == null)) {
                        if (_EncryptedID instanceof javax.xml.bind.Element) {
                            context.childAsBody(((com.sun.xml.bind.JAXBObject) _EncryptedID), "EncryptedID");
                        } else {
                            context.startElement("urn:oasis:names:tc:SAML:2.0:assertion", "EncryptedID");
                            context.childAsURIs(((com.sun.xml.bind.JAXBObject) _EncryptedID), "EncryptedID");
                            context.endNamespaceDecls();
                            context.childAsAttributes(((com.sun.xml.bind.JAXBObject) _EncryptedID), "EncryptedID");
                            context.endAttributes();
                            context.childAsBody(((com.sun.xml.bind.JAXBObject) _EncryptedID), "EncryptedID");
                            context.endElement();
                        }
                    }
                }
            }
            while (idx2 != len2) {
                if (_SubjectConfirmation.get(idx2) instanceof javax.xml.bind.Element) {
                    context.childAsBody(((com.sun.xml.bind.JAXBObject) _SubjectConfirmation.get(idx2 ++)), "SubjectConfirmation");
                } else {
                    context.startElement("urn:oasis:names:tc:SAML:2.0:assertion", "SubjectConfirmation");
                    int idx_6 = idx2;
                    context.childAsURIs(((com.sun.xml.bind.JAXBObject) _SubjectConfirmation.get(idx_6 ++)), "SubjectConfirmation");
                    context.endNamespaceDecls();
                    int idx_7 = idx2;
                    context.childAsAttributes(((com.sun.xml.bind.JAXBObject) _SubjectConfirmation.get(idx_7 ++)), "SubjectConfirmation");
                    context.endAttributes();
                    context.childAsBody(((com.sun.xml.bind.JAXBObject) _SubjectConfirmation.get(idx2 ++)), "SubjectConfirmation");
                    context.endElement();
                }
            }
        } else {
            if ((((_EncryptedID == null)&&(_NameID == null))&&(((_SubjectConfirmation == null)? 0 :_SubjectConfirmation.size())>= 1))&&(_BaseID == null)) {
                while (idx2 != len2) {
                    if (_SubjectConfirmation.get(idx2) instanceof javax.xml.bind.Element) {
                        context.childAsBody(((com.sun.xml.bind.JAXBObject) _SubjectConfirmation.get(idx2 ++)), "SubjectConfirmation");
                    } else {
                        context.startElement("urn:oasis:names:tc:SAML:2.0:assertion", "SubjectConfirmation");
                        int idx_8 = idx2;
                        context.childAsURIs(((com.sun.xml.bind.JAXBObject) _SubjectConfirmation.get(idx_8 ++)), "SubjectConfirmation");
                        context.endNamespaceDecls();
                        int idx_9 = idx2;
                        context.childAsAttributes(((com.sun.xml.bind.JAXBObject) _SubjectConfirmation.get(idx_9 ++)), "SubjectConfirmation");
                        context.endAttributes();
                        context.childAsBody(((com.sun.xml.bind.JAXBObject) _SubjectConfirmation.get(idx2 ++)), "SubjectConfirmation");
                        context.endElement();
                    }
                }
            }
        }
    }

    public void serializeAttributes(com.sun.identity.saml2.jaxb.assertion.impl.runtime.XMLSerializer context)
        throws org.xml.sax.SAXException
    {
        int idx2 = 0;
        final int len2 = ((_SubjectConfirmation == null)? 0 :_SubjectConfirmation.size());
        if (true) {
            if (((_EncryptedID == null)&&(_NameID == null))&&(_BaseID!= null)) {
                if (_BaseID instanceof javax.xml.bind.Element) {
                    context.childAsAttributes(((com.sun.xml.bind.JAXBObject) _BaseID), "BaseID");
                }
            } else {
                if (((_EncryptedID == null)&&(_NameID!= null))&&(_BaseID == null)) {
                    if (_NameID instanceof javax.xml.bind.Element) {
                        context.childAsAttributes(((com.sun.xml.bind.JAXBObject) _NameID), "NameID");
                    }
                } else {
                    if (((_EncryptedID!= null)&&(_NameID == null))&&(_BaseID == null)) {
                        if (_EncryptedID instanceof javax.xml.bind.Element) {
                            context.childAsAttributes(((com.sun.xml.bind.JAXBObject) _EncryptedID), "EncryptedID");
                        }
                    }
                }
            }
            while (idx2 != len2) {
                if (_SubjectConfirmation.get(idx2) instanceof javax.xml.bind.Element) {
                    context.childAsAttributes(((com.sun.xml.bind.JAXBObject) _SubjectConfirmation.get(idx2 ++)), "SubjectConfirmation");
                } else {
                    idx2 += 1;
                }
            }
        } else {
            if ((((_EncryptedID == null)&&(_NameID == null))&&(((_SubjectConfirmation == null)? 0 :_SubjectConfirmation.size())>= 1))&&(_BaseID == null)) {
                while (idx2 != len2) {
                    if (_SubjectConfirmation.get(idx2) instanceof javax.xml.bind.Element) {
                        context.childAsAttributes(((com.sun.xml.bind.JAXBObject) _SubjectConfirmation.get(idx2 ++)), "SubjectConfirmation");
                    } else {
                        idx2 += 1;
                    }
                }
            }
        }
    }

    public void serializeURIs(com.sun.identity.saml2.jaxb.assertion.impl.runtime.XMLSerializer context)
        throws org.xml.sax.SAXException
    {
        int idx2 = 0;
        final int len2 = ((_SubjectConfirmation == null)? 0 :_SubjectConfirmation.size());
        if (true) {
            if (((_EncryptedID == null)&&(_NameID == null))&&(_BaseID!= null)) {
                if (_BaseID instanceof javax.xml.bind.Element) {
                    context.childAsURIs(((com.sun.xml.bind.JAXBObject) _BaseID), "BaseID");
                }
            } else {
                if (((_EncryptedID == null)&&(_NameID!= null))&&(_BaseID == null)) {
                    if (_NameID instanceof javax.xml.bind.Element) {
                        context.childAsURIs(((com.sun.xml.bind.JAXBObject) _NameID), "NameID");
                    }
                } else {
                    if (((_EncryptedID!= null)&&(_NameID == null))&&(_BaseID == null)) {
                        if (_EncryptedID instanceof javax.xml.bind.Element) {
                            context.childAsURIs(((com.sun.xml.bind.JAXBObject) _EncryptedID), "EncryptedID");
                        }
                    }
                }
            }
            while (idx2 != len2) {
                if (_SubjectConfirmation.get(idx2) instanceof javax.xml.bind.Element) {
                    context.childAsURIs(((com.sun.xml.bind.JAXBObject) _SubjectConfirmation.get(idx2 ++)), "SubjectConfirmation");
                } else {
                    idx2 += 1;
                }
            }
        } else {
            if ((((_EncryptedID == null)&&(_NameID == null))&&(((_SubjectConfirmation == null)? 0 :_SubjectConfirmation.size())>= 1))&&(_BaseID == null)) {
                while (idx2 != len2) {
                    if (_SubjectConfirmation.get(idx2) instanceof javax.xml.bind.Element) {
                        context.childAsURIs(((com.sun.xml.bind.JAXBObject) _SubjectConfirmation.get(idx2 ++)), "SubjectConfirmation");
                    } else {
                        idx2 += 1;
                    }
                }
            }
        }
    }

    public java.lang.Class getPrimaryInterface() {
        return (com.sun.identity.saml2.jaxb.assertion.SubjectType.class);
    }

    public com.sun.msv.verifier.DocumentDeclaration createRawValidator() {
        if (schemaFragment == null) {
            schemaFragment = com.sun.xml.bind.validator.SchemaDeserializer.deserialize((
 "\u00ac\u00ed\u0000\u0005sr\u0000\u001dcom.sun.msv.grammar.ChoiceExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000\u001dcom.sun."
+"msv.grammar.BinaryExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002L\u0000\u0004exp1t\u0000 Lcom/sun/msv/gramm"
+"ar/Expression;L\u0000\u0004exp2q\u0000~\u0000\u0002xr\u0000\u001ecom.sun.msv.grammar.Expression"
+"\u00f8\u0018\u0082\u00e8N5~O\u0002\u0000\u0002L\u0000\u0013epsilonReducibilityt\u0000\u0013Ljava/lang/Boolean;L\u0000\u000bex"
+"pandedExpq\u0000~\u0000\u0002xpppsr\u0000\u001fcom.sun.msv.grammar.SequenceExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000"
+"\u0001\u0002\u0000\u0000xq\u0000~\u0000\u0001ppsq\u0000~\u0000\u0000ppsq\u0000~\u0000\u0000ppsq\u0000~\u0000\u0000ppsq\u0000~\u0000\u0000ppsq\u0000~\u0000\u0000ppsr\u0000\'com."
+"sun.msv.grammar.trex.ElementPattern\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001L\u0000\tnameClasst\u0000"
+"\u001fLcom/sun/msv/grammar/NameClass;xr\u0000\u001ecom.sun.msv.grammar.Elem"
+"entExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002Z\u0000\u001aignoreUndeclaredAttributesL\u0000\fcontentMode"
+"lq\u0000~\u0000\u0002xq\u0000~\u0000\u0003pp\u0000sq\u0000~\u0000\u0000ppsr\u0000 com.sun.msv.grammar.OneOrMoreExp\u0000"
+"\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000\u001ccom.sun.msv.grammar.UnaryExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001L\u0000\u0003expq"
+"\u0000~\u0000\u0002xq\u0000~\u0000\u0003sr\u0000\u0011java.lang.Boolean\u00cd r\u0080\u00d5\u009c\u00fa\u00ee\u0002\u0000\u0001Z\u0000\u0005valuexp\u0000psr\u0000 co"
+"m.sun.msv.grammar.AttributeExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002L\u0000\u0003expq\u0000~\u0000\u0002L\u0000\tnameC"
+"lassq\u0000~\u0000\u000exq\u0000~\u0000\u0003q\u0000~\u0000\u0016psr\u00002com.sun.msv.grammar.Expression$AnyS"
+"tringExpression\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u0003sq\u0000~\u0000\u0015\u0001q\u0000~\u0000\u001asr\u0000 com.sun.msv."
+"grammar.AnyNameClass\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000\u001dcom.sun.msv.grammar.NameC"
+"lass\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xpsr\u00000com.sun.msv.grammar.Expression$EpsilonE"
+"xpression\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u0003q\u0000~\u0000\u001bq\u0000~\u0000 sr\u0000#com.sun.msv.grammar."
+"SimpleNameClass\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002L\u0000\tlocalNamet\u0000\u0012Ljava/lang/String;L"
+"\u0000\fnamespaceURIq\u0000~\u0000\"xq\u0000~\u0000\u001dt\u00003com.sun.identity.saml2.jaxb.asse"
+"rtion.BaseIDElementt\u0000+http://java.sun.com/jaxb/xjc/dummy-ele"
+"mentssq\u0000~\u0000\rpp\u0000sq\u0000~\u0000\u0006ppsq\u0000~\u0000\rpp\u0000sq\u0000~\u0000\u0000ppsq\u0000~\u0000\u0012q\u0000~\u0000\u0016psq\u0000~\u0000\u0017q\u0000~"
+"\u0000\u0016pq\u0000~\u0000\u001aq\u0000~\u0000\u001eq\u0000~\u0000 sq\u0000~\u0000!t\u00008com.sun.identity.saml2.jaxb.asser"
+"tion.BaseIDAbstractTypeq\u0000~\u0000%sq\u0000~\u0000\u0000ppsq\u0000~\u0000\u0017q\u0000~\u0000\u0016psr\u0000\u001bcom.sun."
+"msv.grammar.DataExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0003L\u0000\u0002dtt\u0000\u001fLorg/relaxng/datatype/"
+"Datatype;L\u0000\u0006exceptq\u0000~\u0000\u0002L\u0000\u0004namet\u0000\u001dLcom/sun/msv/util/StringPai"
+"r;xq\u0000~\u0000\u0003ppsr\u0000\"com.sun.msv.datatype.xsd.QnameType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000x"
+"r\u0000*com.sun.msv.datatype.xsd.BuiltinAtomicType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000%"
+"com.sun.msv.datatype.xsd.ConcreteType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000\'com.sun."
+"msv.datatype.xsd.XSDatatypeImpl\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0003L\u0000\fnamespaceUriq\u0000~"
+"\u0000\"L\u0000\btypeNameq\u0000~\u0000\"L\u0000\nwhiteSpacet\u0000.Lcom/sun/msv/datatype/xsd/"
+"WhiteSpaceProcessor;xpt\u0000 http://www.w3.org/2001/XMLSchemat\u0000\u0005"
+"QNamesr\u00005com.sun.msv.datatype.xsd.WhiteSpaceProcessor$Collap"
+"se\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000,com.sun.msv.datatype.xsd.WhiteSpaceProcesso"
+"r\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xpsr\u00000com.sun.msv.grammar.Expression$NullSetExpr"
+"ession\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u0003q\u0000~\u0000\u0016psr\u0000\u001bcom.sun.msv.util.StringPair"
+"\u00d0t\u001ejB\u008f\u008d\u00a0\u0002\u0000\u0002L\u0000\tlocalNameq\u0000~\u0000\"L\u0000\fnamespaceURIq\u0000~\u0000\"xpq\u0000~\u0000;q\u0000~\u0000:"
+"sq\u0000~\u0000!t\u0000\u0004typet\u0000)http://www.w3.org/2001/XMLSchema-instanceq\u0000~"
+"\u0000 sq\u0000~\u0000!t\u0000\u0006BaseIDt\u0000%urn:oasis:names:tc:SAML:2.0:assertionsq\u0000"
+"~\u0000\rpp\u0000sq\u0000~\u0000\u0000ppsq\u0000~\u0000\u0012q\u0000~\u0000\u0016psq\u0000~\u0000\u0017q\u0000~\u0000\u0016pq\u0000~\u0000\u001aq\u0000~\u0000\u001eq\u0000~\u0000 sq\u0000~\u0000!t"
+"\u00003com.sun.identity.saml2.jaxb.assertion.NameIDElementq\u0000~\u0000%sq"
+"\u0000~\u0000\rpp\u0000sq\u0000~\u0000\u0006ppsq\u0000~\u0000\rpp\u0000sq\u0000~\u0000\u0000ppsq\u0000~\u0000\u0012q\u0000~\u0000\u0016psq\u0000~\u0000\u0017q\u0000~\u0000\u0016pq\u0000~\u0000"
+"\u001aq\u0000~\u0000\u001eq\u0000~\u0000 sq\u0000~\u0000!t\u00000com.sun.identity.saml2.jaxb.assertion.Na"
+"meIDTypeq\u0000~\u0000%sq\u0000~\u0000\u0000ppsq\u0000~\u0000\u0017q\u0000~\u0000\u0016pq\u0000~\u00003q\u0000~\u0000Cq\u0000~\u0000 sq\u0000~\u0000!t\u0000\u0006Nam"
+"eIDq\u0000~\u0000Hsq\u0000~\u0000\rpp\u0000sq\u0000~\u0000\u0000ppsq\u0000~\u0000\u0012q\u0000~\u0000\u0016psq\u0000~\u0000\u0017q\u0000~\u0000\u0016pq\u0000~\u0000\u001aq\u0000~\u0000\u001eq"
+"\u0000~\u0000 sq\u0000~\u0000!t\u00008com.sun.identity.saml2.jaxb.assertion.Encrypted"
+"IDElementq\u0000~\u0000%sq\u0000~\u0000\rpp\u0000sq\u0000~\u0000\u0006ppsq\u0000~\u0000\rpp\u0000sq\u0000~\u0000\u0000ppsq\u0000~\u0000\u0012q\u0000~\u0000\u0016p"
+"sq\u0000~\u0000\u0017q\u0000~\u0000\u0016pq\u0000~\u0000\u001aq\u0000~\u0000\u001eq\u0000~\u0000 sq\u0000~\u0000!t\u0000:com.sun.identity.saml2.j"
+"axb.assertion.EncryptedElementTypeq\u0000~\u0000%sq\u0000~\u0000\u0000ppsq\u0000~\u0000\u0017q\u0000~\u0000\u0016pq"
+"\u0000~\u00003q\u0000~\u0000Cq\u0000~\u0000 sq\u0000~\u0000!t\u0000\u000bEncryptedIDq\u0000~\u0000Hsq\u0000~\u0000\u0000ppsq\u0000~\u0000\u0012q\u0000~\u0000\u0016ps"
+"q\u0000~\u0000\u0000q\u0000~\u0000\u0016psq\u0000~\u0000\rq\u0000~\u0000\u0016p\u0000sq\u0000~\u0000\u0000ppsq\u0000~\u0000\u0012q\u0000~\u0000\u0016psq\u0000~\u0000\u0017q\u0000~\u0000\u0016pq\u0000~\u0000"
+"\u001aq\u0000~\u0000\u001eq\u0000~\u0000 sq\u0000~\u0000!t\u0000@com.sun.identity.saml2.jaxb.assertion.Su"
+"bjectConfirmationElementq\u0000~\u0000%sq\u0000~\u0000\rq\u0000~\u0000\u0016p\u0000sq\u0000~\u0000\u0006ppsq\u0000~\u0000\rpp\u0000s"
+"q\u0000~\u0000\u0000ppsq\u0000~\u0000\u0012q\u0000~\u0000\u0016psq\u0000~\u0000\u0017q\u0000~\u0000\u0016pq\u0000~\u0000\u001aq\u0000~\u0000\u001eq\u0000~\u0000 sq\u0000~\u0000!t\u0000=com.s"
+"un.identity.saml2.jaxb.assertion.SubjectConfirmationTypeq\u0000~\u0000"
+"%sq\u0000~\u0000\u0000ppsq\u0000~\u0000\u0017q\u0000~\u0000\u0016pq\u0000~\u00003q\u0000~\u0000Cq\u0000~\u0000 sq\u0000~\u0000!t\u0000\u0013SubjectConfirma"
+"tionq\u0000~\u0000Hq\u0000~\u0000 sq\u0000~\u0000\u0012ppsq\u0000~\u0000\u0000ppsq\u0000~\u0000\rpp\u0000sq\u0000~\u0000\u0000ppsq\u0000~\u0000\u0012q\u0000~\u0000\u0016ps"
+"q\u0000~\u0000\u0017q\u0000~\u0000\u0016pq\u0000~\u0000\u001aq\u0000~\u0000\u001eq\u0000~\u0000 sq\u0000~\u0000!q\u0000~\u0000uq\u0000~\u0000%sq\u0000~\u0000\rpp\u0000sq\u0000~\u0000\u0006pps"
+"q\u0000~\u0000\rpp\u0000sq\u0000~\u0000\u0000ppsq\u0000~\u0000\u0012q\u0000~\u0000\u0016psq\u0000~\u0000\u0017q\u0000~\u0000\u0016pq\u0000~\u0000\u001aq\u0000~\u0000\u001eq\u0000~\u0000 sq\u0000~\u0000"
+"!q\u0000~\u0000}q\u0000~\u0000%sq\u0000~\u0000\u0000ppsq\u0000~\u0000\u0017q\u0000~\u0000\u0016pq\u0000~\u00003q\u0000~\u0000Cq\u0000~\u0000 sq\u0000~\u0000!q\u0000~\u0000\u0081q\u0000~"
+"\u0000Hsr\u0000\"com.sun.msv.grammar.ExpressionPool\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001L\u0000\bexpTab"
+"let\u0000/Lcom/sun/msv/grammar/ExpressionPool$ClosedHash;xpsr\u0000-co"
+"m.sun.msv.grammar.ExpressionPool$ClosedHash\u00d7j\u00d0N\u00ef\u00e8\u00ed\u001c\u0003\u0000\u0003I\u0000\u0005cou"
+"ntB\u0000\rstreamVersionL\u0000\u0006parentt\u0000$Lcom/sun/msv/grammar/Expressio"
+"nPool;xp\u0000\u0000\u0000*\u0001pq\u0000~\u0000\u0011q\u0000~\u0000)q\u0000~\u0000Jq\u0000~\u0000Rq\u0000~\u0000\\q\u0000~\u0000dq\u0000~\u0000\bq\u0000~\u0000\u000bq\u0000~\u0000qq"
+"\u0000~\u0000yq\u0000~\u0000nq\u0000~\u0000\u0085q\u0000~\u0000\u008cq\u0000~\u0000\u0082q\u0000~\u0000\'q\u0000~\u0000Pq\u0000~\u0000bq\u0000~\u0000wq\u0000~\u0000\u008aq\u0000~\u0000\u0007q\u0000~\u0000\tq"
+"\u0000~\u0000mq\u0000~\u0000\u0014q\u0000~\u0000*q\u0000~\u0000Kq\u0000~\u0000Sq\u0000~\u0000]q\u0000~\u0000eq\u0000~\u0000rq\u0000~\u0000zq\u0000~\u0000\u0086q\u0000~\u0000\u008dq\u0000~\u0000\nq"
+"\u0000~\u0000.q\u0000~\u0000Wq\u0000~\u0000iq\u0000~\u0000~q\u0000~\u0000\u0090q\u0000~\u0000\fq\u0000~\u0000oq\u0000~\u0000\u0083q\u0000~\u0000\u0005x"));
        }
        return new com.sun.msv.verifier.regexp.REDocumentDeclaration(schemaFragment);
    }

    public class Unmarshaller
        extends com.sun.identity.saml2.jaxb.assertion.impl.runtime.AbstractUnmarshallingEventHandlerImpl
    {


        public Unmarshaller(com.sun.identity.saml2.jaxb.assertion.impl.runtime.UnmarshallingContext context) {
            super(context, "-------------");
        }

        protected Unmarshaller(com.sun.identity.saml2.jaxb.assertion.impl.runtime.UnmarshallingContext context, int startState) {
            this(context);
            state = startState;
        }

        public java.lang.Object owner() {
            return com.sun.identity.saml2.jaxb.assertion.impl.SubjectTypeImpl.this;
        }

        public void enterElement(java.lang.String ___uri, java.lang.String ___local, java.lang.String ___qname, org.xml.sax.Attributes __atts)
            throws org.xml.sax.SAXException
        {
            int attIdx;
            outer:
            while (true) {
                switch (state) {
                    case  0 :
                        if (("BaseID" == ___local)&&("urn:oasis:names:tc:SAML:2.0:assertion" == ___uri)) {
                            _BaseID = ((com.sun.identity.saml2.jaxb.assertion.impl.BaseIDElementImpl) spawnChildFromEnterElement((com.sun.identity.saml2.jaxb.assertion.impl.BaseIDElementImpl.class), 3, ___uri, ___local, ___qname, __atts));
                            return ;
                        }
                        if (("BaseID" == ___local)&&("urn:oasis:names:tc:SAML:2.0:assertion" == ___uri)) {
                            context.pushAttributes(__atts, false);
                            state = 9;
                            return ;
                        }
                        if (("NameID" == ___local)&&("urn:oasis:names:tc:SAML:2.0:assertion" == ___uri)) {
                            _NameID = ((com.sun.identity.saml2.jaxb.assertion.impl.NameIDElementImpl) spawnChildFromEnterElement((com.sun.identity.saml2.jaxb.assertion.impl.NameIDElementImpl.class), 3, ___uri, ___local, ___qname, __atts));
                            return ;
                        }
                        if (("NameID" == ___local)&&("urn:oasis:names:tc:SAML:2.0:assertion" == ___uri)) {
                            context.pushAttributes(__atts, true);
                            state = 11;
                            return ;
                        }
                        if (("EncryptedID" == ___local)&&("urn:oasis:names:tc:SAML:2.0:assertion" == ___uri)) {
                            _EncryptedID = ((com.sun.identity.saml2.jaxb.assertion.impl.EncryptedIDElementImpl) spawnChildFromEnterElement((com.sun.identity.saml2.jaxb.assertion.impl.EncryptedIDElementImpl.class), 3, ___uri, ___local, ___qname, __atts));
                            return ;
                        }
                        if (("EncryptedID" == ___local)&&("urn:oasis:names:tc:SAML:2.0:assertion" == ___uri)) {
                            context.pushAttributes(__atts, false);
                            state = 1;
                            return ;
                        }
                        if (("SubjectConfirmation" == ___local)&&("urn:oasis:names:tc:SAML:2.0:assertion" == ___uri)) {
                            _getSubjectConfirmation().add(((com.sun.identity.saml2.jaxb.assertion.impl.SubjectConfirmationElementImpl) spawnChildFromEnterElement((com.sun.identity.saml2.jaxb.assertion.impl.SubjectConfirmationElementImpl.class), 6, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("SubjectConfirmation" == ___local)&&("urn:oasis:names:tc:SAML:2.0:assertion" == ___uri)) {
                            context.pushAttributes(__atts, false);
                            state = 7;
                            return ;
                        }
                        break;
                    case  7 :
                        attIdx = context.getAttribute("", "Method");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().enterElement(___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        break;
                    case  3 :
                        if (("SubjectConfirmation" == ___local)&&("urn:oasis:names:tc:SAML:2.0:assertion" == ___uri)) {
                            _getSubjectConfirmation().add(((com.sun.identity.saml2.jaxb.assertion.impl.SubjectConfirmationElementImpl) spawnChildFromEnterElement((com.sun.identity.saml2.jaxb.assertion.impl.SubjectConfirmationElementImpl.class), 6, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("SubjectConfirmation" == ___local)&&("urn:oasis:names:tc:SAML:2.0:assertion" == ___uri)) {
                            context.pushAttributes(__atts, false);
                            state = 4;
                            return ;
                        }
                        state = 6;
                        continue outer;
                    case  9 :
                        attIdx = context.getAttribute("", "NameQualifier");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().enterElement(___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        attIdx = context.getAttribute("", "SPNameQualifier");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().enterElement(___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        _BaseID = ((com.sun.identity.saml2.jaxb.assertion.impl.BaseIDAbstractTypeImpl) spawnChildFromEnterElement((com.sun.identity.saml2.jaxb.assertion.impl.BaseIDAbstractTypeImpl.class), 10, ___uri, ___local, ___qname, __atts));
                        return ;
                    case  6 :
                        if (("SubjectConfirmation" == ___local)&&("urn:oasis:names:tc:SAML:2.0:assertion" == ___uri)) {
                            _getSubjectConfirmation().add(((com.sun.identity.saml2.jaxb.assertion.impl.SubjectConfirmationElementImpl) spawnChildFromEnterElement((com.sun.identity.saml2.jaxb.assertion.impl.SubjectConfirmationElementImpl.class), 6, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("SubjectConfirmation" == ___local)&&("urn:oasis:names:tc:SAML:2.0:assertion" == ___uri)) {
                            context.pushAttributes(__atts, false);
                            state = 4;
                            return ;
                        }
                        if (("SubjectConfirmation" == ___local)&&("urn:oasis:names:tc:SAML:2.0:assertion" == ___uri)) {
                            context.pushAttributes(__atts, false);
                            state = 7;
                            return ;
                        }
                        revertToParentFromEnterElement(___uri, ___local, ___qname, __atts);
                        return ;
                    case  4 :
                        attIdx = context.getAttribute("", "Method");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().enterElement(___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        break;
                    case  11 :
                        attIdx = context.getAttribute("", "NameQualifier");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().enterElement(___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        attIdx = context.getAttribute("", "SPNameQualifier");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().enterElement(___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        attIdx = context.getAttribute("", "Format");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().enterElement(___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        attIdx = context.getAttribute("", "SPProvidedID");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().enterElement(___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        break;
                    case  1 :
                        if (("EncryptedData" == ___local)&&("http://www.w3.org/2001/04/xmlenc#" == ___uri)) {
                            _EncryptedID = ((com.sun.identity.saml2.jaxb.assertion.impl.EncryptedElementTypeImpl) spawnChildFromEnterElement((com.sun.identity.saml2.jaxb.assertion.impl.EncryptedElementTypeImpl.class), 2, ___uri, ___local, ___qname, __atts));
                            return ;
                        }
                        if (("EncryptedData" == ___local)&&("http://www.w3.org/2001/04/xmlenc#" == ___uri)) {
                            _EncryptedID = ((com.sun.identity.saml2.jaxb.assertion.impl.EncryptedElementTypeImpl) spawnChildFromEnterElement((com.sun.identity.saml2.jaxb.assertion.impl.EncryptedElementTypeImpl.class), 2, ___uri, ___local, ___qname, __atts));
                            return ;
                        }
                        break;
                }
                super.enterElement(___uri, ___local, ___qname, __atts);
                break;
            }
        }

        public void leaveElement(java.lang.String ___uri, java.lang.String ___local, java.lang.String ___qname)
            throws org.xml.sax.SAXException
        {
            int attIdx;
            outer:
            while (true) {
                switch (state) {
                    case  5 :
                        if (("SubjectConfirmation" == ___local)&&("urn:oasis:names:tc:SAML:2.0:assertion" == ___uri)) {
                            context.popAttributes();
                            state = 6;
                            return ;
                        }
                        break;
                    case  7 :
                        attIdx = context.getAttribute("", "Method");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().leaveElement(___uri, ___local, ___qname);
                            return ;
                        }
                        break;
                    case  3 :
                        state = 6;
                        continue outer;
                    case  9 :
                        attIdx = context.getAttribute("", "NameQualifier");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().leaveElement(___uri, ___local, ___qname);
                            return ;
                        }
                        attIdx = context.getAttribute("", "SPNameQualifier");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().leaveElement(___uri, ___local, ___qname);
                            return ;
                        }
                        _BaseID = ((com.sun.identity.saml2.jaxb.assertion.impl.BaseIDAbstractTypeImpl) spawnChildFromLeaveElement((com.sun.identity.saml2.jaxb.assertion.impl.BaseIDAbstractTypeImpl.class), 10, ___uri, ___local, ___qname));
                        return ;
                    case  6 :
                        revertToParentFromLeaveElement(___uri, ___local, ___qname);
                        return ;
                    case  12 :
                        if (("NameID" == ___local)&&("urn:oasis:names:tc:SAML:2.0:assertion" == ___uri)) {
                            context.popAttributes();
                            state = 3;
                            return ;
                        }
                        break;
                    case  10 :
                        if (("BaseID" == ___local)&&("urn:oasis:names:tc:SAML:2.0:assertion" == ___uri)) {
                            context.popAttributes();
                            state = 3;
                            return ;
                        }
                        break;
                    case  4 :
                        attIdx = context.getAttribute("", "Method");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().leaveElement(___uri, ___local, ___qname);
                            return ;
                        }
                        break;
                    case  2 :
                        if (("EncryptedID" == ___local)&&("urn:oasis:names:tc:SAML:2.0:assertion" == ___uri)) {
                            context.popAttributes();
                            state = 3;
                            return ;
                        }
                        break;
                    case  8 :
                        if (("SubjectConfirmation" == ___local)&&("urn:oasis:names:tc:SAML:2.0:assertion" == ___uri)) {
                            context.popAttributes();
                            state = 6;
                            return ;
                        }
                        break;
                    case  11 :
                        attIdx = context.getAttribute("", "NameQualifier");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().leaveElement(___uri, ___local, ___qname);
                            return ;
                        }
                        attIdx = context.getAttribute("", "SPNameQualifier");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().leaveElement(___uri, ___local, ___qname);
                            return ;
                        }
                        attIdx = context.getAttribute("", "Format");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().leaveElement(___uri, ___local, ___qname);
                            return ;
                        }
                        attIdx = context.getAttribute("", "SPProvidedID");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().leaveElement(___uri, ___local, ___qname);
                            return ;
                        }
                        break;
                }
                super.leaveElement(___uri, ___local, ___qname);
                break;
            }
        }

        public void enterAttribute(java.lang.String ___uri, java.lang.String ___local, java.lang.String ___qname)
            throws org.xml.sax.SAXException
        {
            int attIdx;
            outer:
            while (true) {
                switch (state) {
                    case  7 :
                        if (("Method" == ___local)&&("" == ___uri)) {
                            _getSubjectConfirmation().add(((com.sun.identity.saml2.jaxb.assertion.impl.SubjectConfirmationTypeImpl) spawnChildFromEnterAttribute((com.sun.identity.saml2.jaxb.assertion.impl.SubjectConfirmationTypeImpl.class), 8, ___uri, ___local, ___qname)));
                            return ;
                        }
                        break;
                    case  3 :
                        state = 6;
                        continue outer;
                    case  9 :
                        if (("NameQualifier" == ___local)&&("" == ___uri)) {
                            _BaseID = ((com.sun.identity.saml2.jaxb.assertion.impl.BaseIDAbstractTypeImpl) spawnChildFromEnterAttribute((com.sun.identity.saml2.jaxb.assertion.impl.BaseIDAbstractTypeImpl.class), 10, ___uri, ___local, ___qname));
                            return ;
                        }
                        if (("SPNameQualifier" == ___local)&&("" == ___uri)) {
                            _BaseID = ((com.sun.identity.saml2.jaxb.assertion.impl.BaseIDAbstractTypeImpl) spawnChildFromEnterAttribute((com.sun.identity.saml2.jaxb.assertion.impl.BaseIDAbstractTypeImpl.class), 10, ___uri, ___local, ___qname));
                            return ;
                        }
                        _BaseID = ((com.sun.identity.saml2.jaxb.assertion.impl.BaseIDAbstractTypeImpl) spawnChildFromEnterAttribute((com.sun.identity.saml2.jaxb.assertion.impl.BaseIDAbstractTypeImpl.class), 10, ___uri, ___local, ___qname));
                        return ;
                    case  6 :
                        revertToParentFromEnterAttribute(___uri, ___local, ___qname);
                        return ;
                    case  4 :
                        if (("Method" == ___local)&&("" == ___uri)) {
                            _getSubjectConfirmation().add(((com.sun.identity.saml2.jaxb.assertion.impl.SubjectConfirmationTypeImpl) spawnChildFromEnterAttribute((com.sun.identity.saml2.jaxb.assertion.impl.SubjectConfirmationTypeImpl.class), 5, ___uri, ___local, ___qname)));
                            return ;
                        }
                        break;
                    case  11 :
                        if (("NameQualifier" == ___local)&&("" == ___uri)) {
                            _NameID = ((com.sun.identity.saml2.jaxb.assertion.impl.NameIDTypeImpl) spawnChildFromEnterAttribute((com.sun.identity.saml2.jaxb.assertion.impl.NameIDTypeImpl.class), 12, ___uri, ___local, ___qname));
                            return ;
                        }
                        if (("SPNameQualifier" == ___local)&&("" == ___uri)) {
                            _NameID = ((com.sun.identity.saml2.jaxb.assertion.impl.NameIDTypeImpl) spawnChildFromEnterAttribute((com.sun.identity.saml2.jaxb.assertion.impl.NameIDTypeImpl.class), 12, ___uri, ___local, ___qname));
                            return ;
                        }
                        if (("Format" == ___local)&&("" == ___uri)) {
                            _NameID = ((com.sun.identity.saml2.jaxb.assertion.impl.NameIDTypeImpl) spawnChildFromEnterAttribute((com.sun.identity.saml2.jaxb.assertion.impl.NameIDTypeImpl.class), 12, ___uri, ___local, ___qname));
                            return ;
                        }
                        if (("SPProvidedID" == ___local)&&("" == ___uri)) {
                            _NameID = ((com.sun.identity.saml2.jaxb.assertion.impl.NameIDTypeImpl) spawnChildFromEnterAttribute((com.sun.identity.saml2.jaxb.assertion.impl.NameIDTypeImpl.class), 12, ___uri, ___local, ___qname));
                            return ;
                        }
                        break;
                }
                super.enterAttribute(___uri, ___local, ___qname);
                break;
            }
        }

        public void leaveAttribute(java.lang.String ___uri, java.lang.String ___local, java.lang.String ___qname)
            throws org.xml.sax.SAXException
        {
            int attIdx;
            outer:
            while (true) {
                switch (state) {
                    case  7 :
                        attIdx = context.getAttribute("", "Method");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().leaveAttribute(___uri, ___local, ___qname);
                            return ;
                        }
                        break;
                    case  3 :
                        state = 6;
                        continue outer;
                    case  9 :
                        attIdx = context.getAttribute("", "NameQualifier");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().leaveAttribute(___uri, ___local, ___qname);
                            return ;
                        }
                        attIdx = context.getAttribute("", "SPNameQualifier");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().leaveAttribute(___uri, ___local, ___qname);
                            return ;
                        }
                        _BaseID = ((com.sun.identity.saml2.jaxb.assertion.impl.BaseIDAbstractTypeImpl) spawnChildFromLeaveAttribute((com.sun.identity.saml2.jaxb.assertion.impl.BaseIDAbstractTypeImpl.class), 10, ___uri, ___local, ___qname));
                        return ;
                    case  6 :
                        revertToParentFromLeaveAttribute(___uri, ___local, ___qname);
                        return ;
                    case  4 :
                        attIdx = context.getAttribute("", "Method");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().leaveAttribute(___uri, ___local, ___qname);
                            return ;
                        }
                        break;
                    case  11 :
                        attIdx = context.getAttribute("", "NameQualifier");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().leaveAttribute(___uri, ___local, ___qname);
                            return ;
                        }
                        attIdx = context.getAttribute("", "SPNameQualifier");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().leaveAttribute(___uri, ___local, ___qname);
                            return ;
                        }
                        attIdx = context.getAttribute("", "Format");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().leaveAttribute(___uri, ___local, ___qname);
                            return ;
                        }
                        attIdx = context.getAttribute("", "SPProvidedID");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().leaveAttribute(___uri, ___local, ___qname);
                            return ;
                        }
                        break;
                }
                super.leaveAttribute(___uri, ___local, ___qname);
                break;
            }
        }

        public void handleText(final java.lang.String value)
            throws org.xml.sax.SAXException
        {
            int attIdx;
            outer:
            while (true) {
                try {
                    switch (state) {
                        case  7 :
                            attIdx = context.getAttribute("", "Method");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().text(value);
                                return ;
                            }
                            break;
                        case  3 :
                            state = 6;
                            continue outer;
                        case  9 :
                            attIdx = context.getAttribute("", "NameQualifier");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().text(value);
                                return ;
                            }
                            attIdx = context.getAttribute("", "SPNameQualifier");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().text(value);
                                return ;
                            }
                            _BaseID = ((com.sun.identity.saml2.jaxb.assertion.impl.BaseIDAbstractTypeImpl) spawnChildFromText((com.sun.identity.saml2.jaxb.assertion.impl.BaseIDAbstractTypeImpl.class), 10, value));
                            return ;
                        case  6 :
                            revertToParentFromText(value);
                            return ;
                        case  4 :
                            attIdx = context.getAttribute("", "Method");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().text(value);
                                return ;
                            }
                            break;
                        case  11 :
                            attIdx = context.getAttribute("", "NameQualifier");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().text(value);
                                return ;
                            }
                            attIdx = context.getAttribute("", "SPNameQualifier");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().text(value);
                                return ;
                            }
                            attIdx = context.getAttribute("", "Format");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().text(value);
                                return ;
                            }
                            attIdx = context.getAttribute("", "SPProvidedID");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().text(value);
                                return ;
                            }
                            _NameID = ((com.sun.identity.saml2.jaxb.assertion.impl.NameIDTypeImpl) spawnChildFromText((com.sun.identity.saml2.jaxb.assertion.impl.NameIDTypeImpl.class), 12, value));
                            return ;
                    }
                } catch (java.lang.RuntimeException e) {
                    handleUnexpectedTextException(value, e);
                }
                break;
            }
        }

    }

}
