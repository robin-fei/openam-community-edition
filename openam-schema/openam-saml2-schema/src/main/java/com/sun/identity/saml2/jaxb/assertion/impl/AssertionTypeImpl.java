//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v1.0.6-b27-fcs 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2012.06.11 at 10:34:07 AM PDT 
//


package com.sun.identity.saml2.jaxb.assertion.impl;

public class AssertionTypeImpl implements com.sun.identity.saml2.jaxb.assertion.AssertionType, com.sun.xml.bind.JAXBObject, com.sun.identity.saml2.jaxb.assertion.impl.runtime.UnmarshallableObject, com.sun.identity.saml2.jaxb.assertion.impl.runtime.XMLSerializable, com.sun.xml.bind.marshaller.IdentifiableObject, com.sun.identity.saml2.jaxb.assertion.impl.runtime.ValidatableObject
{

    protected com.sun.identity.saml2.jaxb.assertion.ConditionsType _Conditions;
    protected com.sun.identity.saml2.jaxb.assertion.NameIDType _Issuer;
    protected com.sun.identity.saml2.jaxb.assertion.SubjectType _Subject;
    protected java.lang.String _ID;
    protected com.sun.xml.bind.util.ListImpl _StatementOrAuthnStatementOrAuthzDecisionStatement;
    protected com.sun.identity.saml2.jaxb.assertion.AdviceType _Advice;
    protected java.lang.String _Version;
    protected java.util.Calendar _IssueInstant;
    protected com.sun.identity.saml2.jaxb.xmlsig.SignatureType _Signature;
    public final static java.lang.Class version = (com.sun.identity.saml2.jaxb.assertion.impl.JAXBVersion.class);
    private static com.sun.msv.grammar.Grammar schemaFragment;

    private final static java.lang.Class PRIMARY_INTERFACE_CLASS() {
        return (com.sun.identity.saml2.jaxb.assertion.AssertionType.class);
    }

    public com.sun.identity.saml2.jaxb.assertion.ConditionsType getConditions() {
        return _Conditions;
    }

    public void setConditions(com.sun.identity.saml2.jaxb.assertion.ConditionsType value) {
        _Conditions = value;
    }

    public com.sun.identity.saml2.jaxb.assertion.NameIDType getIssuer() {
        return _Issuer;
    }

    public void setIssuer(com.sun.identity.saml2.jaxb.assertion.NameIDType value) {
        _Issuer = value;
    }

    public com.sun.identity.saml2.jaxb.assertion.SubjectType getSubject() {
        return _Subject;
    }

    public void setSubject(com.sun.identity.saml2.jaxb.assertion.SubjectType value) {
        _Subject = value;
    }

    public java.lang.String getID() {
        return _ID;
    }

    public void setID(java.lang.String value) {
        _ID = value;
    }

    protected com.sun.xml.bind.util.ListImpl _getStatementOrAuthnStatementOrAuthzDecisionStatement() {
        if (_StatementOrAuthnStatementOrAuthzDecisionStatement == null) {
            _StatementOrAuthnStatementOrAuthzDecisionStatement = new com.sun.xml.bind.util.ListImpl(new java.util.ArrayList());
        }
        return _StatementOrAuthnStatementOrAuthzDecisionStatement;
    }

    public java.util.List getStatementOrAuthnStatementOrAuthzDecisionStatement() {
        return _getStatementOrAuthnStatementOrAuthzDecisionStatement();
    }

    public com.sun.identity.saml2.jaxb.assertion.AdviceType getAdvice() {
        return _Advice;
    }

    public void setAdvice(com.sun.identity.saml2.jaxb.assertion.AdviceType value) {
        _Advice = value;
    }

    public java.lang.String getVersion() {
        return _Version;
    }

    public void setVersion(java.lang.String value) {
        _Version = value;
    }

    public java.util.Calendar getIssueInstant() {
        return _IssueInstant;
    }

    public void setIssueInstant(java.util.Calendar value) {
        _IssueInstant = value;
    }

    public com.sun.identity.saml2.jaxb.xmlsig.SignatureType getSignature() {
        return _Signature;
    }

    public void setSignature(com.sun.identity.saml2.jaxb.xmlsig.SignatureType value) {
        _Signature = value;
    }

    public com.sun.identity.saml2.jaxb.assertion.impl.runtime.UnmarshallingEventHandler createUnmarshaller(com.sun.identity.saml2.jaxb.assertion.impl.runtime.UnmarshallingContext context) {
        return new com.sun.identity.saml2.jaxb.assertion.impl.AssertionTypeImpl.Unmarshaller(context);
    }

    public void serializeBody(com.sun.identity.saml2.jaxb.assertion.impl.runtime.XMLSerializer context)
        throws org.xml.sax.SAXException
    {
        int idx5 = 0;
        final int len5 = ((_StatementOrAuthnStatementOrAuthzDecisionStatement == null)? 0 :_StatementOrAuthnStatementOrAuthzDecisionStatement.size());
        if (_Issuer instanceof javax.xml.bind.Element) {
            context.childAsBody(((com.sun.xml.bind.JAXBObject) _Issuer), "Issuer");
        } else {
            context.startElement("urn:oasis:names:tc:SAML:2.0:assertion", "Issuer");
            context.childAsURIs(((com.sun.xml.bind.JAXBObject) _Issuer), "Issuer");
            context.endNamespaceDecls();
            context.childAsAttributes(((com.sun.xml.bind.JAXBObject) _Issuer), "Issuer");
            context.endAttributes();
            context.childAsBody(((com.sun.xml.bind.JAXBObject) _Issuer), "Issuer");
            context.endElement();
        }
        if (_Signature!= null) {
            if (_Signature instanceof javax.xml.bind.Element) {
                context.childAsBody(((com.sun.xml.bind.JAXBObject) _Signature), "Signature");
            } else {
                context.startElement("http://www.w3.org/2000/09/xmldsig#", "Signature");
                context.childAsURIs(((com.sun.xml.bind.JAXBObject) _Signature), "Signature");
                context.endNamespaceDecls();
                context.childAsAttributes(((com.sun.xml.bind.JAXBObject) _Signature), "Signature");
                context.endAttributes();
                context.childAsBody(((com.sun.xml.bind.JAXBObject) _Signature), "Signature");
                context.endElement();
            }
        }
        if (_Subject!= null) {
            if (_Subject instanceof javax.xml.bind.Element) {
                context.childAsBody(((com.sun.xml.bind.JAXBObject) _Subject), "Subject");
            } else {
                context.startElement("urn:oasis:names:tc:SAML:2.0:assertion", "Subject");
                context.childAsURIs(((com.sun.xml.bind.JAXBObject) _Subject), "Subject");
                context.endNamespaceDecls();
                context.childAsAttributes(((com.sun.xml.bind.JAXBObject) _Subject), "Subject");
                context.endAttributes();
                context.childAsBody(((com.sun.xml.bind.JAXBObject) _Subject), "Subject");
                context.endElement();
            }
        }
        if (_Conditions!= null) {
            if (_Conditions instanceof javax.xml.bind.Element) {
                context.childAsBody(((com.sun.xml.bind.JAXBObject) _Conditions), "Conditions");
            } else {
                context.startElement("urn:oasis:names:tc:SAML:2.0:assertion", "Conditions");
                context.childAsURIs(((com.sun.xml.bind.JAXBObject) _Conditions), "Conditions");
                context.endNamespaceDecls();
                context.childAsAttributes(((com.sun.xml.bind.JAXBObject) _Conditions), "Conditions");
                context.endAttributes();
                context.childAsBody(((com.sun.xml.bind.JAXBObject) _Conditions), "Conditions");
                context.endElement();
            }
        }
        if (_Advice!= null) {
            if (_Advice instanceof javax.xml.bind.Element) {
                context.childAsBody(((com.sun.xml.bind.JAXBObject) _Advice), "Advice");
            } else {
                context.startElement("urn:oasis:names:tc:SAML:2.0:assertion", "Advice");
                context.childAsURIs(((com.sun.xml.bind.JAXBObject) _Advice), "Advice");
                context.endNamespaceDecls();
                context.childAsAttributes(((com.sun.xml.bind.JAXBObject) _Advice), "Advice");
                context.endAttributes();
                context.childAsBody(((com.sun.xml.bind.JAXBObject) _Advice), "Advice");
                context.endElement();
            }
        }
        while (idx5 != len5) {
            context.childAsBody(((com.sun.xml.bind.JAXBObject) _StatementOrAuthnStatementOrAuthzDecisionStatement.get(idx5 ++)), "StatementOrAuthnStatementOrAuthzDecisionStatement");
        }
    }

    public void serializeAttributes(com.sun.identity.saml2.jaxb.assertion.impl.runtime.XMLSerializer context)
        throws org.xml.sax.SAXException
    {
        int idx5 = 0;
        final int len5 = ((_StatementOrAuthnStatementOrAuthzDecisionStatement == null)? 0 :_StatementOrAuthnStatementOrAuthzDecisionStatement.size());
        context.startAttribute("", "ID");
        try {
            context.text(context.onID(this, ((java.lang.String) _ID)), "ID");
        } catch (java.lang.Exception e) {
            com.sun.identity.saml2.jaxb.assertion.impl.runtime.Util.handlePrintConversionException(this, e, context);
        }
        context.endAttribute();
        context.startAttribute("", "IssueInstant");
        try {
            context.text(com.sun.msv.datatype.xsd.DateTimeType.theInstance.serializeJavaObject(((java.util.Calendar) _IssueInstant), null), "IssueInstant");
        } catch (java.lang.Exception e) {
            com.sun.identity.saml2.jaxb.assertion.impl.runtime.Util.handlePrintConversionException(this, e, context);
        }
        context.endAttribute();
        context.startAttribute("", "Version");
        try {
            context.text(((java.lang.String) _Version), "Version");
        } catch (java.lang.Exception e) {
            com.sun.identity.saml2.jaxb.assertion.impl.runtime.Util.handlePrintConversionException(this, e, context);
        }
        context.endAttribute();
        if (_Issuer instanceof javax.xml.bind.Element) {
            context.childAsAttributes(((com.sun.xml.bind.JAXBObject) _Issuer), "Issuer");
        }
        if (_Signature!= null) {
            if (_Signature instanceof javax.xml.bind.Element) {
                context.childAsAttributes(((com.sun.xml.bind.JAXBObject) _Signature), "Signature");
            }
        }
        if (_Subject!= null) {
            if (_Subject instanceof javax.xml.bind.Element) {
                context.childAsAttributes(((com.sun.xml.bind.JAXBObject) _Subject), "Subject");
            }
        }
        if (_Conditions!= null) {
            if (_Conditions instanceof javax.xml.bind.Element) {
                context.childAsAttributes(((com.sun.xml.bind.JAXBObject) _Conditions), "Conditions");
            }
        }
        if (_Advice!= null) {
            if (_Advice instanceof javax.xml.bind.Element) {
                context.childAsAttributes(((com.sun.xml.bind.JAXBObject) _Advice), "Advice");
            }
        }
        while (idx5 != len5) {
            context.childAsAttributes(((com.sun.xml.bind.JAXBObject) _StatementOrAuthnStatementOrAuthzDecisionStatement.get(idx5 ++)), "StatementOrAuthnStatementOrAuthzDecisionStatement");
        }
    }

    public void serializeURIs(com.sun.identity.saml2.jaxb.assertion.impl.runtime.XMLSerializer context)
        throws org.xml.sax.SAXException
    {
        int idx5 = 0;
        final int len5 = ((_StatementOrAuthnStatementOrAuthzDecisionStatement == null)? 0 :_StatementOrAuthnStatementOrAuthzDecisionStatement.size());
        if (_Issuer instanceof javax.xml.bind.Element) {
            context.childAsURIs(((com.sun.xml.bind.JAXBObject) _Issuer), "Issuer");
        }
        if (_Signature!= null) {
            if (_Signature instanceof javax.xml.bind.Element) {
                context.childAsURIs(((com.sun.xml.bind.JAXBObject) _Signature), "Signature");
            }
        }
        if (_Subject!= null) {
            if (_Subject instanceof javax.xml.bind.Element) {
                context.childAsURIs(((com.sun.xml.bind.JAXBObject) _Subject), "Subject");
            }
        }
        if (_Conditions!= null) {
            if (_Conditions instanceof javax.xml.bind.Element) {
                context.childAsURIs(((com.sun.xml.bind.JAXBObject) _Conditions), "Conditions");
            }
        }
        if (_Advice!= null) {
            if (_Advice instanceof javax.xml.bind.Element) {
                context.childAsURIs(((com.sun.xml.bind.JAXBObject) _Advice), "Advice");
            }
        }
        while (idx5 != len5) {
            context.childAsURIs(((com.sun.xml.bind.JAXBObject) _StatementOrAuthnStatementOrAuthzDecisionStatement.get(idx5 ++)), "StatementOrAuthnStatementOrAuthzDecisionStatement");
        }
    }

    public java.lang.String ____jaxb____getId() {
        return ((java.lang.String) _ID);
    }

    public java.lang.Class getPrimaryInterface() {
        return (com.sun.identity.saml2.jaxb.assertion.AssertionType.class);
    }

    public com.sun.msv.verifier.DocumentDeclaration createRawValidator() {
        if (schemaFragment == null) {
            schemaFragment = com.sun.xml.bind.validator.SchemaDeserializer.deserialize((
 "\u00ac\u00ed\u0000\u0005sr\u0000\u001fcom.sun.msv.grammar.SequenceExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000\u001dcom.su"
+"n.msv.grammar.BinaryExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002L\u0000\u0004exp1t\u0000 Lcom/sun/msv/gra"
+"mmar/Expression;L\u0000\u0004exp2q\u0000~\u0000\u0002xr\u0000\u001ecom.sun.msv.grammar.Expressi"
+"on\u00f8\u0018\u0082\u00e8N5~O\u0002\u0000\u0002L\u0000\u0013epsilonReducibilityt\u0000\u0013Ljava/lang/Boolean;L\u0000\u000b"
+"expandedExpq\u0000~\u0000\u0002xpppsq\u0000~\u0000\u0000ppsq\u0000~\u0000\u0000ppsq\u0000~\u0000\u0000ppsq\u0000~\u0000\u0000ppsq\u0000~\u0000\u0000pp"
+"sq\u0000~\u0000\u0000ppsq\u0000~\u0000\u0000ppsr\u0000\u001dcom.sun.msv.grammar.ChoiceExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000"
+"xq\u0000~\u0000\u0001ppsr\u0000\'com.sun.msv.grammar.trex.ElementPattern\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002"
+"\u0000\u0001L\u0000\tnameClasst\u0000\u001fLcom/sun/msv/grammar/NameClass;xr\u0000\u001ecom.sun."
+"msv.grammar.ElementExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002Z\u0000\u001aignoreUndeclaredAttribut"
+"esL\u0000\fcontentModelq\u0000~\u0000\u0002xq\u0000~\u0000\u0003pp\u0000sq\u0000~\u0000\rppsr\u0000 com.sun.msv.gramm"
+"ar.OneOrMoreExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000\u001ccom.sun.msv.grammar.UnaryExp\u0000\u0000"
+"\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001L\u0000\u0003expq\u0000~\u0000\u0002xq\u0000~\u0000\u0003sr\u0000\u0011java.lang.Boolean\u00cd r\u0080\u00d5\u009c\u00fa\u00ee\u0002\u0000\u0001Z\u0000"
+"\u0005valuexp\u0000psr\u0000 com.sun.msv.grammar.AttributeExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002L\u0000\u0003"
+"expq\u0000~\u0000\u0002L\u0000\tnameClassq\u0000~\u0000\u0010xq\u0000~\u0000\u0003q\u0000~\u0000\u0018psr\u00002com.sun.msv.grammar"
+".Expression$AnyStringExpression\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u0003sq\u0000~\u0000\u0017\u0001q\u0000~\u0000\u001c"
+"sr\u0000 com.sun.msv.grammar.AnyNameClass\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000\u001dcom.sun.m"
+"sv.grammar.NameClass\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xpsr\u00000com.sun.msv.grammar.Exp"
+"ression$EpsilonExpression\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u0003q\u0000~\u0000\u001dq\u0000~\u0000\"sr\u0000#com."
+"sun.msv.grammar.SimpleNameClass\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002L\u0000\tlocalNamet\u0000\u0012Lja"
+"va/lang/String;L\u0000\fnamespaceURIq\u0000~\u0000$xq\u0000~\u0000\u001ft\u00003com.sun.identity"
+".saml2.jaxb.assertion.IssuerElementt\u0000+http://java.sun.com/ja"
+"xb/xjc/dummy-elementssq\u0000~\u0000\u000fpp\u0000sq\u0000~\u0000\u0000ppsq\u0000~\u0000\u000fpp\u0000sq\u0000~\u0000\rppsq\u0000~\u0000"
+"\u0014q\u0000~\u0000\u0018psq\u0000~\u0000\u0019q\u0000~\u0000\u0018pq\u0000~\u0000\u001cq\u0000~\u0000 q\u0000~\u0000\"sq\u0000~\u0000#t\u00000com.sun.identity."
+"saml2.jaxb.assertion.NameIDTypeq\u0000~\u0000\'sq\u0000~\u0000\rppsq\u0000~\u0000\u0019q\u0000~\u0000\u0018psr\u0000\u001b"
+"com.sun.msv.grammar.DataExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0003L\u0000\u0002dtt\u0000\u001fLorg/relaxng/d"
+"atatype/Datatype;L\u0000\u0006exceptq\u0000~\u0000\u0002L\u0000\u0004namet\u0000\u001dLcom/sun/msv/util/S"
+"tringPair;xq\u0000~\u0000\u0003ppsr\u0000\"com.sun.msv.datatype.xsd.QnameType\u0000\u0000\u0000\u0000"
+"\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000*com.sun.msv.datatype.xsd.BuiltinAtomicType\u0000\u0000\u0000\u0000\u0000\u0000\u0000"
+"\u0001\u0002\u0000\u0000xr\u0000%com.sun.msv.datatype.xsd.ConcreteType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000\'"
+"com.sun.msv.datatype.xsd.XSDatatypeImpl\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0003L\u0000\fnamespa"
+"ceUriq\u0000~\u0000$L\u0000\btypeNameq\u0000~\u0000$L\u0000\nwhiteSpacet\u0000.Lcom/sun/msv/datat"
+"ype/xsd/WhiteSpaceProcessor;xpt\u0000 http://www.w3.org/2001/XMLS"
+"chemat\u0000\u0005QNamesr\u00005com.sun.msv.datatype.xsd.WhiteSpaceProcesso"
+"r$Collapse\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000,com.sun.msv.datatype.xsd.WhiteSpace"
+"Processor\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xpsr\u00000com.sun.msv.grammar.Expression$Nul"
+"lSetExpression\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u0003q\u0000~\u0000\u0018psr\u0000\u001bcom.sun.msv.util.St"
+"ringPair\u00d0t\u001ejB\u008f\u008d\u00a0\u0002\u0000\u0002L\u0000\tlocalNameq\u0000~\u0000$L\u0000\fnamespaceURIq\u0000~\u0000$xpq\u0000"
+"~\u0000=q\u0000~\u0000<sq\u0000~\u0000#t\u0000\u0004typet\u0000)http://www.w3.org/2001/XMLSchema-ins"
+"tanceq\u0000~\u0000\"sq\u0000~\u0000#t\u0000\u0006Issuert\u0000%urn:oasis:names:tc:SAML:2.0:asse"
+"rtionsq\u0000~\u0000\rppsq\u0000~\u0000\rq\u0000~\u0000\u0018psq\u0000~\u0000\u000fq\u0000~\u0000\u0018p\u0000sq\u0000~\u0000\rppsq\u0000~\u0000\u0014q\u0000~\u0000\u0018psq"
+"\u0000~\u0000\u0019q\u0000~\u0000\u0018pq\u0000~\u0000\u001cq\u0000~\u0000 q\u0000~\u0000\"sq\u0000~\u0000#t\u00003com.sun.identity.saml2.jax"
+"b.xmlsig.SignatureElementq\u0000~\u0000\'sq\u0000~\u0000\u000fq\u0000~\u0000\u0018p\u0000sq\u0000~\u0000\u0000ppsq\u0000~\u0000\u000fpp\u0000"
+"sq\u0000~\u0000\rppsq\u0000~\u0000\u0014q\u0000~\u0000\u0018psq\u0000~\u0000\u0019q\u0000~\u0000\u0018pq\u0000~\u0000\u001cq\u0000~\u0000 q\u0000~\u0000\"sq\u0000~\u0000#t\u00000com."
+"sun.identity.saml2.jaxb.xmlsig.SignatureTypeq\u0000~\u0000\'sq\u0000~\u0000\rppsq\u0000"
+"~\u0000\u0019q\u0000~\u0000\u0018pq\u0000~\u00005q\u0000~\u0000Eq\u0000~\u0000\"sq\u0000~\u0000#t\u0000\tSignaturet\u0000\"http://www.w3.o"
+"rg/2000/09/xmldsig#q\u0000~\u0000\"sq\u0000~\u0000\rppsq\u0000~\u0000\rq\u0000~\u0000\u0018psq\u0000~\u0000\u000fq\u0000~\u0000\u0018p\u0000sq\u0000"
+"~\u0000\rppsq\u0000~\u0000\u0014q\u0000~\u0000\u0018psq\u0000~\u0000\u0019q\u0000~\u0000\u0018pq\u0000~\u0000\u001cq\u0000~\u0000 q\u0000~\u0000\"sq\u0000~\u0000#t\u00004com.sun"
+".identity.saml2.jaxb.assertion.SubjectElementq\u0000~\u0000\'sq\u0000~\u0000\u000fq\u0000~\u0000"
+"\u0018p\u0000sq\u0000~\u0000\u0000ppsq\u0000~\u0000\u000fpp\u0000sq\u0000~\u0000\rppsq\u0000~\u0000\u0014q\u0000~\u0000\u0018psq\u0000~\u0000\u0019q\u0000~\u0000\u0018pq\u0000~\u0000\u001cq\u0000~"
+"\u0000 q\u0000~\u0000\"sq\u0000~\u0000#t\u00001com.sun.identity.saml2.jaxb.assertion.Subjec"
+"tTypeq\u0000~\u0000\'sq\u0000~\u0000\rppsq\u0000~\u0000\u0019q\u0000~\u0000\u0018pq\u0000~\u00005q\u0000~\u0000Eq\u0000~\u0000\"sq\u0000~\u0000#t\u0000\u0007Subjec"
+"tq\u0000~\u0000Jq\u0000~\u0000\"sq\u0000~\u0000\rppsq\u0000~\u0000\rq\u0000~\u0000\u0018psq\u0000~\u0000\u000fq\u0000~\u0000\u0018p\u0000sq\u0000~\u0000\rppsq\u0000~\u0000\u0014q\u0000"
+"~\u0000\u0018psq\u0000~\u0000\u0019q\u0000~\u0000\u0018pq\u0000~\u0000\u001cq\u0000~\u0000 q\u0000~\u0000\"sq\u0000~\u0000#t\u00007com.sun.identity.sam"
+"l2.jaxb.assertion.ConditionsElementq\u0000~\u0000\'sq\u0000~\u0000\u000fq\u0000~\u0000\u0018p\u0000sq\u0000~\u0000\u0000p"
+"psq\u0000~\u0000\u000fpp\u0000sq\u0000~\u0000\rppsq\u0000~\u0000\u0014q\u0000~\u0000\u0018psq\u0000~\u0000\u0019q\u0000~\u0000\u0018pq\u0000~\u0000\u001cq\u0000~\u0000 q\u0000~\u0000\"sq\u0000"
+"~\u0000#t\u00004com.sun.identity.saml2.jaxb.assertion.ConditionsTypeq\u0000"
+"~\u0000\'sq\u0000~\u0000\rppsq\u0000~\u0000\u0019q\u0000~\u0000\u0018pq\u0000~\u00005q\u0000~\u0000Eq\u0000~\u0000\"sq\u0000~\u0000#t\u0000\nConditionsq\u0000~"
+"\u0000Jq\u0000~\u0000\"sq\u0000~\u0000\rppsq\u0000~\u0000\rq\u0000~\u0000\u0018psq\u0000~\u0000\u000fq\u0000~\u0000\u0018p\u0000sq\u0000~\u0000\rppsq\u0000~\u0000\u0014q\u0000~\u0000\u0018p"
+"sq\u0000~\u0000\u0019q\u0000~\u0000\u0018pq\u0000~\u0000\u001cq\u0000~\u0000 q\u0000~\u0000\"sq\u0000~\u0000#t\u00003com.sun.identity.saml2.j"
+"axb.assertion.AdviceElementq\u0000~\u0000\'sq\u0000~\u0000\u000fq\u0000~\u0000\u0018p\u0000sq\u0000~\u0000\u0000ppsq\u0000~\u0000\u000fp"
+"p\u0000sq\u0000~\u0000\rppsq\u0000~\u0000\u0014q\u0000~\u0000\u0018psq\u0000~\u0000\u0019q\u0000~\u0000\u0018pq\u0000~\u0000\u001cq\u0000~\u0000 q\u0000~\u0000\"sq\u0000~\u0000#t\u00000co"
+"m.sun.identity.saml2.jaxb.assertion.AdviceTypeq\u0000~\u0000\'sq\u0000~\u0000\rpps"
+"q\u0000~\u0000\u0019q\u0000~\u0000\u0018pq\u0000~\u00005q\u0000~\u0000Eq\u0000~\u0000\"sq\u0000~\u0000#t\u0000\u0006Adviceq\u0000~\u0000Jq\u0000~\u0000\"sq\u0000~\u0000\rpps"
+"q\u0000~\u0000\u0014q\u0000~\u0000\u0018psq\u0000~\u0000\rq\u0000~\u0000\u0018psq\u0000~\u0000\rq\u0000~\u0000\u0018psq\u0000~\u0000\rq\u0000~\u0000\u0018psq\u0000~\u0000\u000fq\u0000~\u0000\u0018p\u0000"
+"sq\u0000~\u0000\rppsq\u0000~\u0000\u0014q\u0000~\u0000\u0018psq\u0000~\u0000\u0019q\u0000~\u0000\u0018pq\u0000~\u0000\u001cq\u0000~\u0000 q\u0000~\u0000\"sq\u0000~\u0000#t\u00006com."
+"sun.identity.saml2.jaxb.assertion.StatementElementq\u0000~\u0000\'sq\u0000~\u0000"
+"\u000fq\u0000~\u0000\u0018p\u0000sq\u0000~\u0000\rppsq\u0000~\u0000\u0014q\u0000~\u0000\u0018psq\u0000~\u0000\u0019q\u0000~\u0000\u0018pq\u0000~\u0000\u001cq\u0000~\u0000 q\u0000~\u0000\"sq\u0000~\u0000"
+"#t\u0000;com.sun.identity.saml2.jaxb.assertion.AuthnStatementElem"
+"entq\u0000~\u0000\'sq\u0000~\u0000\u000fq\u0000~\u0000\u0018p\u0000sq\u0000~\u0000\rppsq\u0000~\u0000\u0014q\u0000~\u0000\u0018psq\u0000~\u0000\u0019q\u0000~\u0000\u0018pq\u0000~\u0000\u001cq\u0000"
+"~\u0000 q\u0000~\u0000\"sq\u0000~\u0000#t\u0000Ccom.sun.identity.saml2.jaxb.assertion.Authz"
+"DecisionStatementElementq\u0000~\u0000\'sq\u0000~\u0000\u000fq\u0000~\u0000\u0018p\u0000sq\u0000~\u0000\rppsq\u0000~\u0000\u0014q\u0000~\u0000"
+"\u0018psq\u0000~\u0000\u0019q\u0000~\u0000\u0018pq\u0000~\u0000\u001cq\u0000~\u0000 q\u0000~\u0000\"sq\u0000~\u0000#t\u0000?com.sun.identity.saml2"
+".jaxb.assertion.AttributeStatementElementq\u0000~\u0000\'q\u0000~\u0000\"sq\u0000~\u0000\u0019pps"
+"q\u0000~\u00002ppsr\u0000\u001fcom.sun.msv.datatype.xsd.IDType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000#com"
+".sun.msv.datatype.xsd.NcnameType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000\"com.sun.msv.d"
+"atatype.xsd.TokenType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000#com.sun.msv.datatype.xsd"
+".StringType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001Z\u0000\risAlwaysValidxq\u0000~\u00007q\u0000~\u0000<t\u0000\u0002IDq\u0000~\u0000@\u0000"
+"q\u0000~\u0000Bsq\u0000~\u0000Cq\u0000~\u0000\u00c0q\u0000~\u0000<sq\u0000~\u0000#t\u0000\u0002IDt\u0000\u0000sq\u0000~\u0000\u0019ppsq\u0000~\u00002ppsr\u0000%com.s"
+"un.msv.datatype.xsd.DateTimeType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000)com.sun.msv.d"
+"atatype.xsd.DateTimeBaseType\u0014W\u001a@3\u00a5\u00b4\u00e5\u0002\u0000\u0000xq\u0000~\u00007q\u0000~\u0000<t\u0000\bdateTim"
+"eq\u0000~\u0000@q\u0000~\u0000Bsq\u0000~\u0000Cq\u0000~\u0000\u00caq\u0000~\u0000<sq\u0000~\u0000#t\u0000\fIssueInstantq\u0000~\u0000\u00c4sq\u0000~\u0000\u0019p"
+"psq\u0000~\u00002q\u0000~\u0000\u0018psq\u0000~\u0000\u00beq\u0000~\u0000<t\u0000\u0006stringsr\u00005com.sun.msv.datatype.xs"
+"d.WhiteSpaceProcessor$Preserve\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000?\u0001q\u0000~\u0000Bsq\u0000~\u0000Cq"
+"\u0000~\u0000\u00d1q\u0000~\u0000<sq\u0000~\u0000#t\u0000\u0007Versionq\u0000~\u0000\u00c4sr\u0000\"com.sun.msv.grammar.Expres"
+"sionPool\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001L\u0000\bexpTablet\u0000/Lcom/sun/msv/grammar/Expres"
+"sionPool$ClosedHash;xpsr\u0000-com.sun.msv.grammar.ExpressionPool"
+"$ClosedHash\u00d7j\u00d0N\u00ef\u00e8\u00ed\u001c\u0003\u0000\u0003I\u0000\u0005countB\u0000\rstreamVersionL\u0000\u0006parentt\u0000$Lc"
+"om/sun/msv/grammar/ExpressionPool;xp\u0000\u0000\u0000<\u0001pq\u0000~\u0000\u0080q\u0000~\u0000xq\u0000~\u0000lq\u0000~"
+"\u0000dq\u0000~\u0000Wq\u0000~\u0000Oq\u0000~\u0000,q\u0000~\u0000\u0016q\u0000~\u0000\u000bq\u0000~\u0000\u00b4q\u0000~\u0000\u00aeq\u0000~\u0000\u00a8q\u0000~\u0000\u00a2q\u0000~\u0000\u0093q\u0000~\u0000\u008bq\u0000~"
+"\u0000\u009cq\u0000~\u0000\u007fq\u0000~\u0000wq\u0000~\u0000kq\u0000~\u0000cq\u0000~\u0000Vq\u0000~\u0000Nq\u0000~\u0000+q\u0000~\u0000\u0013q\u0000~\u0000\u0091q\u0000~\u0000}q\u0000~\u0000iq\u0000~"
+"\u0000Tq\u0000~\u0000)q\u0000~\u0000\nq\u0000~\u0000\u00a0q\u0000~\u0000\u0088q\u0000~\u0000tq\u0000~\u0000`q\u0000~\u0000Kq\u0000~\u0000\u0006q\u0000~\u0000\u0089q\u0000~\u0000uq\u0000~\u0000aq\u0000~"
+"\u0000Lq\u0000~\u0000\u000eq\u0000~\u0000\u009fq\u0000~\u0000\u0005q\u0000~\u0000\u009dq\u0000~\u0000\bq\u0000~\u0000\u009eq\u0000~\u0000\u0098q\u0000~\u0000\u0084q\u0000~\u0000pq\u0000~\u0000[q\u0000~\u00000q\u0000~"
+"\u0000\fq\u0000~\u0000\u0007q\u0000~\u0000\tq\u0000~\u0000\u00b5q\u0000~\u0000\u00afq\u0000~\u0000\u00a9q\u0000~\u0000\u00a3q\u0000~\u0000\u0094q\u0000~\u0000\u008cx"));
        }
        return new com.sun.msv.verifier.regexp.REDocumentDeclaration(schemaFragment);
    }

    public class Unmarshaller
        extends com.sun.identity.saml2.jaxb.assertion.impl.runtime.AbstractUnmarshallingEventHandlerImpl
    {


        public Unmarshaller(com.sun.identity.saml2.jaxb.assertion.impl.runtime.UnmarshallingContext context) {
            super(context, "--------------------------");
        }

        protected Unmarshaller(com.sun.identity.saml2.jaxb.assertion.impl.runtime.UnmarshallingContext context, int startState) {
            this(context);
            state = startState;
        }

        public java.lang.Object owner() {
            return com.sun.identity.saml2.jaxb.assertion.impl.AssertionTypeImpl.this;
        }

        public void enterElement(java.lang.String ___uri, java.lang.String ___local, java.lang.String ___qname, org.xml.sax.Attributes __atts)
            throws org.xml.sax.SAXException
        {
            int attIdx;
            outer:
            while (true) {
                switch (state) {
                    case  11 :
                        attIdx = context.getAttribute("", "Id");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().enterElement(___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        if (("SignedInfo" == ___local)&&("http://www.w3.org/2000/09/xmldsig#" == ___uri)) {
                            _Signature = ((com.sun.identity.saml2.jaxb.xmlsig.impl.SignatureTypeImpl) spawnChildFromEnterElement((com.sun.identity.saml2.jaxb.xmlsig.impl.SignatureTypeImpl.class), 12, ___uri, ___local, ___qname, __atts));
                            return ;
                        }
                        if (("SignedInfo" == ___local)&&("http://www.w3.org/2000/09/xmldsig#" == ___uri)) {
                            _Signature = ((com.sun.identity.saml2.jaxb.xmlsig.impl.SignatureTypeImpl) spawnChildFromEnterElement((com.sun.identity.saml2.jaxb.xmlsig.impl.SignatureTypeImpl.class), 12, ___uri, ___local, ___qname, __atts));
                            return ;
                        }
                        break;
                    case  0 :
                        attIdx = context.getAttribute("", "ID");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            state = 3;
                            eatText1(v);
                            continue outer;
                        }
                        break;
                    case  10 :
                        if (("Signature" == ___local)&&("http://www.w3.org/2000/09/xmldsig#" == ___uri)) {
                            _Signature = ((com.sun.identity.saml2.jaxb.xmlsig.impl.SignatureElementImpl) spawnChildFromEnterElement((com.sun.identity.saml2.jaxb.xmlsig.impl.SignatureElementImpl.class), 13, ___uri, ___local, ___qname, __atts));
                            return ;
                        }
                        if (("Signature" == ___local)&&("http://www.w3.org/2000/09/xmldsig#" == ___uri)) {
                            context.pushAttributes(__atts, false);
                            state = 11;
                            return ;
                        }
                        state = 13;
                        continue outer;
                    case  13 :
                        if (("Subject" == ___local)&&("urn:oasis:names:tc:SAML:2.0:assertion" == ___uri)) {
                            _Subject = ((com.sun.identity.saml2.jaxb.assertion.impl.SubjectElementImpl) spawnChildFromEnterElement((com.sun.identity.saml2.jaxb.assertion.impl.SubjectElementImpl.class), 14, ___uri, ___local, ___qname, __atts));
                            return ;
                        }
                        if (("Subject" == ___local)&&("urn:oasis:names:tc:SAML:2.0:assertion" == ___uri)) {
                            context.pushAttributes(__atts, false);
                            state = 22;
                            return ;
                        }
                        state = 14;
                        continue outer;
                    case  15 :
                        attIdx = context.getAttribute("", "NotBefore");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().enterElement(___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        attIdx = context.getAttribute("", "NotOnOrAfter");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().enterElement(___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        if (("Condition" == ___local)&&("urn:oasis:names:tc:SAML:2.0:assertion" == ___uri)) {
                            _Conditions = ((com.sun.identity.saml2.jaxb.assertion.impl.ConditionsTypeImpl) spawnChildFromEnterElement((com.sun.identity.saml2.jaxb.assertion.impl.ConditionsTypeImpl.class), 16, ___uri, ___local, ___qname, __atts));
                            return ;
                        }
                        if (("AudienceRestriction" == ___local)&&("urn:oasis:names:tc:SAML:2.0:assertion" == ___uri)) {
                            _Conditions = ((com.sun.identity.saml2.jaxb.assertion.impl.ConditionsTypeImpl) spawnChildFromEnterElement((com.sun.identity.saml2.jaxb.assertion.impl.ConditionsTypeImpl.class), 16, ___uri, ___local, ___qname, __atts));
                            return ;
                        }
                        if (("OneTimeUse" == ___local)&&("urn:oasis:names:tc:SAML:2.0:assertion" == ___uri)) {
                            _Conditions = ((com.sun.identity.saml2.jaxb.assertion.impl.ConditionsTypeImpl) spawnChildFromEnterElement((com.sun.identity.saml2.jaxb.assertion.impl.ConditionsTypeImpl.class), 16, ___uri, ___local, ___qname, __atts));
                            return ;
                        }
                        if (("ProxyRestriction" == ___local)&&("urn:oasis:names:tc:SAML:2.0:assertion" == ___uri)) {
                            _Conditions = ((com.sun.identity.saml2.jaxb.assertion.impl.ConditionsTypeImpl) spawnChildFromEnterElement((com.sun.identity.saml2.jaxb.assertion.impl.ConditionsTypeImpl.class), 16, ___uri, ___local, ___qname, __atts));
                            return ;
                        }
                        _Conditions = ((com.sun.identity.saml2.jaxb.assertion.impl.ConditionsTypeImpl) spawnChildFromEnterElement((com.sun.identity.saml2.jaxb.assertion.impl.ConditionsTypeImpl.class), 16, ___uri, ___local, ___qname, __atts));
                        return ;
                    case  17 :
                        if (("Advice" == ___local)&&("urn:oasis:names:tc:SAML:2.0:assertion" == ___uri)) {
                            _Advice = ((com.sun.identity.saml2.jaxb.assertion.impl.AdviceElementImpl) spawnChildFromEnterElement((com.sun.identity.saml2.jaxb.assertion.impl.AdviceElementImpl.class), 18, ___uri, ___local, ___qname, __atts));
                            return ;
                        }
                        if (("Advice" == ___local)&&("urn:oasis:names:tc:SAML:2.0:assertion" == ___uri)) {
                            context.pushAttributes(__atts, false);
                            state = 20;
                            return ;
                        }
                        state = 18;
                        continue outer;
                    case  14 :
                        if (("Conditions" == ___local)&&("urn:oasis:names:tc:SAML:2.0:assertion" == ___uri)) {
                            _Conditions = ((com.sun.identity.saml2.jaxb.assertion.impl.ConditionsElementImpl) spawnChildFromEnterElement((com.sun.identity.saml2.jaxb.assertion.impl.ConditionsElementImpl.class), 17, ___uri, ___local, ___qname, __atts));
                            return ;
                        }
                        if (("Conditions" == ___local)&&("urn:oasis:names:tc:SAML:2.0:assertion" == ___uri)) {
                            context.pushAttributes(__atts, false);
                            state = 15;
                            return ;
                        }
                        state = 17;
                        continue outer;
                    case  18 :
                        if (("Statement" == ___local)&&("urn:oasis:names:tc:SAML:2.0:assertion" == ___uri)) {
                            _getStatementOrAuthnStatementOrAuthzDecisionStatement().add(((com.sun.identity.saml2.jaxb.assertion.impl.StatementElementImpl) spawnChildFromEnterElement((com.sun.identity.saml2.jaxb.assertion.impl.StatementElementImpl.class), 19, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("AuthnStatement" == ___local)&&("urn:oasis:names:tc:SAML:2.0:assertion" == ___uri)) {
                            _getStatementOrAuthnStatementOrAuthzDecisionStatement().add(((com.sun.identity.saml2.jaxb.assertion.impl.AuthnStatementElementImpl) spawnChildFromEnterElement((com.sun.identity.saml2.jaxb.assertion.impl.AuthnStatementElementImpl.class), 19, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("AuthzDecisionStatement" == ___local)&&("urn:oasis:names:tc:SAML:2.0:assertion" == ___uri)) {
                            _getStatementOrAuthnStatementOrAuthzDecisionStatement().add(((com.sun.identity.saml2.jaxb.assertion.impl.AuthzDecisionStatementElementImpl) spawnChildFromEnterElement((com.sun.identity.saml2.jaxb.assertion.impl.AuthzDecisionStatementElementImpl.class), 19, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("AttributeStatement" == ___local)&&("urn:oasis:names:tc:SAML:2.0:assertion" == ___uri)) {
                            _getStatementOrAuthnStatementOrAuthzDecisionStatement().add(((com.sun.identity.saml2.jaxb.assertion.impl.AttributeStatementElementImpl) spawnChildFromEnterElement((com.sun.identity.saml2.jaxb.assertion.impl.AttributeStatementElementImpl.class), 19, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        state = 19;
                        continue outer;
                    case  19 :
                        if (("Statement" == ___local)&&("urn:oasis:names:tc:SAML:2.0:assertion" == ___uri)) {
                            _getStatementOrAuthnStatementOrAuthzDecisionStatement().add(((com.sun.identity.saml2.jaxb.assertion.impl.StatementElementImpl) spawnChildFromEnterElement((com.sun.identity.saml2.jaxb.assertion.impl.StatementElementImpl.class), 19, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("AuthnStatement" == ___local)&&("urn:oasis:names:tc:SAML:2.0:assertion" == ___uri)) {
                            _getStatementOrAuthnStatementOrAuthzDecisionStatement().add(((com.sun.identity.saml2.jaxb.assertion.impl.AuthnStatementElementImpl) spawnChildFromEnterElement((com.sun.identity.saml2.jaxb.assertion.impl.AuthnStatementElementImpl.class), 19, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("AuthzDecisionStatement" == ___local)&&("urn:oasis:names:tc:SAML:2.0:assertion" == ___uri)) {
                            _getStatementOrAuthnStatementOrAuthzDecisionStatement().add(((com.sun.identity.saml2.jaxb.assertion.impl.AuthzDecisionStatementElementImpl) spawnChildFromEnterElement((com.sun.identity.saml2.jaxb.assertion.impl.AuthzDecisionStatementElementImpl.class), 19, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("AttributeStatement" == ___local)&&("urn:oasis:names:tc:SAML:2.0:assertion" == ___uri)) {
                            _getStatementOrAuthnStatementOrAuthzDecisionStatement().add(((com.sun.identity.saml2.jaxb.assertion.impl.AttributeStatementElementImpl) spawnChildFromEnterElement((com.sun.identity.saml2.jaxb.assertion.impl.AttributeStatementElementImpl.class), 19, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        revertToParentFromEnterElement(___uri, ___local, ___qname, __atts);
                        return ;
                    case  20 :
                        if (("AssertionIDRef" == ___local)&&("urn:oasis:names:tc:SAML:2.0:assertion" == ___uri)) {
                            _Advice = ((com.sun.identity.saml2.jaxb.assertion.impl.AdviceTypeImpl) spawnChildFromEnterElement((com.sun.identity.saml2.jaxb.assertion.impl.AdviceTypeImpl.class), 21, ___uri, ___local, ___qname, __atts));
                            return ;
                        }
                        if (("AssertionURIRef" == ___local)&&("urn:oasis:names:tc:SAML:2.0:assertion" == ___uri)) {
                            _Advice = ((com.sun.identity.saml2.jaxb.assertion.impl.AdviceTypeImpl) spawnChildFromEnterElement((com.sun.identity.saml2.jaxb.assertion.impl.AdviceTypeImpl.class), 21, ___uri, ___local, ___qname, __atts));
                            return ;
                        }
                        if (("Assertion" == ___local)&&("urn:oasis:names:tc:SAML:2.0:assertion" == ___uri)) {
                            _Advice = ((com.sun.identity.saml2.jaxb.assertion.impl.AdviceTypeImpl) spawnChildFromEnterElement((com.sun.identity.saml2.jaxb.assertion.impl.AdviceTypeImpl.class), 21, ___uri, ___local, ___qname, __atts));
                            return ;
                        }
                        if (("EncryptedAssertion" == ___local)&&("urn:oasis:names:tc:SAML:2.0:assertion" == ___uri)) {
                            _Advice = ((com.sun.identity.saml2.jaxb.assertion.impl.AdviceTypeImpl) spawnChildFromEnterElement((com.sun.identity.saml2.jaxb.assertion.impl.AdviceTypeImpl.class), 21, ___uri, ___local, ___qname, __atts));
                            return ;
                        }
                        if (!(("" == ___uri)||("urn:oasis:names:tc:SAML:2.0:assertion" == ___uri))) {
                            _Advice = ((com.sun.identity.saml2.jaxb.assertion.impl.AdviceTypeImpl) spawnChildFromEnterElement((com.sun.identity.saml2.jaxb.assertion.impl.AdviceTypeImpl.class), 21, ___uri, ___local, ___qname, __atts));
                            return ;
                        }
                        _Advice = ((com.sun.identity.saml2.jaxb.assertion.impl.AdviceTypeImpl) spawnChildFromEnterElement((com.sun.identity.saml2.jaxb.assertion.impl.AdviceTypeImpl.class), 21, ___uri, ___local, ___qname, __atts));
                        return ;
                    case  22 :
                        if (("BaseID" == ___local)&&("urn:oasis:names:tc:SAML:2.0:assertion" == ___uri)) {
                            _Subject = ((com.sun.identity.saml2.jaxb.assertion.impl.SubjectTypeImpl) spawnChildFromEnterElement((com.sun.identity.saml2.jaxb.assertion.impl.SubjectTypeImpl.class), 23, ___uri, ___local, ___qname, __atts));
                            return ;
                        }
                        if (("BaseID" == ___local)&&("urn:oasis:names:tc:SAML:2.0:assertion" == ___uri)) {
                            _Subject = ((com.sun.identity.saml2.jaxb.assertion.impl.SubjectTypeImpl) spawnChildFromEnterElement((com.sun.identity.saml2.jaxb.assertion.impl.SubjectTypeImpl.class), 23, ___uri, ___local, ___qname, __atts));
                            return ;
                        }
                        if (("NameID" == ___local)&&("urn:oasis:names:tc:SAML:2.0:assertion" == ___uri)) {
                            _Subject = ((com.sun.identity.saml2.jaxb.assertion.impl.SubjectTypeImpl) spawnChildFromEnterElement((com.sun.identity.saml2.jaxb.assertion.impl.SubjectTypeImpl.class), 23, ___uri, ___local, ___qname, __atts));
                            return ;
                        }
                        if (("NameID" == ___local)&&("urn:oasis:names:tc:SAML:2.0:assertion" == ___uri)) {
                            _Subject = ((com.sun.identity.saml2.jaxb.assertion.impl.SubjectTypeImpl) spawnChildFromEnterElement((com.sun.identity.saml2.jaxb.assertion.impl.SubjectTypeImpl.class), 23, ___uri, ___local, ___qname, __atts));
                            return ;
                        }
                        if (("EncryptedID" == ___local)&&("urn:oasis:names:tc:SAML:2.0:assertion" == ___uri)) {
                            _Subject = ((com.sun.identity.saml2.jaxb.assertion.impl.SubjectTypeImpl) spawnChildFromEnterElement((com.sun.identity.saml2.jaxb.assertion.impl.SubjectTypeImpl.class), 23, ___uri, ___local, ___qname, __atts));
                            return ;
                        }
                        if (("EncryptedID" == ___local)&&("urn:oasis:names:tc:SAML:2.0:assertion" == ___uri)) {
                            _Subject = ((com.sun.identity.saml2.jaxb.assertion.impl.SubjectTypeImpl) spawnChildFromEnterElement((com.sun.identity.saml2.jaxb.assertion.impl.SubjectTypeImpl.class), 23, ___uri, ___local, ___qname, __atts));
                            return ;
                        }
                        if (("SubjectConfirmation" == ___local)&&("urn:oasis:names:tc:SAML:2.0:assertion" == ___uri)) {
                            _Subject = ((com.sun.identity.saml2.jaxb.assertion.impl.SubjectTypeImpl) spawnChildFromEnterElement((com.sun.identity.saml2.jaxb.assertion.impl.SubjectTypeImpl.class), 23, ___uri, ___local, ___qname, __atts));
                            return ;
                        }
                        if (("SubjectConfirmation" == ___local)&&("urn:oasis:names:tc:SAML:2.0:assertion" == ___uri)) {
                            _Subject = ((com.sun.identity.saml2.jaxb.assertion.impl.SubjectTypeImpl) spawnChildFromEnterElement((com.sun.identity.saml2.jaxb.assertion.impl.SubjectTypeImpl.class), 23, ___uri, ___local, ___qname, __atts));
                            return ;
                        }
                        break;
                    case  6 :
                        attIdx = context.getAttribute("", "Version");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            state = 9;
                            eatText2(v);
                            continue outer;
                        }
                        break;
                    case  3 :
                        attIdx = context.getAttribute("", "IssueInstant");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            state = 6;
                            eatText3(v);
                            continue outer;
                        }
                        break;
                    case  9 :
                        if (("Issuer" == ___local)&&("urn:oasis:names:tc:SAML:2.0:assertion" == ___uri)) {
                            _Issuer = ((com.sun.identity.saml2.jaxb.assertion.impl.IssuerElementImpl) spawnChildFromEnterElement((com.sun.identity.saml2.jaxb.assertion.impl.IssuerElementImpl.class), 10, ___uri, ___local, ___qname, __atts));
                            return ;
                        }
                        if (("Issuer" == ___local)&&("urn:oasis:names:tc:SAML:2.0:assertion" == ___uri)) {
                            context.pushAttributes(__atts, true);
                            state = 24;
                            return ;
                        }
                        break;
                    case  24 :
                        attIdx = context.getAttribute("", "NameQualifier");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().enterElement(___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        attIdx = context.getAttribute("", "SPNameQualifier");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().enterElement(___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        attIdx = context.getAttribute("", "Format");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().enterElement(___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        attIdx = context.getAttribute("", "SPProvidedID");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().enterElement(___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        break;
                }
                super.enterElement(___uri, ___local, ___qname, __atts);
                break;
            }
        }

        private void eatText1(final java.lang.String value)
            throws org.xml.sax.SAXException
        {
            try {
                _ID = context.addToIdTable(com.sun.xml.bind.WhiteSpaceProcessor.collapse(value));
            } catch (java.lang.Exception e) {
                handleParseConversionException(e);
            }
        }

        private void eatText2(final java.lang.String value)
            throws org.xml.sax.SAXException
        {
            try {
                _Version = value;
            } catch (java.lang.Exception e) {
                handleParseConversionException(e);
            }
        }

        private void eatText3(final java.lang.String value)
            throws org.xml.sax.SAXException
        {
            try {
                _IssueInstant = ((java.util.Calendar) com.sun.msv.datatype.xsd.DateTimeType.theInstance.createJavaObject(com.sun.xml.bind.WhiteSpaceProcessor.collapse(value), null));
            } catch (java.lang.Exception e) {
                handleParseConversionException(e);
            }
        }

        public void leaveElement(java.lang.String ___uri, java.lang.String ___local, java.lang.String ___qname)
            throws org.xml.sax.SAXException
        {
            int attIdx;
            outer:
            while (true) {
                switch (state) {
                    case  11 :
                        attIdx = context.getAttribute("", "Id");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().leaveElement(___uri, ___local, ___qname);
                            return ;
                        }
                        break;
                    case  0 :
                        attIdx = context.getAttribute("", "ID");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            state = 3;
                            eatText1(v);
                            continue outer;
                        }
                        break;
                    case  10 :
                        state = 13;
                        continue outer;
                    case  13 :
                        state = 14;
                        continue outer;
                    case  15 :
                        attIdx = context.getAttribute("", "NotBefore");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().leaveElement(___uri, ___local, ___qname);
                            return ;
                        }
                        attIdx = context.getAttribute("", "NotOnOrAfter");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().leaveElement(___uri, ___local, ___qname);
                            return ;
                        }
                        _Conditions = ((com.sun.identity.saml2.jaxb.assertion.impl.ConditionsTypeImpl) spawnChildFromLeaveElement((com.sun.identity.saml2.jaxb.assertion.impl.ConditionsTypeImpl.class), 16, ___uri, ___local, ___qname));
                        return ;
                    case  21 :
                        if (("Advice" == ___local)&&("urn:oasis:names:tc:SAML:2.0:assertion" == ___uri)) {
                            context.popAttributes();
                            state = 18;
                            return ;
                        }
                        break;
                    case  23 :
                        if (("Subject" == ___local)&&("urn:oasis:names:tc:SAML:2.0:assertion" == ___uri)) {
                            context.popAttributes();
                            state = 14;
                            return ;
                        }
                        break;
                    case  17 :
                        state = 18;
                        continue outer;
                    case  14 :
                        state = 17;
                        continue outer;
                    case  18 :
                        state = 19;
                        continue outer;
                    case  12 :
                        if (("Signature" == ___local)&&("http://www.w3.org/2000/09/xmldsig#" == ___uri)) {
                            context.popAttributes();
                            state = 13;
                            return ;
                        }
                        break;
                    case  19 :
                        revertToParentFromLeaveElement(___uri, ___local, ___qname);
                        return ;
                    case  20 :
                        _Advice = ((com.sun.identity.saml2.jaxb.assertion.impl.AdviceTypeImpl) spawnChildFromLeaveElement((com.sun.identity.saml2.jaxb.assertion.impl.AdviceTypeImpl.class), 21, ___uri, ___local, ___qname));
                        return ;
                    case  16 :
                        if (("Conditions" == ___local)&&("urn:oasis:names:tc:SAML:2.0:assertion" == ___uri)) {
                            context.popAttributes();
                            state = 17;
                            return ;
                        }
                        break;
                    case  6 :
                        attIdx = context.getAttribute("", "Version");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            state = 9;
                            eatText2(v);
                            continue outer;
                        }
                        break;
                    case  3 :
                        attIdx = context.getAttribute("", "IssueInstant");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            state = 6;
                            eatText3(v);
                            continue outer;
                        }
                        break;
                    case  25 :
                        if (("Issuer" == ___local)&&("urn:oasis:names:tc:SAML:2.0:assertion" == ___uri)) {
                            context.popAttributes();
                            state = 10;
                            return ;
                        }
                        break;
                    case  24 :
                        attIdx = context.getAttribute("", "NameQualifier");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().leaveElement(___uri, ___local, ___qname);
                            return ;
                        }
                        attIdx = context.getAttribute("", "SPNameQualifier");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().leaveElement(___uri, ___local, ___qname);
                            return ;
                        }
                        attIdx = context.getAttribute("", "Format");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().leaveElement(___uri, ___local, ___qname);
                            return ;
                        }
                        attIdx = context.getAttribute("", "SPProvidedID");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().leaveElement(___uri, ___local, ___qname);
                            return ;
                        }
                        break;
                }
                super.leaveElement(___uri, ___local, ___qname);
                break;
            }
        }

        public void enterAttribute(java.lang.String ___uri, java.lang.String ___local, java.lang.String ___qname)
            throws org.xml.sax.SAXException
        {
            int attIdx;
            outer:
            while (true) {
                switch (state) {
                    case  11 :
                        if (("Id" == ___local)&&("" == ___uri)) {
                            _Signature = ((com.sun.identity.saml2.jaxb.xmlsig.impl.SignatureTypeImpl) spawnChildFromEnterAttribute((com.sun.identity.saml2.jaxb.xmlsig.impl.SignatureTypeImpl.class), 12, ___uri, ___local, ___qname));
                            return ;
                        }
                        break;
                    case  0 :
                        if (("ID" == ___local)&&("" == ___uri)) {
                            state = 1;
                            return ;
                        }
                        break;
                    case  10 :
                        state = 13;
                        continue outer;
                    case  13 :
                        state = 14;
                        continue outer;
                    case  15 :
                        if (("NotBefore" == ___local)&&("" == ___uri)) {
                            _Conditions = ((com.sun.identity.saml2.jaxb.assertion.impl.ConditionsTypeImpl) spawnChildFromEnterAttribute((com.sun.identity.saml2.jaxb.assertion.impl.ConditionsTypeImpl.class), 16, ___uri, ___local, ___qname));
                            return ;
                        }
                        if (("NotOnOrAfter" == ___local)&&("" == ___uri)) {
                            _Conditions = ((com.sun.identity.saml2.jaxb.assertion.impl.ConditionsTypeImpl) spawnChildFromEnterAttribute((com.sun.identity.saml2.jaxb.assertion.impl.ConditionsTypeImpl.class), 16, ___uri, ___local, ___qname));
                            return ;
                        }
                        _Conditions = ((com.sun.identity.saml2.jaxb.assertion.impl.ConditionsTypeImpl) spawnChildFromEnterAttribute((com.sun.identity.saml2.jaxb.assertion.impl.ConditionsTypeImpl.class), 16, ___uri, ___local, ___qname));
                        return ;
                    case  17 :
                        state = 18;
                        continue outer;
                    case  14 :
                        state = 17;
                        continue outer;
                    case  18 :
                        state = 19;
                        continue outer;
                    case  19 :
                        revertToParentFromEnterAttribute(___uri, ___local, ___qname);
                        return ;
                    case  20 :
                        _Advice = ((com.sun.identity.saml2.jaxb.assertion.impl.AdviceTypeImpl) spawnChildFromEnterAttribute((com.sun.identity.saml2.jaxb.assertion.impl.AdviceTypeImpl.class), 21, ___uri, ___local, ___qname));
                        return ;
                    case  6 :
                        if (("Version" == ___local)&&("" == ___uri)) {
                            state = 7;
                            return ;
                        }
                        break;
                    case  3 :
                        if (("IssueInstant" == ___local)&&("" == ___uri)) {
                            state = 4;
                            return ;
                        }
                        break;
                    case  24 :
                        if (("NameQualifier" == ___local)&&("" == ___uri)) {
                            _Issuer = ((com.sun.identity.saml2.jaxb.assertion.impl.NameIDTypeImpl) spawnChildFromEnterAttribute((com.sun.identity.saml2.jaxb.assertion.impl.NameIDTypeImpl.class), 25, ___uri, ___local, ___qname));
                            return ;
                        }
                        if (("SPNameQualifier" == ___local)&&("" == ___uri)) {
                            _Issuer = ((com.sun.identity.saml2.jaxb.assertion.impl.NameIDTypeImpl) spawnChildFromEnterAttribute((com.sun.identity.saml2.jaxb.assertion.impl.NameIDTypeImpl.class), 25, ___uri, ___local, ___qname));
                            return ;
                        }
                        if (("Format" == ___local)&&("" == ___uri)) {
                            _Issuer = ((com.sun.identity.saml2.jaxb.assertion.impl.NameIDTypeImpl) spawnChildFromEnterAttribute((com.sun.identity.saml2.jaxb.assertion.impl.NameIDTypeImpl.class), 25, ___uri, ___local, ___qname));
                            return ;
                        }
                        if (("SPProvidedID" == ___local)&&("" == ___uri)) {
                            _Issuer = ((com.sun.identity.saml2.jaxb.assertion.impl.NameIDTypeImpl) spawnChildFromEnterAttribute((com.sun.identity.saml2.jaxb.assertion.impl.NameIDTypeImpl.class), 25, ___uri, ___local, ___qname));
                            return ;
                        }
                        break;
                }
                super.enterAttribute(___uri, ___local, ___qname);
                break;
            }
        }

        public void leaveAttribute(java.lang.String ___uri, java.lang.String ___local, java.lang.String ___qname)
            throws org.xml.sax.SAXException
        {
            int attIdx;
            outer:
            while (true) {
                switch (state) {
                    case  11 :
                        attIdx = context.getAttribute("", "Id");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().leaveAttribute(___uri, ___local, ___qname);
                            return ;
                        }
                        break;
                    case  0 :
                        attIdx = context.getAttribute("", "ID");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            state = 3;
                            eatText1(v);
                            continue outer;
                        }
                        break;
                    case  10 :
                        state = 13;
                        continue outer;
                    case  13 :
                        state = 14;
                        continue outer;
                    case  15 :
                        attIdx = context.getAttribute("", "NotBefore");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().leaveAttribute(___uri, ___local, ___qname);
                            return ;
                        }
                        attIdx = context.getAttribute("", "NotOnOrAfter");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().leaveAttribute(___uri, ___local, ___qname);
                            return ;
                        }
                        _Conditions = ((com.sun.identity.saml2.jaxb.assertion.impl.ConditionsTypeImpl) spawnChildFromLeaveAttribute((com.sun.identity.saml2.jaxb.assertion.impl.ConditionsTypeImpl.class), 16, ___uri, ___local, ___qname));
                        return ;
                    case  8 :
                        if (("Version" == ___local)&&("" == ___uri)) {
                            state = 9;
                            return ;
                        }
                        break;
                    case  17 :
                        state = 18;
                        continue outer;
                    case  2 :
                        if (("ID" == ___local)&&("" == ___uri)) {
                            state = 3;
                            return ;
                        }
                        break;
                    case  14 :
                        state = 17;
                        continue outer;
                    case  18 :
                        state = 19;
                        continue outer;
                    case  5 :
                        if (("IssueInstant" == ___local)&&("" == ___uri)) {
                            state = 6;
                            return ;
                        }
                        break;
                    case  19 :
                        revertToParentFromLeaveAttribute(___uri, ___local, ___qname);
                        return ;
                    case  20 :
                        _Advice = ((com.sun.identity.saml2.jaxb.assertion.impl.AdviceTypeImpl) spawnChildFromLeaveAttribute((com.sun.identity.saml2.jaxb.assertion.impl.AdviceTypeImpl.class), 21, ___uri, ___local, ___qname));
                        return ;
                    case  6 :
                        attIdx = context.getAttribute("", "Version");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            state = 9;
                            eatText2(v);
                            continue outer;
                        }
                        break;
                    case  3 :
                        attIdx = context.getAttribute("", "IssueInstant");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            state = 6;
                            eatText3(v);
                            continue outer;
                        }
                        break;
                    case  24 :
                        attIdx = context.getAttribute("", "NameQualifier");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().leaveAttribute(___uri, ___local, ___qname);
                            return ;
                        }
                        attIdx = context.getAttribute("", "SPNameQualifier");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().leaveAttribute(___uri, ___local, ___qname);
                            return ;
                        }
                        attIdx = context.getAttribute("", "Format");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().leaveAttribute(___uri, ___local, ___qname);
                            return ;
                        }
                        attIdx = context.getAttribute("", "SPProvidedID");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().leaveAttribute(___uri, ___local, ___qname);
                            return ;
                        }
                        break;
                }
                super.leaveAttribute(___uri, ___local, ___qname);
                break;
            }
        }

        public void handleText(final java.lang.String value)
            throws org.xml.sax.SAXException
        {
            int attIdx;
            outer:
            while (true) {
                try {
                    switch (state) {
                        case  11 :
                            attIdx = context.getAttribute("", "Id");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().text(value);
                                return ;
                            }
                            break;
                        case  0 :
                            attIdx = context.getAttribute("", "ID");
                            if (attIdx >= 0) {
                                final java.lang.String v = context.eatAttribute(attIdx);
                                state = 3;
                                eatText1(v);
                                continue outer;
                            }
                            break;
                        case  10 :
                            state = 13;
                            continue outer;
                        case  13 :
                            state = 14;
                            continue outer;
                        case  15 :
                            attIdx = context.getAttribute("", "NotBefore");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().text(value);
                                return ;
                            }
                            attIdx = context.getAttribute("", "NotOnOrAfter");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().text(value);
                                return ;
                            }
                            _Conditions = ((com.sun.identity.saml2.jaxb.assertion.impl.ConditionsTypeImpl) spawnChildFromText((com.sun.identity.saml2.jaxb.assertion.impl.ConditionsTypeImpl.class), 16, value));
                            return ;
                        case  17 :
                            state = 18;
                            continue outer;
                        case  14 :
                            state = 17;
                            continue outer;
                        case  18 :
                            state = 19;
                            continue outer;
                        case  19 :
                            revertToParentFromText(value);
                            return ;
                        case  1 :
                            state = 2;
                            eatText1(value);
                            return ;
                        case  7 :
                            state = 8;
                            eatText2(value);
                            return ;
                        case  4 :
                            state = 5;
                            eatText3(value);
                            return ;
                        case  20 :
                            _Advice = ((com.sun.identity.saml2.jaxb.assertion.impl.AdviceTypeImpl) spawnChildFromText((com.sun.identity.saml2.jaxb.assertion.impl.AdviceTypeImpl.class), 21, value));
                            return ;
                        case  6 :
                            attIdx = context.getAttribute("", "Version");
                            if (attIdx >= 0) {
                                final java.lang.String v = context.eatAttribute(attIdx);
                                state = 9;
                                eatText2(v);
                                continue outer;
                            }
                            break;
                        case  3 :
                            attIdx = context.getAttribute("", "IssueInstant");
                            if (attIdx >= 0) {
                                final java.lang.String v = context.eatAttribute(attIdx);
                                state = 6;
                                eatText3(v);
                                continue outer;
                            }
                            break;
                        case  24 :
                            attIdx = context.getAttribute("", "NameQualifier");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().text(value);
                                return ;
                            }
                            attIdx = context.getAttribute("", "SPNameQualifier");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().text(value);
                                return ;
                            }
                            attIdx = context.getAttribute("", "Format");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().text(value);
                                return ;
                            }
                            attIdx = context.getAttribute("", "SPProvidedID");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().text(value);
                                return ;
                            }
                            _Issuer = ((com.sun.identity.saml2.jaxb.assertion.impl.NameIDTypeImpl) spawnChildFromText((com.sun.identity.saml2.jaxb.assertion.impl.NameIDTypeImpl.class), 25, value));
                            return ;
                    }
                } catch (java.lang.RuntimeException e) {
                    handleUnexpectedTextException(value, e);
                }
                break;
            }
        }

    }

}
