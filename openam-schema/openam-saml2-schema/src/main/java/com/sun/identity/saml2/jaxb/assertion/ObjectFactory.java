//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v1.0.6-b27-fcs 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2012.06.11 at 10:34:07 AM PDT 
//


package com.sun.identity.saml2.jaxb.assertion;


/**
 * This object contains factory methods for each 
 * Java content interface and Java element interface 
 * generated in the com.sun.identity.saml2.jaxb.assertion package. 
 * <p>An ObjectFactory allows you to programatically 
 * construct new instances of the Java representation 
 * for XML content. The Java representation of XML 
 * content can consist of schema derived interfaces 
 * and classes representing the binding of schema 
 * type definitions, element declarations and model 
 * groups.  Factory methods for each of these are 
 * provided in this class.
 * 
 */
public class ObjectFactory
    extends com.sun.identity.saml2.jaxb.assertion.impl.runtime.DefaultJAXBContextImpl
{

    private static java.util.HashMap defaultImplementations = new java.util.HashMap(76, 0.75F);
    private static java.util.HashMap rootTagMap = new java.util.HashMap();
    public final static com.sun.identity.saml2.jaxb.assertion.impl.runtime.GrammarInfo grammarInfo = new com.sun.identity.saml2.jaxb.assertion.impl.runtime.GrammarInfoImpl(rootTagMap, defaultImplementations, (com.sun.identity.saml2.jaxb.assertion.ObjectFactory.class));
    public final static java.lang.Class version = (com.sun.identity.saml2.jaxb.assertion.impl.JAXBVersion.class);

    static {
        defaultImplementations.put((com.sun.identity.saml2.jaxb.assertion.SubjectConfirmationElement.class), "com.sun.identity.saml2.jaxb.assertion.impl.SubjectConfirmationElementImpl");
        defaultImplementations.put((com.sun.identity.saml2.jaxb.assertion.BaseIDElement.class), "com.sun.identity.saml2.jaxb.assertion.impl.BaseIDElementImpl");
        defaultImplementations.put((com.sun.identity.saml2.jaxb.assertion.AssertionURIRefElement.class), "com.sun.identity.saml2.jaxb.assertion.impl.AssertionURIRefElementImpl");
        defaultImplementations.put((com.sun.identity.saml2.jaxb.assertion.SubjectLocalityType.class), "com.sun.identity.saml2.jaxb.assertion.impl.SubjectLocalityTypeImpl");
        defaultImplementations.put((com.sun.identity.saml2.jaxb.assertion.ActionElement.class), "com.sun.identity.saml2.jaxb.assertion.impl.ActionElementImpl");
        defaultImplementations.put((com.sun.identity.saml2.jaxb.assertion.AdviceElement.class), "com.sun.identity.saml2.jaxb.assertion.impl.AdviceElementImpl");
        defaultImplementations.put((com.sun.identity.saml2.jaxb.assertion.AttributeElement.class), "com.sun.identity.saml2.jaxb.assertion.impl.AttributeElementImpl");
        defaultImplementations.put((com.sun.identity.saml2.jaxb.assertion.ConditionsElement.class), "com.sun.identity.saml2.jaxb.assertion.impl.ConditionsElementImpl");
        defaultImplementations.put((com.sun.identity.saml2.jaxb.assertion.NameIDType.class), "com.sun.identity.saml2.jaxb.assertion.impl.NameIDTypeImpl");
        defaultImplementations.put((com.sun.identity.saml2.jaxb.assertion.AudienceRestrictionElement.class), "com.sun.identity.saml2.jaxb.assertion.impl.AudienceRestrictionElementImpl");
        defaultImplementations.put((com.sun.identity.saml2.jaxb.assertion.SubjectConfirmationDataElement.class), "com.sun.identity.saml2.jaxb.assertion.impl.SubjectConfirmationDataElementImpl");
        defaultImplementations.put((com.sun.identity.saml2.jaxb.assertion.ConditionAbstractType.class), "com.sun.identity.saml2.jaxb.assertion.impl.ConditionAbstractTypeImpl");
        defaultImplementations.put((com.sun.identity.saml2.jaxb.assertion.SubjectConfirmationDataType.class), "com.sun.identity.saml2.jaxb.assertion.impl.SubjectConfirmationDataTypeImpl");
        defaultImplementations.put((com.sun.identity.saml2.jaxb.assertion.AuthzDecisionStatementType.class), "com.sun.identity.saml2.jaxb.assertion.impl.AuthzDecisionStatementTypeImpl");
        defaultImplementations.put((com.sun.identity.saml2.jaxb.assertion.EncryptedAssertionElement.class), "com.sun.identity.saml2.jaxb.assertion.impl.EncryptedAssertionElementImpl");
        defaultImplementations.put((com.sun.identity.saml2.jaxb.assertion.StatementAbstractType.class), "com.sun.identity.saml2.jaxb.assertion.impl.StatementAbstractTypeImpl");
        defaultImplementations.put((com.sun.identity.saml2.jaxb.assertion.AttributeStatementElement.class), "com.sun.identity.saml2.jaxb.assertion.impl.AttributeStatementElementImpl");
        defaultImplementations.put((com.sun.identity.saml2.jaxb.assertion.AuthnContextElement.class), "com.sun.identity.saml2.jaxb.assertion.impl.AuthnContextElementImpl");
        defaultImplementations.put((com.sun.identity.saml2.jaxb.assertion.KeyInfoConfirmationDataType.class), "com.sun.identity.saml2.jaxb.assertion.impl.KeyInfoConfirmationDataTypeImpl");
        defaultImplementations.put((com.sun.identity.saml2.jaxb.assertion.EncryptedIDElement.class), "com.sun.identity.saml2.jaxb.assertion.impl.EncryptedIDElementImpl");
        defaultImplementations.put((com.sun.identity.saml2.jaxb.assertion.ProxyRestrictionElement.class), "com.sun.identity.saml2.jaxb.assertion.impl.ProxyRestrictionElementImpl");
        defaultImplementations.put((com.sun.identity.saml2.jaxb.assertion.NameIDElement.class), "com.sun.identity.saml2.jaxb.assertion.impl.NameIDElementImpl");
        defaultImplementations.put((com.sun.identity.saml2.jaxb.assertion.OneTimeUseType.class), "com.sun.identity.saml2.jaxb.assertion.impl.OneTimeUseTypeImpl");
        defaultImplementations.put((com.sun.identity.saml2.jaxb.assertion.AttributeType.class), "com.sun.identity.saml2.jaxb.assertion.impl.AttributeTypeImpl");
        defaultImplementations.put((com.sun.identity.saml2.jaxb.assertion.ConditionsType.class), "com.sun.identity.saml2.jaxb.assertion.impl.ConditionsTypeImpl");
        defaultImplementations.put((com.sun.identity.saml2.jaxb.assertion.BaseIDAbstractType.class), "com.sun.identity.saml2.jaxb.assertion.impl.BaseIDAbstractTypeImpl");
        defaultImplementations.put((com.sun.identity.saml2.jaxb.assertion.EncryptedAttributeElement.class), "com.sun.identity.saml2.jaxb.assertion.impl.EncryptedAttributeElementImpl");
        defaultImplementations.put((com.sun.identity.saml2.jaxb.assertion.ConditionElement.class), "com.sun.identity.saml2.jaxb.assertion.impl.ConditionElementImpl");
        defaultImplementations.put((com.sun.identity.saml2.jaxb.assertion.AuthnContextDeclElement.class), "com.sun.identity.saml2.jaxb.assertion.impl.AuthnContextDeclElementImpl");
        defaultImplementations.put((com.sun.identity.saml2.jaxb.assertion.EvidenceType.class), "com.sun.identity.saml2.jaxb.assertion.impl.EvidenceTypeImpl");
        defaultImplementations.put((com.sun.identity.saml2.jaxb.assertion.SubjectType.class), "com.sun.identity.saml2.jaxb.assertion.impl.SubjectTypeImpl");
        defaultImplementations.put((com.sun.identity.saml2.jaxb.assertion.EncryptedElementType.class), "com.sun.identity.saml2.jaxb.assertion.impl.EncryptedElementTypeImpl");
        defaultImplementations.put((com.sun.identity.saml2.jaxb.assertion.AuthnStatementType.class), "com.sun.identity.saml2.jaxb.assertion.impl.AuthnStatementTypeImpl");
        defaultImplementations.put((com.sun.identity.saml2.jaxb.assertion.SubjectConfirmationType.class), "com.sun.identity.saml2.jaxb.assertion.impl.SubjectConfirmationTypeImpl");
        defaultImplementations.put((com.sun.identity.saml2.jaxb.assertion.SubjectLocalityElement.class), "com.sun.identity.saml2.jaxb.assertion.impl.SubjectLocalityElementImpl");
        defaultImplementations.put((com.sun.identity.saml2.jaxb.assertion.ProxyRestrictionType.class), "com.sun.identity.saml2.jaxb.assertion.impl.ProxyRestrictionTypeImpl");
        defaultImplementations.put((com.sun.identity.saml2.jaxb.assertion.AuthzDecisionStatementElement.class), "com.sun.identity.saml2.jaxb.assertion.impl.AuthzDecisionStatementElementImpl");
        defaultImplementations.put((com.sun.identity.saml2.jaxb.assertion.AuthnContextClassRefElement.class), "com.sun.identity.saml2.jaxb.assertion.impl.AuthnContextClassRefElementImpl");
        defaultImplementations.put((com.sun.identity.saml2.jaxb.assertion.AssertionElement.class), "com.sun.identity.saml2.jaxb.assertion.impl.AssertionElementImpl");
        defaultImplementations.put((com.sun.identity.saml2.jaxb.assertion.AdviceType.class), "com.sun.identity.saml2.jaxb.assertion.impl.AdviceTypeImpl");
        defaultImplementations.put((com.sun.identity.saml2.jaxb.assertion.SubjectElement.class), "com.sun.identity.saml2.jaxb.assertion.impl.SubjectElementImpl");
        defaultImplementations.put((com.sun.identity.saml2.jaxb.assertion.AssertionType.class), "com.sun.identity.saml2.jaxb.assertion.impl.AssertionTypeImpl");
        defaultImplementations.put((com.sun.identity.saml2.jaxb.assertion.StatementElement.class), "com.sun.identity.saml2.jaxb.assertion.impl.StatementElementImpl");
        defaultImplementations.put((com.sun.identity.saml2.jaxb.assertion.AssertionIDRefElement.class), "com.sun.identity.saml2.jaxb.assertion.impl.AssertionIDRefElementImpl");
        defaultImplementations.put((com.sun.identity.saml2.jaxb.assertion.AuthnContextType.class), "com.sun.identity.saml2.jaxb.assertion.impl.AuthnContextTypeImpl");
        defaultImplementations.put((com.sun.identity.saml2.jaxb.assertion.ActionType.class), "com.sun.identity.saml2.jaxb.assertion.impl.ActionTypeImpl");
        defaultImplementations.put((com.sun.identity.saml2.jaxb.assertion.AuthenticatingAuthorityElement.class), "com.sun.identity.saml2.jaxb.assertion.impl.AuthenticatingAuthorityElementImpl");
        defaultImplementations.put((com.sun.identity.saml2.jaxb.assertion.AuthnStatementElement.class), "com.sun.identity.saml2.jaxb.assertion.impl.AuthnStatementElementImpl");
        defaultImplementations.put((com.sun.identity.saml2.jaxb.assertion.AttributeValueElement.class), "com.sun.identity.saml2.jaxb.assertion.impl.AttributeValueElementImpl");
        defaultImplementations.put((com.sun.identity.saml2.jaxb.assertion.EvidenceElement.class), "com.sun.identity.saml2.jaxb.assertion.impl.EvidenceElementImpl");
        defaultImplementations.put((com.sun.identity.saml2.jaxb.assertion.AudienceElement.class), "com.sun.identity.saml2.jaxb.assertion.impl.AudienceElementImpl");
        defaultImplementations.put((com.sun.identity.saml2.jaxb.assertion.OneTimeUseElement.class), "com.sun.identity.saml2.jaxb.assertion.impl.OneTimeUseElementImpl");
        defaultImplementations.put((com.sun.identity.saml2.jaxb.assertion.IssuerElement.class), "com.sun.identity.saml2.jaxb.assertion.impl.IssuerElementImpl");
        defaultImplementations.put((com.sun.identity.saml2.jaxb.assertion.AttributeStatementType.class), "com.sun.identity.saml2.jaxb.assertion.impl.AttributeStatementTypeImpl");
        defaultImplementations.put((com.sun.identity.saml2.jaxb.assertion.AudienceRestrictionType.class), "com.sun.identity.saml2.jaxb.assertion.impl.AudienceRestrictionTypeImpl");
        defaultImplementations.put((com.sun.identity.saml2.jaxb.assertion.AuthnContextDeclRefElement.class), "com.sun.identity.saml2.jaxb.assertion.impl.AuthnContextDeclRefElementImpl");
        rootTagMap.put(new javax.xml.namespace.QName("urn:oasis:names:tc:SAML:2.0:assertion", "Subject"), (com.sun.identity.saml2.jaxb.assertion.SubjectElement.class));
        rootTagMap.put(new javax.xml.namespace.QName("urn:oasis:names:tc:SAML:2.0:assertion", "EncryptedAssertion"), (com.sun.identity.saml2.jaxb.assertion.EncryptedAssertionElement.class));
        rootTagMap.put(new javax.xml.namespace.QName("urn:oasis:names:tc:SAML:2.0:assertion", "Advice"), (com.sun.identity.saml2.jaxb.assertion.AdviceElement.class));
        rootTagMap.put(new javax.xml.namespace.QName("urn:oasis:names:tc:SAML:2.0:assertion", "SubjectLocality"), (com.sun.identity.saml2.jaxb.assertion.SubjectLocalityElement.class));
        rootTagMap.put(new javax.xml.namespace.QName("urn:oasis:names:tc:SAML:2.0:assertion", "Assertion"), (com.sun.identity.saml2.jaxb.assertion.AssertionElement.class));
        rootTagMap.put(new javax.xml.namespace.QName("urn:oasis:names:tc:SAML:2.0:assertion", "AudienceRestriction"), (com.sun.identity.saml2.jaxb.assertion.AudienceRestrictionElement.class));
        rootTagMap.put(new javax.xml.namespace.QName("urn:oasis:names:tc:SAML:2.0:assertion", "Evidence"), (com.sun.identity.saml2.jaxb.assertion.EvidenceElement.class));
        rootTagMap.put(new javax.xml.namespace.QName("urn:oasis:names:tc:SAML:2.0:assertion", "Statement"), (com.sun.identity.saml2.jaxb.assertion.StatementElement.class));
        rootTagMap.put(new javax.xml.namespace.QName("urn:oasis:names:tc:SAML:2.0:assertion", "SubjectConfirmationData"), (com.sun.identity.saml2.jaxb.assertion.SubjectConfirmationDataElement.class));
        rootTagMap.put(new javax.xml.namespace.QName("urn:oasis:names:tc:SAML:2.0:assertion", "AuthnContext"), (com.sun.identity.saml2.jaxb.assertion.AuthnContextElement.class));
        rootTagMap.put(new javax.xml.namespace.QName("urn:oasis:names:tc:SAML:2.0:assertion", "Conditions"), (com.sun.identity.saml2.jaxb.assertion.ConditionsElement.class));
        rootTagMap.put(new javax.xml.namespace.QName("urn:oasis:names:tc:SAML:2.0:assertion", "Condition"), (com.sun.identity.saml2.jaxb.assertion.ConditionElement.class));
        rootTagMap.put(new javax.xml.namespace.QName("urn:oasis:names:tc:SAML:2.0:assertion", "AttributeValue"), (com.sun.identity.saml2.jaxb.assertion.AttributeValueElement.class));
        rootTagMap.put(new javax.xml.namespace.QName("urn:oasis:names:tc:SAML:2.0:assertion", "AuthnStatement"), (com.sun.identity.saml2.jaxb.assertion.AuthnStatementElement.class));
        rootTagMap.put(new javax.xml.namespace.QName("urn:oasis:names:tc:SAML:2.0:assertion", "AssertionURIRef"), (com.sun.identity.saml2.jaxb.assertion.AssertionURIRefElement.class));
        rootTagMap.put(new javax.xml.namespace.QName("urn:oasis:names:tc:SAML:2.0:assertion", "AssertionIDRef"), (com.sun.identity.saml2.jaxb.assertion.AssertionIDRefElement.class));
        rootTagMap.put(new javax.xml.namespace.QName("urn:oasis:names:tc:SAML:2.0:assertion", "SubjectConfirmation"), (com.sun.identity.saml2.jaxb.assertion.SubjectConfirmationElement.class));
        rootTagMap.put(new javax.xml.namespace.QName("urn:oasis:names:tc:SAML:2.0:assertion", "AuthnContextClassRef"), (com.sun.identity.saml2.jaxb.assertion.AuthnContextClassRefElement.class));
        rootTagMap.put(new javax.xml.namespace.QName("urn:oasis:names:tc:SAML:2.0:assertion", "Audience"), (com.sun.identity.saml2.jaxb.assertion.AudienceElement.class));
        rootTagMap.put(new javax.xml.namespace.QName("urn:oasis:names:tc:SAML:2.0:assertion", "ProxyRestriction"), (com.sun.identity.saml2.jaxb.assertion.ProxyRestrictionElement.class));
        rootTagMap.put(new javax.xml.namespace.QName("urn:oasis:names:tc:SAML:2.0:assertion", "Action"), (com.sun.identity.saml2.jaxb.assertion.ActionElement.class));
        rootTagMap.put(new javax.xml.namespace.QName("urn:oasis:names:tc:SAML:2.0:assertion", "EncryptedID"), (com.sun.identity.saml2.jaxb.assertion.EncryptedIDElement.class));
        rootTagMap.put(new javax.xml.namespace.QName("urn:oasis:names:tc:SAML:2.0:assertion", "AuthenticatingAuthority"), (com.sun.identity.saml2.jaxb.assertion.AuthenticatingAuthorityElement.class));
        rootTagMap.put(new javax.xml.namespace.QName("urn:oasis:names:tc:SAML:2.0:assertion", "AuthzDecisionStatement"), (com.sun.identity.saml2.jaxb.assertion.AuthzDecisionStatementElement.class));
        rootTagMap.put(new javax.xml.namespace.QName("urn:oasis:names:tc:SAML:2.0:assertion", "Issuer"), (com.sun.identity.saml2.jaxb.assertion.IssuerElement.class));
        rootTagMap.put(new javax.xml.namespace.QName("urn:oasis:names:tc:SAML:2.0:assertion", "AuthnContextDeclRef"), (com.sun.identity.saml2.jaxb.assertion.AuthnContextDeclRefElement.class));
        rootTagMap.put(new javax.xml.namespace.QName("urn:oasis:names:tc:SAML:2.0:assertion", "OneTimeUse"), (com.sun.identity.saml2.jaxb.assertion.OneTimeUseElement.class));
        rootTagMap.put(new javax.xml.namespace.QName("urn:oasis:names:tc:SAML:2.0:assertion", "EncryptedAttribute"), (com.sun.identity.saml2.jaxb.assertion.EncryptedAttributeElement.class));
        rootTagMap.put(new javax.xml.namespace.QName("urn:oasis:names:tc:SAML:2.0:assertion", "NameID"), (com.sun.identity.saml2.jaxb.assertion.NameIDElement.class));
        rootTagMap.put(new javax.xml.namespace.QName("urn:oasis:names:tc:SAML:2.0:assertion", "BaseID"), (com.sun.identity.saml2.jaxb.assertion.BaseIDElement.class));
        rootTagMap.put(new javax.xml.namespace.QName("urn:oasis:names:tc:SAML:2.0:assertion", "AttributeStatement"), (com.sun.identity.saml2.jaxb.assertion.AttributeStatementElement.class));
        rootTagMap.put(new javax.xml.namespace.QName("urn:oasis:names:tc:SAML:2.0:assertion", "Attribute"), (com.sun.identity.saml2.jaxb.assertion.AttributeElement.class));
        rootTagMap.put(new javax.xml.namespace.QName("urn:oasis:names:tc:SAML:2.0:assertion", "AuthnContextDecl"), (com.sun.identity.saml2.jaxb.assertion.AuthnContextDeclElement.class));
    }

    /**
     * Create a new ObjectFactory that can be used to create new instances of schema derived classes for package: com.sun.identity.saml2.jaxb.assertion
     * 
     */
    public ObjectFactory() {
        super(grammarInfo);
    }

    /**
     * Create an instance of the specified Java content interface.
     * 
     * @param javaContentInterface
     *     the Class object of the javacontent interface to instantiate
     * @return
     *     a new instance
     * @throws JAXBException
     *     if an error occurs
     */
    public java.lang.Object newInstance(java.lang.Class javaContentInterface)
        throws javax.xml.bind.JAXBException
    {
        return super.newInstance(javaContentInterface);
    }

    /**
     * Get the specified property. This method can only be
     * used to get provider specific properties.
     * Attempting to get an undefined property will result
     * in a PropertyException being thrown.
     * 
     * @param name
     *     the name of the property to retrieve
     * @return
     *     the value of the requested property
     * @throws PropertyException
     *     when there is an error retrieving the given property or value
     */
    public java.lang.Object getProperty(java.lang.String name)
        throws javax.xml.bind.PropertyException
    {
        return super.getProperty(name);
    }

    /**
     * Set the specified property. This method can only be
     * used to set provider specific properties.
     * Attempting to set an undefined property will result
     * in a PropertyException being thrown.
     * 
     * @param name
     *     the name of the property to retrieve
     * @param value
     *     the value of the property to be set
     * @throws PropertyException
     *     when there is an error processing the given property or value
     */
    public void setProperty(java.lang.String name, java.lang.Object value)
        throws javax.xml.bind.PropertyException
    {
        super.setProperty(name, value);
    }

    /**
     * Create an instance of SubjectConfirmationElement
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public com.sun.identity.saml2.jaxb.assertion.SubjectConfirmationElement createSubjectConfirmationElement()
        throws javax.xml.bind.JAXBException
    {
        return new com.sun.identity.saml2.jaxb.assertion.impl.SubjectConfirmationElementImpl();
    }

    /**
     * Create an instance of BaseIDElement
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public com.sun.identity.saml2.jaxb.assertion.BaseIDElement createBaseIDElement()
        throws javax.xml.bind.JAXBException
    {
        return new com.sun.identity.saml2.jaxb.assertion.impl.BaseIDElementImpl();
    }

    /**
     * Create an instance of AssertionURIRefElement
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public com.sun.identity.saml2.jaxb.assertion.AssertionURIRefElement createAssertionURIRefElement()
        throws javax.xml.bind.JAXBException
    {
        return new com.sun.identity.saml2.jaxb.assertion.impl.AssertionURIRefElementImpl();
    }

    /**
     * Create an instance of AssertionURIRefElement
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public com.sun.identity.saml2.jaxb.assertion.AssertionURIRefElement createAssertionURIRefElement(java.lang.String value)
        throws javax.xml.bind.JAXBException
    {
        return new com.sun.identity.saml2.jaxb.assertion.impl.AssertionURIRefElementImpl(value);
    }

    /**
     * Create an instance of SubjectLocalityType
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public com.sun.identity.saml2.jaxb.assertion.SubjectLocalityType createSubjectLocalityType()
        throws javax.xml.bind.JAXBException
    {
        return new com.sun.identity.saml2.jaxb.assertion.impl.SubjectLocalityTypeImpl();
    }

    /**
     * Create an instance of ActionElement
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public com.sun.identity.saml2.jaxb.assertion.ActionElement createActionElement()
        throws javax.xml.bind.JAXBException
    {
        return new com.sun.identity.saml2.jaxb.assertion.impl.ActionElementImpl();
    }

    /**
     * Create an instance of AdviceElement
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public com.sun.identity.saml2.jaxb.assertion.AdviceElement createAdviceElement()
        throws javax.xml.bind.JAXBException
    {
        return new com.sun.identity.saml2.jaxb.assertion.impl.AdviceElementImpl();
    }

    /**
     * Create an instance of AttributeElement
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public com.sun.identity.saml2.jaxb.assertion.AttributeElement createAttributeElement()
        throws javax.xml.bind.JAXBException
    {
        return new com.sun.identity.saml2.jaxb.assertion.impl.AttributeElementImpl();
    }

    /**
     * Create an instance of ConditionsElement
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public com.sun.identity.saml2.jaxb.assertion.ConditionsElement createConditionsElement()
        throws javax.xml.bind.JAXBException
    {
        return new com.sun.identity.saml2.jaxb.assertion.impl.ConditionsElementImpl();
    }

    /**
     * Create an instance of NameIDType
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public com.sun.identity.saml2.jaxb.assertion.NameIDType createNameIDType()
        throws javax.xml.bind.JAXBException
    {
        return new com.sun.identity.saml2.jaxb.assertion.impl.NameIDTypeImpl();
    }

    /**
     * Create an instance of AudienceRestrictionElement
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public com.sun.identity.saml2.jaxb.assertion.AudienceRestrictionElement createAudienceRestrictionElement()
        throws javax.xml.bind.JAXBException
    {
        return new com.sun.identity.saml2.jaxb.assertion.impl.AudienceRestrictionElementImpl();
    }

    /**
     * Create an instance of SubjectConfirmationDataElement
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public com.sun.identity.saml2.jaxb.assertion.SubjectConfirmationDataElement createSubjectConfirmationDataElement()
        throws javax.xml.bind.JAXBException
    {
        return new com.sun.identity.saml2.jaxb.assertion.impl.SubjectConfirmationDataElementImpl();
    }

    /**
     * Create an instance of ConditionAbstractType
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public com.sun.identity.saml2.jaxb.assertion.ConditionAbstractType createConditionAbstractType()
        throws javax.xml.bind.JAXBException
    {
        return new com.sun.identity.saml2.jaxb.assertion.impl.ConditionAbstractTypeImpl();
    }

    /**
     * Create an instance of SubjectConfirmationDataType
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public com.sun.identity.saml2.jaxb.assertion.SubjectConfirmationDataType createSubjectConfirmationDataType()
        throws javax.xml.bind.JAXBException
    {
        return new com.sun.identity.saml2.jaxb.assertion.impl.SubjectConfirmationDataTypeImpl();
    }

    /**
     * Create an instance of AuthzDecisionStatementType
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public com.sun.identity.saml2.jaxb.assertion.AuthzDecisionStatementType createAuthzDecisionStatementType()
        throws javax.xml.bind.JAXBException
    {
        return new com.sun.identity.saml2.jaxb.assertion.impl.AuthzDecisionStatementTypeImpl();
    }

    /**
     * Create an instance of EncryptedAssertionElement
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public com.sun.identity.saml2.jaxb.assertion.EncryptedAssertionElement createEncryptedAssertionElement()
        throws javax.xml.bind.JAXBException
    {
        return new com.sun.identity.saml2.jaxb.assertion.impl.EncryptedAssertionElementImpl();
    }

    /**
     * Create an instance of StatementAbstractType
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public com.sun.identity.saml2.jaxb.assertion.StatementAbstractType createStatementAbstractType()
        throws javax.xml.bind.JAXBException
    {
        return new com.sun.identity.saml2.jaxb.assertion.impl.StatementAbstractTypeImpl();
    }

    /**
     * Create an instance of AttributeStatementElement
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public com.sun.identity.saml2.jaxb.assertion.AttributeStatementElement createAttributeStatementElement()
        throws javax.xml.bind.JAXBException
    {
        return new com.sun.identity.saml2.jaxb.assertion.impl.AttributeStatementElementImpl();
    }

    /**
     * Create an instance of AuthnContextElement
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public com.sun.identity.saml2.jaxb.assertion.AuthnContextElement createAuthnContextElement()
        throws javax.xml.bind.JAXBException
    {
        return new com.sun.identity.saml2.jaxb.assertion.impl.AuthnContextElementImpl();
    }

    /**
     * Create an instance of KeyInfoConfirmationDataType
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public com.sun.identity.saml2.jaxb.assertion.KeyInfoConfirmationDataType createKeyInfoConfirmationDataType()
        throws javax.xml.bind.JAXBException
    {
        return new com.sun.identity.saml2.jaxb.assertion.impl.KeyInfoConfirmationDataTypeImpl();
    }

    /**
     * Create an instance of EncryptedIDElement
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public com.sun.identity.saml2.jaxb.assertion.EncryptedIDElement createEncryptedIDElement()
        throws javax.xml.bind.JAXBException
    {
        return new com.sun.identity.saml2.jaxb.assertion.impl.EncryptedIDElementImpl();
    }

    /**
     * Create an instance of ProxyRestrictionElement
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public com.sun.identity.saml2.jaxb.assertion.ProxyRestrictionElement createProxyRestrictionElement()
        throws javax.xml.bind.JAXBException
    {
        return new com.sun.identity.saml2.jaxb.assertion.impl.ProxyRestrictionElementImpl();
    }

    /**
     * Create an instance of NameIDElement
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public com.sun.identity.saml2.jaxb.assertion.NameIDElement createNameIDElement()
        throws javax.xml.bind.JAXBException
    {
        return new com.sun.identity.saml2.jaxb.assertion.impl.NameIDElementImpl();
    }

    /**
     * Create an instance of OneTimeUseType
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public com.sun.identity.saml2.jaxb.assertion.OneTimeUseType createOneTimeUseType()
        throws javax.xml.bind.JAXBException
    {
        return new com.sun.identity.saml2.jaxb.assertion.impl.OneTimeUseTypeImpl();
    }

    /**
     * Create an instance of AttributeType
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public com.sun.identity.saml2.jaxb.assertion.AttributeType createAttributeType()
        throws javax.xml.bind.JAXBException
    {
        return new com.sun.identity.saml2.jaxb.assertion.impl.AttributeTypeImpl();
    }

    /**
     * Create an instance of ConditionsType
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public com.sun.identity.saml2.jaxb.assertion.ConditionsType createConditionsType()
        throws javax.xml.bind.JAXBException
    {
        return new com.sun.identity.saml2.jaxb.assertion.impl.ConditionsTypeImpl();
    }

    /**
     * Create an instance of BaseIDAbstractType
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public com.sun.identity.saml2.jaxb.assertion.BaseIDAbstractType createBaseIDAbstractType()
        throws javax.xml.bind.JAXBException
    {
        return new com.sun.identity.saml2.jaxb.assertion.impl.BaseIDAbstractTypeImpl();
    }

    /**
     * Create an instance of EncryptedAttributeElement
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public com.sun.identity.saml2.jaxb.assertion.EncryptedAttributeElement createEncryptedAttributeElement()
        throws javax.xml.bind.JAXBException
    {
        return new com.sun.identity.saml2.jaxb.assertion.impl.EncryptedAttributeElementImpl();
    }

    /**
     * Create an instance of ConditionElement
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public com.sun.identity.saml2.jaxb.assertion.ConditionElement createConditionElement()
        throws javax.xml.bind.JAXBException
    {
        return new com.sun.identity.saml2.jaxb.assertion.impl.ConditionElementImpl();
    }

    /**
     * Create an instance of AuthnContextDeclElement
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public com.sun.identity.saml2.jaxb.assertion.AuthnContextDeclElement createAuthnContextDeclElement()
        throws javax.xml.bind.JAXBException
    {
        return new com.sun.identity.saml2.jaxb.assertion.impl.AuthnContextDeclElementImpl();
    }

    /**
     * Create an instance of EvidenceType
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public com.sun.identity.saml2.jaxb.assertion.EvidenceType createEvidenceType()
        throws javax.xml.bind.JAXBException
    {
        return new com.sun.identity.saml2.jaxb.assertion.impl.EvidenceTypeImpl();
    }

    /**
     * Create an instance of SubjectType
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public com.sun.identity.saml2.jaxb.assertion.SubjectType createSubjectType()
        throws javax.xml.bind.JAXBException
    {
        return new com.sun.identity.saml2.jaxb.assertion.impl.SubjectTypeImpl();
    }

    /**
     * Create an instance of EncryptedElementType
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public com.sun.identity.saml2.jaxb.assertion.EncryptedElementType createEncryptedElementType()
        throws javax.xml.bind.JAXBException
    {
        return new com.sun.identity.saml2.jaxb.assertion.impl.EncryptedElementTypeImpl();
    }

    /**
     * Create an instance of AuthnStatementType
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public com.sun.identity.saml2.jaxb.assertion.AuthnStatementType createAuthnStatementType()
        throws javax.xml.bind.JAXBException
    {
        return new com.sun.identity.saml2.jaxb.assertion.impl.AuthnStatementTypeImpl();
    }

    /**
     * Create an instance of SubjectConfirmationType
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public com.sun.identity.saml2.jaxb.assertion.SubjectConfirmationType createSubjectConfirmationType()
        throws javax.xml.bind.JAXBException
    {
        return new com.sun.identity.saml2.jaxb.assertion.impl.SubjectConfirmationTypeImpl();
    }

    /**
     * Create an instance of SubjectLocalityElement
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public com.sun.identity.saml2.jaxb.assertion.SubjectLocalityElement createSubjectLocalityElement()
        throws javax.xml.bind.JAXBException
    {
        return new com.sun.identity.saml2.jaxb.assertion.impl.SubjectLocalityElementImpl();
    }

    /**
     * Create an instance of ProxyRestrictionType
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public com.sun.identity.saml2.jaxb.assertion.ProxyRestrictionType createProxyRestrictionType()
        throws javax.xml.bind.JAXBException
    {
        return new com.sun.identity.saml2.jaxb.assertion.impl.ProxyRestrictionTypeImpl();
    }

    /**
     * Create an instance of AuthzDecisionStatementElement
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public com.sun.identity.saml2.jaxb.assertion.AuthzDecisionStatementElement createAuthzDecisionStatementElement()
        throws javax.xml.bind.JAXBException
    {
        return new com.sun.identity.saml2.jaxb.assertion.impl.AuthzDecisionStatementElementImpl();
    }

    /**
     * Create an instance of AuthnContextClassRefElement
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public com.sun.identity.saml2.jaxb.assertion.AuthnContextClassRefElement createAuthnContextClassRefElement()
        throws javax.xml.bind.JAXBException
    {
        return new com.sun.identity.saml2.jaxb.assertion.impl.AuthnContextClassRefElementImpl();
    }

    /**
     * Create an instance of AuthnContextClassRefElement
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public com.sun.identity.saml2.jaxb.assertion.AuthnContextClassRefElement createAuthnContextClassRefElement(java.lang.String value)
        throws javax.xml.bind.JAXBException
    {
        return new com.sun.identity.saml2.jaxb.assertion.impl.AuthnContextClassRefElementImpl(value);
    }

    /**
     * Create an instance of AssertionElement
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public com.sun.identity.saml2.jaxb.assertion.AssertionElement createAssertionElement()
        throws javax.xml.bind.JAXBException
    {
        return new com.sun.identity.saml2.jaxb.assertion.impl.AssertionElementImpl();
    }

    /**
     * Create an instance of AdviceType
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public com.sun.identity.saml2.jaxb.assertion.AdviceType createAdviceType()
        throws javax.xml.bind.JAXBException
    {
        return new com.sun.identity.saml2.jaxb.assertion.impl.AdviceTypeImpl();
    }

    /**
     * Create an instance of SubjectElement
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public com.sun.identity.saml2.jaxb.assertion.SubjectElement createSubjectElement()
        throws javax.xml.bind.JAXBException
    {
        return new com.sun.identity.saml2.jaxb.assertion.impl.SubjectElementImpl();
    }

    /**
     * Create an instance of AssertionType
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public com.sun.identity.saml2.jaxb.assertion.AssertionType createAssertionType()
        throws javax.xml.bind.JAXBException
    {
        return new com.sun.identity.saml2.jaxb.assertion.impl.AssertionTypeImpl();
    }

    /**
     * Create an instance of StatementElement
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public com.sun.identity.saml2.jaxb.assertion.StatementElement createStatementElement()
        throws javax.xml.bind.JAXBException
    {
        return new com.sun.identity.saml2.jaxb.assertion.impl.StatementElementImpl();
    }

    /**
     * Create an instance of AssertionIDRefElement
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public com.sun.identity.saml2.jaxb.assertion.AssertionIDRefElement createAssertionIDRefElement()
        throws javax.xml.bind.JAXBException
    {
        return new com.sun.identity.saml2.jaxb.assertion.impl.AssertionIDRefElementImpl();
    }

    /**
     * Create an instance of AssertionIDRefElement
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public com.sun.identity.saml2.jaxb.assertion.AssertionIDRefElement createAssertionIDRefElement(java.lang.String value)
        throws javax.xml.bind.JAXBException
    {
        return new com.sun.identity.saml2.jaxb.assertion.impl.AssertionIDRefElementImpl(value);
    }

    /**
     * Create an instance of AuthnContextType
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public com.sun.identity.saml2.jaxb.assertion.AuthnContextType createAuthnContextType()
        throws javax.xml.bind.JAXBException
    {
        return new com.sun.identity.saml2.jaxb.assertion.impl.AuthnContextTypeImpl();
    }

    /**
     * Create an instance of ActionType
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public com.sun.identity.saml2.jaxb.assertion.ActionType createActionType()
        throws javax.xml.bind.JAXBException
    {
        return new com.sun.identity.saml2.jaxb.assertion.impl.ActionTypeImpl();
    }

    /**
     * Create an instance of AuthenticatingAuthorityElement
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public com.sun.identity.saml2.jaxb.assertion.AuthenticatingAuthorityElement createAuthenticatingAuthorityElement()
        throws javax.xml.bind.JAXBException
    {
        return new com.sun.identity.saml2.jaxb.assertion.impl.AuthenticatingAuthorityElementImpl();
    }

    /**
     * Create an instance of AuthenticatingAuthorityElement
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public com.sun.identity.saml2.jaxb.assertion.AuthenticatingAuthorityElement createAuthenticatingAuthorityElement(java.lang.String value)
        throws javax.xml.bind.JAXBException
    {
        return new com.sun.identity.saml2.jaxb.assertion.impl.AuthenticatingAuthorityElementImpl(value);
    }

    /**
     * Create an instance of AuthnStatementElement
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public com.sun.identity.saml2.jaxb.assertion.AuthnStatementElement createAuthnStatementElement()
        throws javax.xml.bind.JAXBException
    {
        return new com.sun.identity.saml2.jaxb.assertion.impl.AuthnStatementElementImpl();
    }

    /**
     * Create an instance of AttributeValueElement
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public com.sun.identity.saml2.jaxb.assertion.AttributeValueElement createAttributeValueElement()
        throws javax.xml.bind.JAXBException
    {
        return new com.sun.identity.saml2.jaxb.assertion.impl.AttributeValueElementImpl();
    }

    /**
     * Create an instance of EvidenceElement
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public com.sun.identity.saml2.jaxb.assertion.EvidenceElement createEvidenceElement()
        throws javax.xml.bind.JAXBException
    {
        return new com.sun.identity.saml2.jaxb.assertion.impl.EvidenceElementImpl();
    }

    /**
     * Create an instance of AudienceElement
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public com.sun.identity.saml2.jaxb.assertion.AudienceElement createAudienceElement()
        throws javax.xml.bind.JAXBException
    {
        return new com.sun.identity.saml2.jaxb.assertion.impl.AudienceElementImpl();
    }

    /**
     * Create an instance of AudienceElement
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public com.sun.identity.saml2.jaxb.assertion.AudienceElement createAudienceElement(java.lang.String value)
        throws javax.xml.bind.JAXBException
    {
        return new com.sun.identity.saml2.jaxb.assertion.impl.AudienceElementImpl(value);
    }

    /**
     * Create an instance of OneTimeUseElement
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public com.sun.identity.saml2.jaxb.assertion.OneTimeUseElement createOneTimeUseElement()
        throws javax.xml.bind.JAXBException
    {
        return new com.sun.identity.saml2.jaxb.assertion.impl.OneTimeUseElementImpl();
    }

    /**
     * Create an instance of IssuerElement
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public com.sun.identity.saml2.jaxb.assertion.IssuerElement createIssuerElement()
        throws javax.xml.bind.JAXBException
    {
        return new com.sun.identity.saml2.jaxb.assertion.impl.IssuerElementImpl();
    }

    /**
     * Create an instance of AttributeStatementType
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public com.sun.identity.saml2.jaxb.assertion.AttributeStatementType createAttributeStatementType()
        throws javax.xml.bind.JAXBException
    {
        return new com.sun.identity.saml2.jaxb.assertion.impl.AttributeStatementTypeImpl();
    }

    /**
     * Create an instance of AudienceRestrictionType
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public com.sun.identity.saml2.jaxb.assertion.AudienceRestrictionType createAudienceRestrictionType()
        throws javax.xml.bind.JAXBException
    {
        return new com.sun.identity.saml2.jaxb.assertion.impl.AudienceRestrictionTypeImpl();
    }

    /**
     * Create an instance of AuthnContextDeclRefElement
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public com.sun.identity.saml2.jaxb.assertion.AuthnContextDeclRefElement createAuthnContextDeclRefElement()
        throws javax.xml.bind.JAXBException
    {
        return new com.sun.identity.saml2.jaxb.assertion.impl.AuthnContextDeclRefElementImpl();
    }

    /**
     * Create an instance of AuthnContextDeclRefElement
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public com.sun.identity.saml2.jaxb.assertion.AuthnContextDeclRefElement createAuthnContextDeclRefElement(java.lang.String value)
        throws javax.xml.bind.JAXBException
    {
        return new com.sun.identity.saml2.jaxb.assertion.impl.AuthnContextDeclRefElementImpl(value);
    }

}
