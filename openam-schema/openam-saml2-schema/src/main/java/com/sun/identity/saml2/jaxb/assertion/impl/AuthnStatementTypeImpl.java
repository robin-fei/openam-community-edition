//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v1.0.6-b27-fcs 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2012.06.11 at 10:34:07 AM PDT 
//


package com.sun.identity.saml2.jaxb.assertion.impl;

public class AuthnStatementTypeImpl
    extends com.sun.identity.saml2.jaxb.assertion.impl.StatementAbstractTypeImpl
    implements com.sun.identity.saml2.jaxb.assertion.AuthnStatementType, com.sun.xml.bind.JAXBObject, com.sun.identity.saml2.jaxb.assertion.impl.runtime.UnmarshallableObject, com.sun.identity.saml2.jaxb.assertion.impl.runtime.XMLSerializable, com.sun.identity.saml2.jaxb.assertion.impl.runtime.ValidatableObject
{

    protected com.sun.identity.saml2.jaxb.assertion.AuthnContextType _AuthnContext;
    protected java.util.Calendar _AuthnInstant;
    protected com.sun.identity.saml2.jaxb.assertion.SubjectLocalityType _SubjectLocality;
    protected java.util.Calendar _SessionNotOnOrAfter;
    protected java.lang.String _SessionIndex;
    public final static java.lang.Class version = (com.sun.identity.saml2.jaxb.assertion.impl.JAXBVersion.class);
    private static com.sun.msv.grammar.Grammar schemaFragment;

    private final static java.lang.Class PRIMARY_INTERFACE_CLASS() {
        return (com.sun.identity.saml2.jaxb.assertion.AuthnStatementType.class);
    }

    public com.sun.identity.saml2.jaxb.assertion.AuthnContextType getAuthnContext() {
        return _AuthnContext;
    }

    public void setAuthnContext(com.sun.identity.saml2.jaxb.assertion.AuthnContextType value) {
        _AuthnContext = value;
    }

    public java.util.Calendar getAuthnInstant() {
        return _AuthnInstant;
    }

    public void setAuthnInstant(java.util.Calendar value) {
        _AuthnInstant = value;
    }

    public com.sun.identity.saml2.jaxb.assertion.SubjectLocalityType getSubjectLocality() {
        return _SubjectLocality;
    }

    public void setSubjectLocality(com.sun.identity.saml2.jaxb.assertion.SubjectLocalityType value) {
        _SubjectLocality = value;
    }

    public java.util.Calendar getSessionNotOnOrAfter() {
        return _SessionNotOnOrAfter;
    }

    public void setSessionNotOnOrAfter(java.util.Calendar value) {
        _SessionNotOnOrAfter = value;
    }

    public java.lang.String getSessionIndex() {
        return _SessionIndex;
    }

    public void setSessionIndex(java.lang.String value) {
        _SessionIndex = value;
    }

    public com.sun.identity.saml2.jaxb.assertion.impl.runtime.UnmarshallingEventHandler createUnmarshaller(com.sun.identity.saml2.jaxb.assertion.impl.runtime.UnmarshallingContext context) {
        return new com.sun.identity.saml2.jaxb.assertion.impl.AuthnStatementTypeImpl.Unmarshaller(context);
    }

    public void serializeBody(com.sun.identity.saml2.jaxb.assertion.impl.runtime.XMLSerializer context)
        throws org.xml.sax.SAXException
    {
        super.serializeBody(context);
        if (_SubjectLocality!= null) {
            if (_SubjectLocality instanceof javax.xml.bind.Element) {
                context.childAsBody(((com.sun.xml.bind.JAXBObject) _SubjectLocality), "SubjectLocality");
            } else {
                context.startElement("urn:oasis:names:tc:SAML:2.0:assertion", "SubjectLocality");
                context.childAsURIs(((com.sun.xml.bind.JAXBObject) _SubjectLocality), "SubjectLocality");
                context.endNamespaceDecls();
                context.childAsAttributes(((com.sun.xml.bind.JAXBObject) _SubjectLocality), "SubjectLocality");
                context.endAttributes();
                context.childAsBody(((com.sun.xml.bind.JAXBObject) _SubjectLocality), "SubjectLocality");
                context.endElement();
            }
        }
        if (_AuthnContext instanceof javax.xml.bind.Element) {
            context.childAsBody(((com.sun.xml.bind.JAXBObject) _AuthnContext), "AuthnContext");
        } else {
            context.startElement("urn:oasis:names:tc:SAML:2.0:assertion", "AuthnContext");
            context.childAsURIs(((com.sun.xml.bind.JAXBObject) _AuthnContext), "AuthnContext");
            context.endNamespaceDecls();
            context.childAsAttributes(((com.sun.xml.bind.JAXBObject) _AuthnContext), "AuthnContext");
            context.endAttributes();
            context.childAsBody(((com.sun.xml.bind.JAXBObject) _AuthnContext), "AuthnContext");
            context.endElement();
        }
    }

    public void serializeAttributes(com.sun.identity.saml2.jaxb.assertion.impl.runtime.XMLSerializer context)
        throws org.xml.sax.SAXException
    {
        context.startAttribute("", "AuthnInstant");
        try {
            context.text(com.sun.msv.datatype.xsd.DateTimeType.theInstance.serializeJavaObject(((java.util.Calendar) _AuthnInstant), null), "AuthnInstant");
        } catch (java.lang.Exception e) {
            com.sun.identity.saml2.jaxb.assertion.impl.runtime.Util.handlePrintConversionException(this, e, context);
        }
        context.endAttribute();
        if (_SessionIndex!= null) {
            context.startAttribute("", "SessionIndex");
            try {
                context.text(((java.lang.String) _SessionIndex), "SessionIndex");
            } catch (java.lang.Exception e) {
                com.sun.identity.saml2.jaxb.assertion.impl.runtime.Util.handlePrintConversionException(this, e, context);
            }
            context.endAttribute();
        }
        if (_SessionNotOnOrAfter!= null) {
            context.startAttribute("", "SessionNotOnOrAfter");
            try {
                context.text(com.sun.msv.datatype.xsd.DateTimeType.theInstance.serializeJavaObject(((java.util.Calendar) _SessionNotOnOrAfter), null), "SessionNotOnOrAfter");
            } catch (java.lang.Exception e) {
                com.sun.identity.saml2.jaxb.assertion.impl.runtime.Util.handlePrintConversionException(this, e, context);
            }
            context.endAttribute();
        }
        super.serializeAttributes(context);
        if (_SubjectLocality!= null) {
            if (_SubjectLocality instanceof javax.xml.bind.Element) {
                context.childAsAttributes(((com.sun.xml.bind.JAXBObject) _SubjectLocality), "SubjectLocality");
            }
        }
        if (_AuthnContext instanceof javax.xml.bind.Element) {
            context.childAsAttributes(((com.sun.xml.bind.JAXBObject) _AuthnContext), "AuthnContext");
        }
    }

    public void serializeURIs(com.sun.identity.saml2.jaxb.assertion.impl.runtime.XMLSerializer context)
        throws org.xml.sax.SAXException
    {
        super.serializeURIs(context);
        if (_SubjectLocality!= null) {
            if (_SubjectLocality instanceof javax.xml.bind.Element) {
                context.childAsURIs(((com.sun.xml.bind.JAXBObject) _SubjectLocality), "SubjectLocality");
            }
        }
        if (_AuthnContext instanceof javax.xml.bind.Element) {
            context.childAsURIs(((com.sun.xml.bind.JAXBObject) _AuthnContext), "AuthnContext");
        }
    }

    public java.lang.Class getPrimaryInterface() {
        return (com.sun.identity.saml2.jaxb.assertion.AuthnStatementType.class);
    }

    public com.sun.msv.verifier.DocumentDeclaration createRawValidator() {
        if (schemaFragment == null) {
            schemaFragment = com.sun.xml.bind.validator.SchemaDeserializer.deserialize((
 "\u00ac\u00ed\u0000\u0005sr\u0000\u001fcom.sun.msv.grammar.SequenceExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000\u001dcom.su"
+"n.msv.grammar.BinaryExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002L\u0000\u0004exp1t\u0000 Lcom/sun/msv/gra"
+"mmar/Expression;L\u0000\u0004exp2q\u0000~\u0000\u0002xr\u0000\u001ecom.sun.msv.grammar.Expressi"
+"on\u00f8\u0018\u0082\u00e8N5~O\u0002\u0000\u0002L\u0000\u0013epsilonReducibilityt\u0000\u0013Ljava/lang/Boolean;L\u0000\u000b"
+"expandedExpq\u0000~\u0000\u0002xpppsq\u0000~\u0000\u0000ppsq\u0000~\u0000\u0000ppsq\u0000~\u0000\u0000ppsr\u0000\u001dcom.sun.msv."
+"grammar.ChoiceExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u0001ppsq\u0000~\u0000\tsr\u0000\u0011java.lang.Bool"
+"ean\u00cd r\u0080\u00d5\u009c\u00fa\u00ee\u0002\u0000\u0001Z\u0000\u0005valuexp\u0000psr\u0000\'com.sun.msv.grammar.trex.Eleme"
+"ntPattern\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001L\u0000\tnameClasst\u0000\u001fLcom/sun/msv/grammar/Name"
+"Class;xr\u0000\u001ecom.sun.msv.grammar.ElementExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002Z\u0000\u001aignore"
+"UndeclaredAttributesL\u0000\fcontentModelq\u0000~\u0000\u0002xq\u0000~\u0000\u0003q\u0000~\u0000\rp\u0000sq\u0000~\u0000\tp"
+"psr\u0000 com.sun.msv.grammar.OneOrMoreExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000\u001ccom.sun."
+"msv.grammar.UnaryExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001L\u0000\u0003expq\u0000~\u0000\u0002xq\u0000~\u0000\u0003q\u0000~\u0000\rpsr\u0000 co"
+"m.sun.msv.grammar.AttributeExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002L\u0000\u0003expq\u0000~\u0000\u0002L\u0000\tnameC"
+"lassq\u0000~\u0000\u000fxq\u0000~\u0000\u0003q\u0000~\u0000\rpsr\u00002com.sun.msv.grammar.Expression$AnyS"
+"tringExpression\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u0003sq\u0000~\u0000\f\u0001q\u0000~\u0000\u0019sr\u0000 com.sun.msv."
+"grammar.AnyNameClass\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000\u001dcom.sun.msv.grammar.NameC"
+"lass\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xpsr\u00000com.sun.msv.grammar.Expression$EpsilonE"
+"xpression\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u0003q\u0000~\u0000\u001aq\u0000~\u0000\u001fsr\u0000#com.sun.msv.grammar."
+"SimpleNameClass\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002L\u0000\tlocalNamet\u0000\u0012Ljava/lang/String;L"
+"\u0000\fnamespaceURIq\u0000~\u0000!xq\u0000~\u0000\u001ct\u0000<com.sun.identity.saml2.jaxb.asse"
+"rtion.SubjectLocalityElementt\u0000+http://java.sun.com/jaxb/xjc/"
+"dummy-elementssq\u0000~\u0000\u000eq\u0000~\u0000\rp\u0000sq\u0000~\u0000\u0000ppsq\u0000~\u0000\u000epp\u0000sq\u0000~\u0000\tppsq\u0000~\u0000\u0013q\u0000"
+"~\u0000\rpsq\u0000~\u0000\u0016q\u0000~\u0000\rpq\u0000~\u0000\u0019q\u0000~\u0000\u001dq\u0000~\u0000\u001fsq\u0000~\u0000 t\u00009com.sun.identity.sam"
+"l2.jaxb.assertion.SubjectLocalityTypeq\u0000~\u0000$sq\u0000~\u0000\tppsq\u0000~\u0000\u0016q\u0000~\u0000"
+"\rpsr\u0000\u001bcom.sun.msv.grammar.DataExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0003L\u0000\u0002dtt\u0000\u001fLorg/rel"
+"axng/datatype/Datatype;L\u0000\u0006exceptq\u0000~\u0000\u0002L\u0000\u0004namet\u0000\u001dLcom/sun/msv/"
+"util/StringPair;xq\u0000~\u0000\u0003ppsr\u0000\"com.sun.msv.datatype.xsd.QnameTy"
+"pe\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000*com.sun.msv.datatype.xsd.BuiltinAtomicType\u0000"
+"\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000%com.sun.msv.datatype.xsd.ConcreteType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002"
+"\u0000\u0000xr\u0000\'com.sun.msv.datatype.xsd.XSDatatypeImpl\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0003L\u0000\fn"
+"amespaceUriq\u0000~\u0000!L\u0000\btypeNameq\u0000~\u0000!L\u0000\nwhiteSpacet\u0000.Lcom/sun/msv"
+"/datatype/xsd/WhiteSpaceProcessor;xpt\u0000 http://www.w3.org/200"
+"1/XMLSchemat\u0000\u0005QNamesr\u00005com.sun.msv.datatype.xsd.WhiteSpacePr"
+"ocessor$Collapse\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000,com.sun.msv.datatype.xsd.Whit"
+"eSpaceProcessor\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xpsr\u00000com.sun.msv.grammar.Expressi"
+"on$NullSetExpression\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u0003q\u0000~\u0000\rpsr\u0000\u001bcom.sun.msv.u"
+"til.StringPair\u00d0t\u001ejB\u008f\u008d\u00a0\u0002\u0000\u0002L\u0000\tlocalNameq\u0000~\u0000!L\u0000\fnamespaceURIq\u0000~"
+"\u0000!xpq\u0000~\u0000:q\u0000~\u00009sq\u0000~\u0000 t\u0000\u0004typet\u0000)http://www.w3.org/2001/XMLSche"
+"ma-instanceq\u0000~\u0000\u001fsq\u0000~\u0000 t\u0000\u000fSubjectLocalityt\u0000%urn:oasis:names:t"
+"c:SAML:2.0:assertionq\u0000~\u0000\u001fsq\u0000~\u0000\tppsq\u0000~\u0000\u000epp\u0000sq\u0000~\u0000\tppsq\u0000~\u0000\u0013q\u0000~\u0000"
+"\rpsq\u0000~\u0000\u0016q\u0000~\u0000\rpq\u0000~\u0000\u0019q\u0000~\u0000\u001dq\u0000~\u0000\u001fsq\u0000~\u0000 t\u00009com.sun.identity.saml2"
+".jaxb.assertion.AuthnContextElementq\u0000~\u0000$sq\u0000~\u0000\u000epp\u0000sq\u0000~\u0000\u0000ppsq\u0000"
+"~\u0000\u000epp\u0000sq\u0000~\u0000\tppsq\u0000~\u0000\u0013q\u0000~\u0000\rpsq\u0000~\u0000\u0016q\u0000~\u0000\rpq\u0000~\u0000\u0019q\u0000~\u0000\u001dq\u0000~\u0000\u001fsq\u0000~\u0000 t"
+"\u00006com.sun.identity.saml2.jaxb.assertion.AuthnContextTypeq\u0000~\u0000"
+"$sq\u0000~\u0000\tppsq\u0000~\u0000\u0016q\u0000~\u0000\rpq\u0000~\u00002q\u0000~\u0000Bq\u0000~\u0000\u001fsq\u0000~\u0000 t\u0000\fAuthnContextq\u0000~"
+"\u0000Gsq\u0000~\u0000\u0016ppsq\u0000~\u0000/ppsr\u0000%com.sun.msv.datatype.xsd.DateTimeType\u0000"
+"\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000)com.sun.msv.datatype.xsd.DateTimeBaseType\u0014W\u001a@3"
+"\u00a5\u00b4\u00e5\u0002\u0000\u0000xq\u0000~\u00004q\u0000~\u00009t\u0000\bdateTimeq\u0000~\u0000=q\u0000~\u0000?sq\u0000~\u0000@q\u0000~\u0000`q\u0000~\u00009sq\u0000~\u0000 "
+"t\u0000\fAuthnInstantt\u0000\u0000sq\u0000~\u0000\tppsq\u0000~\u0000\u0016q\u0000~\u0000\rpsq\u0000~\u0000/q\u0000~\u0000\rpsr\u0000#com.su"
+"n.msv.datatype.xsd.StringType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001Z\u0000\risAlwaysValidxq\u0000~"
+"\u00004q\u0000~\u00009t\u0000\u0006stringsr\u00005com.sun.msv.datatype.xsd.WhiteSpaceProce"
+"ssor$Preserve\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000<\u0001q\u0000~\u0000?sq\u0000~\u0000@q\u0000~\u0000jq\u0000~\u00009sq\u0000~\u0000 t\u0000"
+"\fSessionIndexq\u0000~\u0000dq\u0000~\u0000\u001fsq\u0000~\u0000\tppsq\u0000~\u0000\u0016q\u0000~\u0000\rpq\u0000~\u0000\\sq\u0000~\u0000 t\u0000\u0013Ses"
+"sionNotOnOrAfterq\u0000~\u0000dq\u0000~\u0000\u001fsr\u0000\"com.sun.msv.grammar.Expression"
+"Pool\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001L\u0000\bexpTablet\u0000/Lcom/sun/msv/grammar/Expression"
+"Pool$ClosedHash;xpsr\u0000-com.sun.msv.grammar.ExpressionPool$Clo"
+"sedHash\u00d7j\u00d0N\u00ef\u00e8\u00ed\u001c\u0003\u0000\u0003I\u0000\u0005countB\u0000\rstreamVersionL\u0000\u0006parentt\u0000$Lcom/s"
+"un/msv/grammar/ExpressionPool;xp\u0000\u0000\u0000\u0015\u0001pq\u0000~\u0000eq\u0000~\u0000\u0012q\u0000~\u0000(q\u0000~\u0000Jq\u0000"
+"~\u0000Rq\u0000~\u0000&q\u0000~\u0000Pq\u0000~\u0000\u0005q\u0000~\u0000\u0006q\u0000~\u0000\bq\u0000~\u0000\u0015q\u0000~\u0000)q\u0000~\u0000Kq\u0000~\u0000Sq\u0000~\u0000\nq\u0000~\u0000\u0007q\u0000"
+"~\u0000pq\u0000~\u0000-q\u0000~\u0000Wq\u0000~\u0000\u000bq\u0000~\u0000Hx"));
        }
        return new com.sun.msv.verifier.regexp.REDocumentDeclaration(schemaFragment);
    }

    public class Unmarshaller
        extends com.sun.identity.saml2.jaxb.assertion.impl.runtime.AbstractUnmarshallingEventHandlerImpl
    {


        public Unmarshaller(com.sun.identity.saml2.jaxb.assertion.impl.runtime.UnmarshallingContext context) {
            super(context, "-----------------");
        }

        protected Unmarshaller(com.sun.identity.saml2.jaxb.assertion.impl.runtime.UnmarshallingContext context, int startState) {
            this(context);
            state = startState;
        }

        public java.lang.Object owner() {
            return com.sun.identity.saml2.jaxb.assertion.impl.AuthnStatementTypeImpl.this;
        }

        public void enterElement(java.lang.String ___uri, java.lang.String ___local, java.lang.String ___qname, org.xml.sax.Attributes __atts)
            throws org.xml.sax.SAXException
        {
            int attIdx;
            outer:
            while (true) {
                switch (state) {
                    case  6 :
                        attIdx = context.getAttribute("", "SessionNotOnOrAfter");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            state = 9;
                            eatText1(v);
                            continue outer;
                        }
                        state = 9;
                        continue outer;
                    case  14 :
                        if (("AuthnContextClassRef" == ___local)&&("urn:oasis:names:tc:SAML:2.0:assertion" == ___uri)) {
                            _AuthnContext = ((com.sun.identity.saml2.jaxb.assertion.impl.AuthnContextTypeImpl) spawnChildFromEnterElement((com.sun.identity.saml2.jaxb.assertion.impl.AuthnContextTypeImpl.class), 15, ___uri, ___local, ___qname, __atts));
                            return ;
                        }
                        if (("AuthnContextDecl" == ___local)&&("urn:oasis:names:tc:SAML:2.0:assertion" == ___uri)) {
                            _AuthnContext = ((com.sun.identity.saml2.jaxb.assertion.impl.AuthnContextTypeImpl) spawnChildFromEnterElement((com.sun.identity.saml2.jaxb.assertion.impl.AuthnContextTypeImpl.class), 15, ___uri, ___local, ___qname, __atts));
                            return ;
                        }
                        if (("AuthnContextDecl" == ___local)&&("urn:oasis:names:tc:SAML:2.0:assertion" == ___uri)) {
                            _AuthnContext = ((com.sun.identity.saml2.jaxb.assertion.impl.AuthnContextTypeImpl) spawnChildFromEnterElement((com.sun.identity.saml2.jaxb.assertion.impl.AuthnContextTypeImpl.class), 15, ___uri, ___local, ___qname, __atts));
                            return ;
                        }
                        if (("AuthnContextDeclRef" == ___local)&&("urn:oasis:names:tc:SAML:2.0:assertion" == ___uri)) {
                            _AuthnContext = ((com.sun.identity.saml2.jaxb.assertion.impl.AuthnContextTypeImpl) spawnChildFromEnterElement((com.sun.identity.saml2.jaxb.assertion.impl.AuthnContextTypeImpl.class), 15, ___uri, ___local, ___qname, __atts));
                            return ;
                        }
                        break;
                    case  3 :
                        attIdx = context.getAttribute("", "SessionIndex");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            state = 6;
                            eatText2(v);
                            continue outer;
                        }
                        state = 6;
                        continue outer;
                    case  10 :
                        if (("SubjectLocality" == ___local)&&("urn:oasis:names:tc:SAML:2.0:assertion" == ___uri)) {
                            _SubjectLocality = ((com.sun.identity.saml2.jaxb.assertion.impl.SubjectLocalityElementImpl) spawnChildFromEnterElement((com.sun.identity.saml2.jaxb.assertion.impl.SubjectLocalityElementImpl.class), 13, ___uri, ___local, ___qname, __atts));
                            return ;
                        }
                        if (("SubjectLocality" == ___local)&&("urn:oasis:names:tc:SAML:2.0:assertion" == ___uri)) {
                            context.pushAttributes(__atts, false);
                            state = 11;
                            return ;
                        }
                        state = 13;
                        continue outer;
                    case  16 :
                        revertToParentFromEnterElement(___uri, ___local, ___qname, __atts);
                        return ;
                    case  13 :
                        if (("AuthnContext" == ___local)&&("urn:oasis:names:tc:SAML:2.0:assertion" == ___uri)) {
                            _AuthnContext = ((com.sun.identity.saml2.jaxb.assertion.impl.AuthnContextElementImpl) spawnChildFromEnterElement((com.sun.identity.saml2.jaxb.assertion.impl.AuthnContextElementImpl.class), 16, ___uri, ___local, ___qname, __atts));
                            return ;
                        }
                        if (("AuthnContext" == ___local)&&("urn:oasis:names:tc:SAML:2.0:assertion" == ___uri)) {
                            context.pushAttributes(__atts, false);
                            state = 14;
                            return ;
                        }
                        break;
                    case  0 :
                        attIdx = context.getAttribute("", "AuthnInstant");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            state = 3;
                            eatText3(v);
                            continue outer;
                        }
                        break;
                    case  11 :
                        attIdx = context.getAttribute("", "Address");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().enterElement(___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        attIdx = context.getAttribute("", "DNSName");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().enterElement(___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        _SubjectLocality = ((com.sun.identity.saml2.jaxb.assertion.impl.SubjectLocalityTypeImpl) spawnChildFromEnterElement((com.sun.identity.saml2.jaxb.assertion.impl.SubjectLocalityTypeImpl.class), 12, ___uri, ___local, ___qname, __atts));
                        return ;
                    case  9 :
                        spawnHandlerFromEnterElement((((com.sun.identity.saml2.jaxb.assertion.impl.StatementAbstractTypeImpl)com.sun.identity.saml2.jaxb.assertion.impl.AuthnStatementTypeImpl.this).new Unmarshaller(context)), 10, ___uri, ___local, ___qname, __atts);
                        return ;
                }
                super.enterElement(___uri, ___local, ___qname, __atts);
                break;
            }
        }

        private void eatText1(final java.lang.String value)
            throws org.xml.sax.SAXException
        {
            try {
                _SessionNotOnOrAfter = ((java.util.Calendar) com.sun.msv.datatype.xsd.DateTimeType.theInstance.createJavaObject(com.sun.xml.bind.WhiteSpaceProcessor.collapse(value), null));
            } catch (java.lang.Exception e) {
                handleParseConversionException(e);
            }
        }

        private void eatText2(final java.lang.String value)
            throws org.xml.sax.SAXException
        {
            try {
                _SessionIndex = value;
            } catch (java.lang.Exception e) {
                handleParseConversionException(e);
            }
        }

        private void eatText3(final java.lang.String value)
            throws org.xml.sax.SAXException
        {
            try {
                _AuthnInstant = ((java.util.Calendar) com.sun.msv.datatype.xsd.DateTimeType.theInstance.createJavaObject(com.sun.xml.bind.WhiteSpaceProcessor.collapse(value), null));
            } catch (java.lang.Exception e) {
                handleParseConversionException(e);
            }
        }

        public void leaveElement(java.lang.String ___uri, java.lang.String ___local, java.lang.String ___qname)
            throws org.xml.sax.SAXException
        {
            int attIdx;
            outer:
            while (true) {
                switch (state) {
                    case  6 :
                        attIdx = context.getAttribute("", "SessionNotOnOrAfter");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            state = 9;
                            eatText1(v);
                            continue outer;
                        }
                        state = 9;
                        continue outer;
                    case  3 :
                        attIdx = context.getAttribute("", "SessionIndex");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            state = 6;
                            eatText2(v);
                            continue outer;
                        }
                        state = 6;
                        continue outer;
                    case  15 :
                        if (("AuthnContext" == ___local)&&("urn:oasis:names:tc:SAML:2.0:assertion" == ___uri)) {
                            context.popAttributes();
                            state = 16;
                            return ;
                        }
                        break;
                    case  10 :
                        state = 13;
                        continue outer;
                    case  12 :
                        if (("SubjectLocality" == ___local)&&("urn:oasis:names:tc:SAML:2.0:assertion" == ___uri)) {
                            context.popAttributes();
                            state = 13;
                            return ;
                        }
                        break;
                    case  16 :
                        revertToParentFromLeaveElement(___uri, ___local, ___qname);
                        return ;
                    case  0 :
                        attIdx = context.getAttribute("", "AuthnInstant");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            state = 3;
                            eatText3(v);
                            continue outer;
                        }
                        break;
                    case  11 :
                        attIdx = context.getAttribute("", "Address");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().leaveElement(___uri, ___local, ___qname);
                            return ;
                        }
                        attIdx = context.getAttribute("", "DNSName");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().leaveElement(___uri, ___local, ___qname);
                            return ;
                        }
                        _SubjectLocality = ((com.sun.identity.saml2.jaxb.assertion.impl.SubjectLocalityTypeImpl) spawnChildFromLeaveElement((com.sun.identity.saml2.jaxb.assertion.impl.SubjectLocalityTypeImpl.class), 12, ___uri, ___local, ___qname));
                        return ;
                    case  9 :
                        spawnHandlerFromLeaveElement((((com.sun.identity.saml2.jaxb.assertion.impl.StatementAbstractTypeImpl)com.sun.identity.saml2.jaxb.assertion.impl.AuthnStatementTypeImpl.this).new Unmarshaller(context)), 10, ___uri, ___local, ___qname);
                        return ;
                }
                super.leaveElement(___uri, ___local, ___qname);
                break;
            }
        }

        public void enterAttribute(java.lang.String ___uri, java.lang.String ___local, java.lang.String ___qname)
            throws org.xml.sax.SAXException
        {
            int attIdx;
            outer:
            while (true) {
                switch (state) {
                    case  6 :
                        if (("SessionNotOnOrAfter" == ___local)&&("" == ___uri)) {
                            state = 7;
                            return ;
                        }
                        state = 9;
                        continue outer;
                    case  3 :
                        if (("SessionIndex" == ___local)&&("" == ___uri)) {
                            state = 4;
                            return ;
                        }
                        state = 6;
                        continue outer;
                    case  10 :
                        state = 13;
                        continue outer;
                    case  16 :
                        revertToParentFromEnterAttribute(___uri, ___local, ___qname);
                        return ;
                    case  0 :
                        if (("AuthnInstant" == ___local)&&("" == ___uri)) {
                            state = 1;
                            return ;
                        }
                        break;
                    case  11 :
                        if (("Address" == ___local)&&("" == ___uri)) {
                            _SubjectLocality = ((com.sun.identity.saml2.jaxb.assertion.impl.SubjectLocalityTypeImpl) spawnChildFromEnterAttribute((com.sun.identity.saml2.jaxb.assertion.impl.SubjectLocalityTypeImpl.class), 12, ___uri, ___local, ___qname));
                            return ;
                        }
                        if (("DNSName" == ___local)&&("" == ___uri)) {
                            _SubjectLocality = ((com.sun.identity.saml2.jaxb.assertion.impl.SubjectLocalityTypeImpl) spawnChildFromEnterAttribute((com.sun.identity.saml2.jaxb.assertion.impl.SubjectLocalityTypeImpl.class), 12, ___uri, ___local, ___qname));
                            return ;
                        }
                        _SubjectLocality = ((com.sun.identity.saml2.jaxb.assertion.impl.SubjectLocalityTypeImpl) spawnChildFromEnterAttribute((com.sun.identity.saml2.jaxb.assertion.impl.SubjectLocalityTypeImpl.class), 12, ___uri, ___local, ___qname));
                        return ;
                    case  9 :
                        spawnHandlerFromEnterAttribute((((com.sun.identity.saml2.jaxb.assertion.impl.StatementAbstractTypeImpl)com.sun.identity.saml2.jaxb.assertion.impl.AuthnStatementTypeImpl.this).new Unmarshaller(context)), 10, ___uri, ___local, ___qname);
                        return ;
                }
                super.enterAttribute(___uri, ___local, ___qname);
                break;
            }
        }

        public void leaveAttribute(java.lang.String ___uri, java.lang.String ___local, java.lang.String ___qname)
            throws org.xml.sax.SAXException
        {
            int attIdx;
            outer:
            while (true) {
                switch (state) {
                    case  6 :
                        attIdx = context.getAttribute("", "SessionNotOnOrAfter");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            state = 9;
                            eatText1(v);
                            continue outer;
                        }
                        state = 9;
                        continue outer;
                    case  3 :
                        attIdx = context.getAttribute("", "SessionIndex");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            state = 6;
                            eatText2(v);
                            continue outer;
                        }
                        state = 6;
                        continue outer;
                    case  8 :
                        if (("SessionNotOnOrAfter" == ___local)&&("" == ___uri)) {
                            state = 9;
                            return ;
                        }
                        break;
                    case  2 :
                        if (("AuthnInstant" == ___local)&&("" == ___uri)) {
                            state = 3;
                            return ;
                        }
                        break;
                    case  10 :
                        state = 13;
                        continue outer;
                    case  16 :
                        revertToParentFromLeaveAttribute(___uri, ___local, ___qname);
                        return ;
                    case  0 :
                        attIdx = context.getAttribute("", "AuthnInstant");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            state = 3;
                            eatText3(v);
                            continue outer;
                        }
                        break;
                    case  11 :
                        attIdx = context.getAttribute("", "Address");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().leaveAttribute(___uri, ___local, ___qname);
                            return ;
                        }
                        attIdx = context.getAttribute("", "DNSName");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().leaveAttribute(___uri, ___local, ___qname);
                            return ;
                        }
                        _SubjectLocality = ((com.sun.identity.saml2.jaxb.assertion.impl.SubjectLocalityTypeImpl) spawnChildFromLeaveAttribute((com.sun.identity.saml2.jaxb.assertion.impl.SubjectLocalityTypeImpl.class), 12, ___uri, ___local, ___qname));
                        return ;
                    case  5 :
                        if (("SessionIndex" == ___local)&&("" == ___uri)) {
                            state = 6;
                            return ;
                        }
                        break;
                    case  9 :
                        spawnHandlerFromLeaveAttribute((((com.sun.identity.saml2.jaxb.assertion.impl.StatementAbstractTypeImpl)com.sun.identity.saml2.jaxb.assertion.impl.AuthnStatementTypeImpl.this).new Unmarshaller(context)), 10, ___uri, ___local, ___qname);
                        return ;
                }
                super.leaveAttribute(___uri, ___local, ___qname);
                break;
            }
        }

        public void handleText(final java.lang.String value)
            throws org.xml.sax.SAXException
        {
            int attIdx;
            outer:
            while (true) {
                try {
                    switch (state) {
                        case  6 :
                            attIdx = context.getAttribute("", "SessionNotOnOrAfter");
                            if (attIdx >= 0) {
                                final java.lang.String v = context.eatAttribute(attIdx);
                                state = 9;
                                eatText1(v);
                                continue outer;
                            }
                            state = 9;
                            continue outer;
                        case  3 :
                            attIdx = context.getAttribute("", "SessionIndex");
                            if (attIdx >= 0) {
                                final java.lang.String v = context.eatAttribute(attIdx);
                                state = 6;
                                eatText2(v);
                                continue outer;
                            }
                            state = 6;
                            continue outer;
                        case  10 :
                            state = 13;
                            continue outer;
                        case  16 :
                            revertToParentFromText(value);
                            return ;
                        case  7 :
                            state = 8;
                            eatText1(value);
                            return ;
                        case  0 :
                            attIdx = context.getAttribute("", "AuthnInstant");
                            if (attIdx >= 0) {
                                final java.lang.String v = context.eatAttribute(attIdx);
                                state = 3;
                                eatText3(v);
                                continue outer;
                            }
                            break;
                        case  4 :
                            state = 5;
                            eatText2(value);
                            return ;
                        case  1 :
                            state = 2;
                            eatText3(value);
                            return ;
                        case  11 :
                            attIdx = context.getAttribute("", "Address");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().text(value);
                                return ;
                            }
                            attIdx = context.getAttribute("", "DNSName");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().text(value);
                                return ;
                            }
                            _SubjectLocality = ((com.sun.identity.saml2.jaxb.assertion.impl.SubjectLocalityTypeImpl) spawnChildFromText((com.sun.identity.saml2.jaxb.assertion.impl.SubjectLocalityTypeImpl.class), 12, value));
                            return ;
                        case  9 :
                            spawnHandlerFromText((((com.sun.identity.saml2.jaxb.assertion.impl.StatementAbstractTypeImpl)com.sun.identity.saml2.jaxb.assertion.impl.AuthnStatementTypeImpl.this).new Unmarshaller(context)), 10, value);
                            return ;
                    }
                } catch (java.lang.RuntimeException e) {
                    handleUnexpectedTextException(value, e);
                }
                break;
            }
        }

    }

}
