//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v1.0.6-b27-fcs 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2012.06.11 at 10:34:07 AM PDT 
//


package com.sun.identity.saml2.jaxb.assertion.impl;

public class SubjectConfirmationTypeImpl implements com.sun.identity.saml2.jaxb.assertion.SubjectConfirmationType, com.sun.xml.bind.JAXBObject, com.sun.identity.saml2.jaxb.assertion.impl.runtime.UnmarshallableObject, com.sun.identity.saml2.jaxb.assertion.impl.runtime.XMLSerializable, com.sun.identity.saml2.jaxb.assertion.impl.runtime.ValidatableObject
{

    protected com.sun.identity.saml2.jaxb.assertion.SubjectConfirmationDataType _SubjectConfirmationData;
    protected com.sun.identity.saml2.jaxb.assertion.EncryptedElementType _EncryptedID;
    protected java.lang.String _Method;
    protected com.sun.identity.saml2.jaxb.assertion.BaseIDAbstractType _BaseID;
    protected com.sun.identity.saml2.jaxb.assertion.NameIDType _NameID;
    public final static java.lang.Class version = (com.sun.identity.saml2.jaxb.assertion.impl.JAXBVersion.class);
    private static com.sun.msv.grammar.Grammar schemaFragment;

    private final static java.lang.Class PRIMARY_INTERFACE_CLASS() {
        return (com.sun.identity.saml2.jaxb.assertion.SubjectConfirmationType.class);
    }

    public com.sun.identity.saml2.jaxb.assertion.SubjectConfirmationDataType getSubjectConfirmationData() {
        return _SubjectConfirmationData;
    }

    public void setSubjectConfirmationData(com.sun.identity.saml2.jaxb.assertion.SubjectConfirmationDataType value) {
        _SubjectConfirmationData = value;
    }

    public com.sun.identity.saml2.jaxb.assertion.EncryptedElementType getEncryptedID() {
        return _EncryptedID;
    }

    public void setEncryptedID(com.sun.identity.saml2.jaxb.assertion.EncryptedElementType value) {
        _EncryptedID = value;
    }

    public java.lang.String getMethod() {
        return _Method;
    }

    public void setMethod(java.lang.String value) {
        _Method = value;
    }

    public com.sun.identity.saml2.jaxb.assertion.BaseIDAbstractType getBaseID() {
        return _BaseID;
    }

    public void setBaseID(com.sun.identity.saml2.jaxb.assertion.BaseIDAbstractType value) {
        _BaseID = value;
    }

    public com.sun.identity.saml2.jaxb.assertion.NameIDType getNameID() {
        return _NameID;
    }

    public void setNameID(com.sun.identity.saml2.jaxb.assertion.NameIDType value) {
        _NameID = value;
    }

    public com.sun.identity.saml2.jaxb.assertion.impl.runtime.UnmarshallingEventHandler createUnmarshaller(com.sun.identity.saml2.jaxb.assertion.impl.runtime.UnmarshallingContext context) {
        return new com.sun.identity.saml2.jaxb.assertion.impl.SubjectConfirmationTypeImpl.Unmarshaller(context);
    }

    public void serializeBody(com.sun.identity.saml2.jaxb.assertion.impl.runtime.XMLSerializer context)
        throws org.xml.sax.SAXException
    {
        if (((_EncryptedID == null)&&(_NameID == null))&&(_BaseID!= null)) {
            if (_BaseID instanceof javax.xml.bind.Element) {
                context.childAsBody(((com.sun.xml.bind.JAXBObject) _BaseID), "BaseID");
            } else {
                context.startElement("urn:oasis:names:tc:SAML:2.0:assertion", "BaseID");
                context.childAsURIs(((com.sun.xml.bind.JAXBObject) _BaseID), "BaseID");
                context.endNamespaceDecls();
                context.childAsAttributes(((com.sun.xml.bind.JAXBObject) _BaseID), "BaseID");
                context.endAttributes();
                context.childAsBody(((com.sun.xml.bind.JAXBObject) _BaseID), "BaseID");
                context.endElement();
            }
        } else {
            if (((_EncryptedID == null)&&(_NameID!= null))&&(_BaseID == null)) {
                if (_NameID instanceof javax.xml.bind.Element) {
                    context.childAsBody(((com.sun.xml.bind.JAXBObject) _NameID), "NameID");
                } else {
                    context.startElement("urn:oasis:names:tc:SAML:2.0:assertion", "NameID");
                    context.childAsURIs(((com.sun.xml.bind.JAXBObject) _NameID), "NameID");
                    context.endNamespaceDecls();
                    context.childAsAttributes(((com.sun.xml.bind.JAXBObject) _NameID), "NameID");
                    context.endAttributes();
                    context.childAsBody(((com.sun.xml.bind.JAXBObject) _NameID), "NameID");
                    context.endElement();
                }
            } else {
                if (((_EncryptedID!= null)&&(_NameID == null))&&(_BaseID == null)) {
                    if (_EncryptedID instanceof javax.xml.bind.Element) {
                        context.childAsBody(((com.sun.xml.bind.JAXBObject) _EncryptedID), "EncryptedID");
                    } else {
                        context.startElement("urn:oasis:names:tc:SAML:2.0:assertion", "EncryptedID");
                        context.childAsURIs(((com.sun.xml.bind.JAXBObject) _EncryptedID), "EncryptedID");
                        context.endNamespaceDecls();
                        context.childAsAttributes(((com.sun.xml.bind.JAXBObject) _EncryptedID), "EncryptedID");
                        context.endAttributes();
                        context.childAsBody(((com.sun.xml.bind.JAXBObject) _EncryptedID), "EncryptedID");
                        context.endElement();
                    }
                }
            }
        }
        if (_SubjectConfirmationData!= null) {
            if (_SubjectConfirmationData instanceof javax.xml.bind.Element) {
                context.childAsBody(((com.sun.xml.bind.JAXBObject) _SubjectConfirmationData), "SubjectConfirmationData");
            } else {
                context.startElement("urn:oasis:names:tc:SAML:2.0:assertion", "SubjectConfirmationData");
                context.childAsURIs(((com.sun.xml.bind.JAXBObject) _SubjectConfirmationData), "SubjectConfirmationData");
                context.endNamespaceDecls();
                context.childAsAttributes(((com.sun.xml.bind.JAXBObject) _SubjectConfirmationData), "SubjectConfirmationData");
                context.endAttributes();
                context.childAsBody(((com.sun.xml.bind.JAXBObject) _SubjectConfirmationData), "SubjectConfirmationData");
                context.endElement();
            }
        }
    }

    public void serializeAttributes(com.sun.identity.saml2.jaxb.assertion.impl.runtime.XMLSerializer context)
        throws org.xml.sax.SAXException
    {
        context.startAttribute("", "Method");
        try {
            context.text(((java.lang.String) _Method), "Method");
        } catch (java.lang.Exception e) {
            com.sun.identity.saml2.jaxb.assertion.impl.runtime.Util.handlePrintConversionException(this, e, context);
        }
        context.endAttribute();
        if (((_EncryptedID == null)&&(_NameID == null))&&(_BaseID!= null)) {
            if (_BaseID instanceof javax.xml.bind.Element) {
                context.childAsAttributes(((com.sun.xml.bind.JAXBObject) _BaseID), "BaseID");
            }
        } else {
            if (((_EncryptedID == null)&&(_NameID!= null))&&(_BaseID == null)) {
                if (_NameID instanceof javax.xml.bind.Element) {
                    context.childAsAttributes(((com.sun.xml.bind.JAXBObject) _NameID), "NameID");
                }
            } else {
                if (((_EncryptedID!= null)&&(_NameID == null))&&(_BaseID == null)) {
                    if (_EncryptedID instanceof javax.xml.bind.Element) {
                        context.childAsAttributes(((com.sun.xml.bind.JAXBObject) _EncryptedID), "EncryptedID");
                    }
                }
            }
        }
        if (_SubjectConfirmationData!= null) {
            if (_SubjectConfirmationData instanceof javax.xml.bind.Element) {
                context.childAsAttributes(((com.sun.xml.bind.JAXBObject) _SubjectConfirmationData), "SubjectConfirmationData");
            }
        }
    }

    public void serializeURIs(com.sun.identity.saml2.jaxb.assertion.impl.runtime.XMLSerializer context)
        throws org.xml.sax.SAXException
    {
        if (((_EncryptedID == null)&&(_NameID == null))&&(_BaseID!= null)) {
            if (_BaseID instanceof javax.xml.bind.Element) {
                context.childAsURIs(((com.sun.xml.bind.JAXBObject) _BaseID), "BaseID");
            }
        } else {
            if (((_EncryptedID == null)&&(_NameID!= null))&&(_BaseID == null)) {
                if (_NameID instanceof javax.xml.bind.Element) {
                    context.childAsURIs(((com.sun.xml.bind.JAXBObject) _NameID), "NameID");
                }
            } else {
                if (((_EncryptedID!= null)&&(_NameID == null))&&(_BaseID == null)) {
                    if (_EncryptedID instanceof javax.xml.bind.Element) {
                        context.childAsURIs(((com.sun.xml.bind.JAXBObject) _EncryptedID), "EncryptedID");
                    }
                }
            }
        }
        if (_SubjectConfirmationData!= null) {
            if (_SubjectConfirmationData instanceof javax.xml.bind.Element) {
                context.childAsURIs(((com.sun.xml.bind.JAXBObject) _SubjectConfirmationData), "SubjectConfirmationData");
            }
        }
    }

    public java.lang.Class getPrimaryInterface() {
        return (com.sun.identity.saml2.jaxb.assertion.SubjectConfirmationType.class);
    }

    public com.sun.msv.verifier.DocumentDeclaration createRawValidator() {
        if (schemaFragment == null) {
            schemaFragment = com.sun.xml.bind.validator.SchemaDeserializer.deserialize((
 "\u00ac\u00ed\u0000\u0005sr\u0000\u001fcom.sun.msv.grammar.SequenceExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000\u001dcom.su"
+"n.msv.grammar.BinaryExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002L\u0000\u0004exp1t\u0000 Lcom/sun/msv/gra"
+"mmar/Expression;L\u0000\u0004exp2q\u0000~\u0000\u0002xr\u0000\u001ecom.sun.msv.grammar.Expressi"
+"on\u00f8\u0018\u0082\u00e8N5~O\u0002\u0000\u0002L\u0000\u0013epsilonReducibilityt\u0000\u0013Ljava/lang/Boolean;L\u0000\u000b"
+"expandedExpq\u0000~\u0000\u0002xpppsq\u0000~\u0000\u0000ppsr\u0000\u001dcom.sun.msv.grammar.ChoiceEx"
+"p\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u0001ppsq\u0000~\u0000\u0007sr\u0000\u0011java.lang.Boolean\u00cd r\u0080\u00d5\u009c\u00fa\u00ee\u0002\u0000\u0001Z\u0000"
+"\u0005valuexp\u0000psq\u0000~\u0000\u0007q\u0000~\u0000\u000bpsq\u0000~\u0000\u0007q\u0000~\u0000\u000bpsq\u0000~\u0000\u0007q\u0000~\u0000\u000bpsq\u0000~\u0000\u0007q\u0000~\u0000\u000bpsr"
+"\u0000\'com.sun.msv.grammar.trex.ElementPattern\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001L\u0000\tnameC"
+"lasst\u0000\u001fLcom/sun/msv/grammar/NameClass;xr\u0000\u001ecom.sun.msv.gramma"
+"r.ElementExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002Z\u0000\u001aignoreUndeclaredAttributesL\u0000\fconte"
+"ntModelq\u0000~\u0000\u0002xq\u0000~\u0000\u0003q\u0000~\u0000\u000bp\u0000sq\u0000~\u0000\u0007ppsr\u0000 com.sun.msv.grammar.One"
+"OrMoreExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000\u001ccom.sun.msv.grammar.UnaryExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001"
+"\u0002\u0000\u0001L\u0000\u0003expq\u0000~\u0000\u0002xq\u0000~\u0000\u0003q\u0000~\u0000\u000bpsr\u0000 com.sun.msv.grammar.AttributeE"
+"xp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002L\u0000\u0003expq\u0000~\u0000\u0002L\u0000\tnameClassq\u0000~\u0000\u0011xq\u0000~\u0000\u0003q\u0000~\u0000\u000bpsr\u00002com"
+".sun.msv.grammar.Expression$AnyStringExpression\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq"
+"\u0000~\u0000\u0003sq\u0000~\u0000\n\u0001q\u0000~\u0000\u001bsr\u0000 com.sun.msv.grammar.AnyNameClass\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001"
+"\u0002\u0000\u0000xr\u0000\u001dcom.sun.msv.grammar.NameClass\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xpsr\u00000com.sun"
+".msv.grammar.Expression$EpsilonExpression\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u0003q\u0000"
+"~\u0000\u001cq\u0000~\u0000!sr\u0000#com.sun.msv.grammar.SimpleNameClass\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002L\u0000"
+"\tlocalNamet\u0000\u0012Ljava/lang/String;L\u0000\fnamespaceURIq\u0000~\u0000#xq\u0000~\u0000\u001et\u00003"
+"com.sun.identity.saml2.jaxb.assertion.BaseIDElementt\u0000+http:/"
+"/java.sun.com/jaxb/xjc/dummy-elementssq\u0000~\u0000\u0010q\u0000~\u0000\u000bp\u0000sq\u0000~\u0000\u0000ppsq"
+"\u0000~\u0000\u0010pp\u0000sq\u0000~\u0000\u0007ppsq\u0000~\u0000\u0015q\u0000~\u0000\u000bpsq\u0000~\u0000\u0018q\u0000~\u0000\u000bpq\u0000~\u0000\u001bq\u0000~\u0000\u001fq\u0000~\u0000!sq\u0000~\u0000\""
+"t\u00008com.sun.identity.saml2.jaxb.assertion.BaseIDAbstractTypeq"
+"\u0000~\u0000&sq\u0000~\u0000\u0007ppsq\u0000~\u0000\u0018q\u0000~\u0000\u000bpsr\u0000\u001bcom.sun.msv.grammar.DataExp\u0000\u0000\u0000\u0000\u0000"
+"\u0000\u0000\u0001\u0002\u0000\u0003L\u0000\u0002dtt\u0000\u001fLorg/relaxng/datatype/Datatype;L\u0000\u0006exceptq\u0000~\u0000\u0002L"
+"\u0000\u0004namet\u0000\u001dLcom/sun/msv/util/StringPair;xq\u0000~\u0000\u0003ppsr\u0000\"com.sun.ms"
+"v.datatype.xsd.QnameType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000*com.sun.msv.datatype."
+"xsd.BuiltinAtomicType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000%com.sun.msv.datatype.xsd"
+".ConcreteType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000\'com.sun.msv.datatype.xsd.XSDatat"
+"ypeImpl\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0003L\u0000\fnamespaceUriq\u0000~\u0000#L\u0000\btypeNameq\u0000~\u0000#L\u0000\nwhi"
+"teSpacet\u0000.Lcom/sun/msv/datatype/xsd/WhiteSpaceProcessor;xpt\u0000"
+" http://www.w3.org/2001/XMLSchemat\u0000\u0005QNamesr\u00005com.sun.msv.dat"
+"atype.xsd.WhiteSpaceProcessor$Collapse\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000,com.sun"
+".msv.datatype.xsd.WhiteSpaceProcessor\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xpsr\u00000com.su"
+"n.msv.grammar.Expression$NullSetExpression\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u0003q"
+"\u0000~\u0000\u000bpsr\u0000\u001bcom.sun.msv.util.StringPair\u00d0t\u001ejB\u008f\u008d\u00a0\u0002\u0000\u0002L\u0000\tlocalNameq"
+"\u0000~\u0000#L\u0000\fnamespaceURIq\u0000~\u0000#xpq\u0000~\u0000<q\u0000~\u0000;sq\u0000~\u0000\"t\u0000\u0004typet\u0000)http://w"
+"ww.w3.org/2001/XMLSchema-instanceq\u0000~\u0000!sq\u0000~\u0000\"t\u0000\u0006BaseIDt\u0000%urn:"
+"oasis:names:tc:SAML:2.0:assertionsq\u0000~\u0000\u0010q\u0000~\u0000\u000bp\u0000sq\u0000~\u0000\u0007ppsq\u0000~\u0000\u0015"
+"q\u0000~\u0000\u000bpsq\u0000~\u0000\u0018q\u0000~\u0000\u000bpq\u0000~\u0000\u001bq\u0000~\u0000\u001fq\u0000~\u0000!sq\u0000~\u0000\"t\u00003com.sun.identity.s"
+"aml2.jaxb.assertion.NameIDElementq\u0000~\u0000&sq\u0000~\u0000\u0010q\u0000~\u0000\u000bp\u0000sq\u0000~\u0000\u0000pps"
+"q\u0000~\u0000\u0010pp\u0000sq\u0000~\u0000\u0007ppsq\u0000~\u0000\u0015q\u0000~\u0000\u000bpsq\u0000~\u0000\u0018q\u0000~\u0000\u000bpq\u0000~\u0000\u001bq\u0000~\u0000\u001fq\u0000~\u0000!sq\u0000~\u0000"
+"\"t\u00000com.sun.identity.saml2.jaxb.assertion.NameIDTypeq\u0000~\u0000&sq\u0000"
+"~\u0000\u0007ppsq\u0000~\u0000\u0018q\u0000~\u0000\u000bpq\u0000~\u00004q\u0000~\u0000Dq\u0000~\u0000!sq\u0000~\u0000\"t\u0000\u0006NameIDq\u0000~\u0000Isq\u0000~\u0000\u0010q\u0000"
+"~\u0000\u000bp\u0000sq\u0000~\u0000\u0007ppsq\u0000~\u0000\u0015q\u0000~\u0000\u000bpsq\u0000~\u0000\u0018q\u0000~\u0000\u000bpq\u0000~\u0000\u001bq\u0000~\u0000\u001fq\u0000~\u0000!sq\u0000~\u0000\"t\u0000"
+"8com.sun.identity.saml2.jaxb.assertion.EncryptedIDElementq\u0000~"
+"\u0000&sq\u0000~\u0000\u0010q\u0000~\u0000\u000bp\u0000sq\u0000~\u0000\u0000ppsq\u0000~\u0000\u0010pp\u0000sq\u0000~\u0000\u0007ppsq\u0000~\u0000\u0015q\u0000~\u0000\u000bpsq\u0000~\u0000\u0018q\u0000"
+"~\u0000\u000bpq\u0000~\u0000\u001bq\u0000~\u0000\u001fq\u0000~\u0000!sq\u0000~\u0000\"t\u0000:com.sun.identity.saml2.jaxb.asse"
+"rtion.EncryptedElementTypeq\u0000~\u0000&sq\u0000~\u0000\u0007ppsq\u0000~\u0000\u0018q\u0000~\u0000\u000bpq\u0000~\u00004q\u0000~\u0000"
+"Dq\u0000~\u0000!sq\u0000~\u0000\"t\u0000\u000bEncryptedIDq\u0000~\u0000Iq\u0000~\u0000!sq\u0000~\u0000\u0007ppsq\u0000~\u0000\u0007q\u0000~\u0000\u000bpsq\u0000~"
+"\u0000\u0010q\u0000~\u0000\u000bp\u0000sq\u0000~\u0000\u0007ppsq\u0000~\u0000\u0015q\u0000~\u0000\u000bpsq\u0000~\u0000\u0018q\u0000~\u0000\u000bpq\u0000~\u0000\u001bq\u0000~\u0000\u001fq\u0000~\u0000!sq\u0000~"
+"\u0000\"t\u0000Dcom.sun.identity.saml2.jaxb.assertion.SubjectConfirmati"
+"onDataElementq\u0000~\u0000&sq\u0000~\u0000\u0010q\u0000~\u0000\u000bp\u0000sq\u0000~\u0000\u0000ppsq\u0000~\u0000\u0010pp\u0000sq\u0000~\u0000\u0007ppsq\u0000~"
+"\u0000\u0015q\u0000~\u0000\u000bpsq\u0000~\u0000\u0018q\u0000~\u0000\u000bpq\u0000~\u0000\u001bq\u0000~\u0000\u001fq\u0000~\u0000!sq\u0000~\u0000\"t\u0000Acom.sun.identity"
+".saml2.jaxb.assertion.SubjectConfirmationDataTypeq\u0000~\u0000&sq\u0000~\u0000\u0007"
+"ppsq\u0000~\u0000\u0018q\u0000~\u0000\u000bpq\u0000~\u00004q\u0000~\u0000Dq\u0000~\u0000!sq\u0000~\u0000\"t\u0000\u0017SubjectConfirmationDat"
+"aq\u0000~\u0000Iq\u0000~\u0000!sq\u0000~\u0000\u0018ppsq\u0000~\u00001q\u0000~\u0000\u000bpsr\u0000#com.sun.msv.datatype.xsd."
+"AnyURIType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u00006q\u0000~\u0000;t\u0000\u0006anyURIq\u0000~\u0000?q\u0000~\u0000Asq\u0000~\u0000Bq\u0000~"
+"\u0000\u0086q\u0000~\u0000;sq\u0000~\u0000\"t\u0000\u0006Methodt\u0000\u0000sr\u0000\"com.sun.msv.grammar.ExpressionP"
+"ool\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001L\u0000\bexpTablet\u0000/Lcom/sun/msv/grammar/ExpressionP"
+"ool$ClosedHash;xpsr\u0000-com.sun.msv.grammar.ExpressionPool$Clos"
+"edHash\u00d7j\u00d0N\u00ef\u00e8\u00ed\u001c\u0003\u0000\u0003I\u0000\u0005countB\u0000\rstreamVersionL\u0000\u0006parentt\u0000$Lcom/su"
+"n/msv/grammar/ExpressionPool;xp\u0000\u0000\u0000\"\u0001pq\u0000~\u0000\u0014q\u0000~\u0000*q\u0000~\u0000Kq\u0000~\u0000Sq\u0000~"
+"\u0000]q\u0000~\u0000eq\u0000~\u0000\tq\u0000~\u0000\u000eq\u0000~\u0000qq\u0000~\u0000yq\u0000~\u0000(q\u0000~\u0000Qq\u0000~\u0000cq\u0000~\u0000wq\u0000~\u0000\fq\u0000~\u0000\bq\u0000~"
+"\u0000\u0005q\u0000~\u0000\u0017q\u0000~\u0000+q\u0000~\u0000Lq\u0000~\u0000Tq\u0000~\u0000^q\u0000~\u0000fq\u0000~\u0000rq\u0000~\u0000zq\u0000~\u0000nq\u0000~\u0000\rq\u0000~\u0000/q\u0000~"
+"\u0000Xq\u0000~\u0000jq\u0000~\u0000~q\u0000~\u0000\u0006q\u0000~\u0000\u000fq\u0000~\u0000ox"));
        }
        return new com.sun.msv.verifier.regexp.REDocumentDeclaration(schemaFragment);
    }

    public class Unmarshaller
        extends com.sun.identity.saml2.jaxb.assertion.impl.runtime.AbstractUnmarshallingEventHandlerImpl
    {


        public Unmarshaller(com.sun.identity.saml2.jaxb.assertion.impl.runtime.UnmarshallingContext context) {
            super(context, "--------------");
        }

        protected Unmarshaller(com.sun.identity.saml2.jaxb.assertion.impl.runtime.UnmarshallingContext context, int startState) {
            this(context);
            state = startState;
        }

        public java.lang.Object owner() {
            return com.sun.identity.saml2.jaxb.assertion.impl.SubjectConfirmationTypeImpl.this;
        }

        public void enterElement(java.lang.String ___uri, java.lang.String ___local, java.lang.String ___qname, org.xml.sax.Attributes __atts)
            throws org.xml.sax.SAXException
        {
            int attIdx;
            outer:
            while (true) {
                switch (state) {
                    case  8 :
                        if (("EncryptedData" == ___local)&&("http://www.w3.org/2001/04/xmlenc#" == ___uri)) {
                            _EncryptedID = ((com.sun.identity.saml2.jaxb.assertion.impl.EncryptedElementTypeImpl) spawnChildFromEnterElement((com.sun.identity.saml2.jaxb.assertion.impl.EncryptedElementTypeImpl.class), 9, ___uri, ___local, ___qname, __atts));
                            return ;
                        }
                        if (("EncryptedData" == ___local)&&("http://www.w3.org/2001/04/xmlenc#" == ___uri)) {
                            _EncryptedID = ((com.sun.identity.saml2.jaxb.assertion.impl.EncryptedElementTypeImpl) spawnChildFromEnterElement((com.sun.identity.saml2.jaxb.assertion.impl.EncryptedElementTypeImpl.class), 9, ___uri, ___local, ___qname, __atts));
                            return ;
                        }
                        break;
                    case  0 :
                        attIdx = context.getAttribute("", "Method");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            state = 3;
                            eatText1(v);
                            continue outer;
                        }
                        break;
                    case  5 :
                        attIdx = context.getAttribute("", "Address");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().enterElement(___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        attIdx = context.getAttribute("", "InResponseTo");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().enterElement(___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        attIdx = context.getAttribute("", "NotBefore");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().enterElement(___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        attIdx = context.getAttribute("", "NotOnOrAfter");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().enterElement(___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        attIdx = context.getAttribute("", "Recipient");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().enterElement(___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        if (true) {
                            _SubjectConfirmationData = ((com.sun.identity.saml2.jaxb.assertion.impl.SubjectConfirmationDataTypeImpl) spawnChildFromEnterElement((com.sun.identity.saml2.jaxb.assertion.impl.SubjectConfirmationDataTypeImpl.class), 6, ___uri, ___local, ___qname, __atts));
                            return ;
                        }
                        _SubjectConfirmationData = ((com.sun.identity.saml2.jaxb.assertion.impl.SubjectConfirmationDataTypeImpl) spawnChildFromEnterElement((com.sun.identity.saml2.jaxb.assertion.impl.SubjectConfirmationDataTypeImpl.class), 6, ___uri, ___local, ___qname, __atts));
                        return ;
                    case  12 :
                        attIdx = context.getAttribute("", "NameQualifier");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().enterElement(___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        attIdx = context.getAttribute("", "SPNameQualifier");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().enterElement(___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        _BaseID = ((com.sun.identity.saml2.jaxb.assertion.impl.BaseIDAbstractTypeImpl) spawnChildFromEnterElement((com.sun.identity.saml2.jaxb.assertion.impl.BaseIDAbstractTypeImpl.class), 13, ___uri, ___local, ___qname, __atts));
                        return ;
                    case  10 :
                        attIdx = context.getAttribute("", "NameQualifier");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().enterElement(___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        attIdx = context.getAttribute("", "SPNameQualifier");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().enterElement(___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        attIdx = context.getAttribute("", "Format");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().enterElement(___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        attIdx = context.getAttribute("", "SPProvidedID");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().enterElement(___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        break;
                    case  4 :
                        if (("SubjectConfirmationData" == ___local)&&("urn:oasis:names:tc:SAML:2.0:assertion" == ___uri)) {
                            _SubjectConfirmationData = ((com.sun.identity.saml2.jaxb.assertion.impl.SubjectConfirmationDataElementImpl) spawnChildFromEnterElement((com.sun.identity.saml2.jaxb.assertion.impl.SubjectConfirmationDataElementImpl.class), 7, ___uri, ___local, ___qname, __atts));
                            return ;
                        }
                        if (("SubjectConfirmationData" == ___local)&&("urn:oasis:names:tc:SAML:2.0:assertion" == ___uri)) {
                            context.pushAttributes(__atts, true);
                            state = 5;
                            return ;
                        }
                        state = 7;
                        continue outer;
                    case  3 :
                        if (("BaseID" == ___local)&&("urn:oasis:names:tc:SAML:2.0:assertion" == ___uri)) {
                            _BaseID = ((com.sun.identity.saml2.jaxb.assertion.impl.BaseIDElementImpl) spawnChildFromEnterElement((com.sun.identity.saml2.jaxb.assertion.impl.BaseIDElementImpl.class), 4, ___uri, ___local, ___qname, __atts));
                            return ;
                        }
                        if (("BaseID" == ___local)&&("urn:oasis:names:tc:SAML:2.0:assertion" == ___uri)) {
                            context.pushAttributes(__atts, false);
                            state = 12;
                            return ;
                        }
                        if (("NameID" == ___local)&&("urn:oasis:names:tc:SAML:2.0:assertion" == ___uri)) {
                            _NameID = ((com.sun.identity.saml2.jaxb.assertion.impl.NameIDElementImpl) spawnChildFromEnterElement((com.sun.identity.saml2.jaxb.assertion.impl.NameIDElementImpl.class), 4, ___uri, ___local, ___qname, __atts));
                            return ;
                        }
                        if (("NameID" == ___local)&&("urn:oasis:names:tc:SAML:2.0:assertion" == ___uri)) {
                            context.pushAttributes(__atts, true);
                            state = 10;
                            return ;
                        }
                        if (("EncryptedID" == ___local)&&("urn:oasis:names:tc:SAML:2.0:assertion" == ___uri)) {
                            _EncryptedID = ((com.sun.identity.saml2.jaxb.assertion.impl.EncryptedIDElementImpl) spawnChildFromEnterElement((com.sun.identity.saml2.jaxb.assertion.impl.EncryptedIDElementImpl.class), 4, ___uri, ___local, ___qname, __atts));
                            return ;
                        }
                        if (("EncryptedID" == ___local)&&("urn:oasis:names:tc:SAML:2.0:assertion" == ___uri)) {
                            context.pushAttributes(__atts, false);
                            state = 8;
                            return ;
                        }
                        state = 4;
                        continue outer;
                    case  7 :
                        revertToParentFromEnterElement(___uri, ___local, ___qname, __atts);
                        return ;
                }
                super.enterElement(___uri, ___local, ___qname, __atts);
                break;
            }
        }

        private void eatText1(final java.lang.String value)
            throws org.xml.sax.SAXException
        {
            try {
                _Method = com.sun.xml.bind.WhiteSpaceProcessor.collapse(value);
            } catch (java.lang.Exception e) {
                handleParseConversionException(e);
            }
        }

        public void leaveElement(java.lang.String ___uri, java.lang.String ___local, java.lang.String ___qname)
            throws org.xml.sax.SAXException
        {
            int attIdx;
            outer:
            while (true) {
                switch (state) {
                    case  13 :
                        if (("BaseID" == ___local)&&("urn:oasis:names:tc:SAML:2.0:assertion" == ___uri)) {
                            context.popAttributes();
                            state = 4;
                            return ;
                        }
                        break;
                    case  11 :
                        if (("NameID" == ___local)&&("urn:oasis:names:tc:SAML:2.0:assertion" == ___uri)) {
                            context.popAttributes();
                            state = 4;
                            return ;
                        }
                        break;
                    case  0 :
                        attIdx = context.getAttribute("", "Method");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            state = 3;
                            eatText1(v);
                            continue outer;
                        }
                        break;
                    case  9 :
                        if (("EncryptedID" == ___local)&&("urn:oasis:names:tc:SAML:2.0:assertion" == ___uri)) {
                            context.popAttributes();
                            state = 4;
                            return ;
                        }
                        break;
                    case  5 :
                        attIdx = context.getAttribute("", "Address");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().leaveElement(___uri, ___local, ___qname);
                            return ;
                        }
                        attIdx = context.getAttribute("", "InResponseTo");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().leaveElement(___uri, ___local, ___qname);
                            return ;
                        }
                        attIdx = context.getAttribute("", "NotBefore");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().leaveElement(___uri, ___local, ___qname);
                            return ;
                        }
                        attIdx = context.getAttribute("", "NotOnOrAfter");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().leaveElement(___uri, ___local, ___qname);
                            return ;
                        }
                        attIdx = context.getAttribute("", "Recipient");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().leaveElement(___uri, ___local, ___qname);
                            return ;
                        }
                        _SubjectConfirmationData = ((com.sun.identity.saml2.jaxb.assertion.impl.SubjectConfirmationDataTypeImpl) spawnChildFromLeaveElement((com.sun.identity.saml2.jaxb.assertion.impl.SubjectConfirmationDataTypeImpl.class), 6, ___uri, ___local, ___qname));
                        return ;
                    case  12 :
                        attIdx = context.getAttribute("", "NameQualifier");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().leaveElement(___uri, ___local, ___qname);
                            return ;
                        }
                        attIdx = context.getAttribute("", "SPNameQualifier");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().leaveElement(___uri, ___local, ___qname);
                            return ;
                        }
                        _BaseID = ((com.sun.identity.saml2.jaxb.assertion.impl.BaseIDAbstractTypeImpl) spawnChildFromLeaveElement((com.sun.identity.saml2.jaxb.assertion.impl.BaseIDAbstractTypeImpl.class), 13, ___uri, ___local, ___qname));
                        return ;
                    case  10 :
                        attIdx = context.getAttribute("", "NameQualifier");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().leaveElement(___uri, ___local, ___qname);
                            return ;
                        }
                        attIdx = context.getAttribute("", "SPNameQualifier");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().leaveElement(___uri, ___local, ___qname);
                            return ;
                        }
                        attIdx = context.getAttribute("", "Format");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().leaveElement(___uri, ___local, ___qname);
                            return ;
                        }
                        attIdx = context.getAttribute("", "SPProvidedID");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().leaveElement(___uri, ___local, ___qname);
                            return ;
                        }
                        break;
                    case  4 :
                        state = 7;
                        continue outer;
                    case  3 :
                        state = 4;
                        continue outer;
                    case  7 :
                        revertToParentFromLeaveElement(___uri, ___local, ___qname);
                        return ;
                    case  6 :
                        if (("SubjectConfirmationData" == ___local)&&("urn:oasis:names:tc:SAML:2.0:assertion" == ___uri)) {
                            context.popAttributes();
                            state = 7;
                            return ;
                        }
                        break;
                }
                super.leaveElement(___uri, ___local, ___qname);
                break;
            }
        }

        public void enterAttribute(java.lang.String ___uri, java.lang.String ___local, java.lang.String ___qname)
            throws org.xml.sax.SAXException
        {
            int attIdx;
            outer:
            while (true) {
                switch (state) {
                    case  0 :
                        if (("Method" == ___local)&&("" == ___uri)) {
                            state = 1;
                            return ;
                        }
                        break;
                    case  5 :
                        if (("Address" == ___local)&&("" == ___uri)) {
                            _SubjectConfirmationData = ((com.sun.identity.saml2.jaxb.assertion.impl.SubjectConfirmationDataTypeImpl) spawnChildFromEnterAttribute((com.sun.identity.saml2.jaxb.assertion.impl.SubjectConfirmationDataTypeImpl.class), 6, ___uri, ___local, ___qname));
                            return ;
                        }
                        if (("InResponseTo" == ___local)&&("" == ___uri)) {
                            _SubjectConfirmationData = ((com.sun.identity.saml2.jaxb.assertion.impl.SubjectConfirmationDataTypeImpl) spawnChildFromEnterAttribute((com.sun.identity.saml2.jaxb.assertion.impl.SubjectConfirmationDataTypeImpl.class), 6, ___uri, ___local, ___qname));
                            return ;
                        }
                        if (("NotBefore" == ___local)&&("" == ___uri)) {
                            _SubjectConfirmationData = ((com.sun.identity.saml2.jaxb.assertion.impl.SubjectConfirmationDataTypeImpl) spawnChildFromEnterAttribute((com.sun.identity.saml2.jaxb.assertion.impl.SubjectConfirmationDataTypeImpl.class), 6, ___uri, ___local, ___qname));
                            return ;
                        }
                        if (("NotOnOrAfter" == ___local)&&("" == ___uri)) {
                            _SubjectConfirmationData = ((com.sun.identity.saml2.jaxb.assertion.impl.SubjectConfirmationDataTypeImpl) spawnChildFromEnterAttribute((com.sun.identity.saml2.jaxb.assertion.impl.SubjectConfirmationDataTypeImpl.class), 6, ___uri, ___local, ___qname));
                            return ;
                        }
                        if (("Recipient" == ___local)&&("" == ___uri)) {
                            _SubjectConfirmationData = ((com.sun.identity.saml2.jaxb.assertion.impl.SubjectConfirmationDataTypeImpl) spawnChildFromEnterAttribute((com.sun.identity.saml2.jaxb.assertion.impl.SubjectConfirmationDataTypeImpl.class), 6, ___uri, ___local, ___qname));
                            return ;
                        }
                        _SubjectConfirmationData = ((com.sun.identity.saml2.jaxb.assertion.impl.SubjectConfirmationDataTypeImpl) spawnChildFromEnterAttribute((com.sun.identity.saml2.jaxb.assertion.impl.SubjectConfirmationDataTypeImpl.class), 6, ___uri, ___local, ___qname));
                        return ;
                    case  12 :
                        if (("NameQualifier" == ___local)&&("" == ___uri)) {
                            _BaseID = ((com.sun.identity.saml2.jaxb.assertion.impl.BaseIDAbstractTypeImpl) spawnChildFromEnterAttribute((com.sun.identity.saml2.jaxb.assertion.impl.BaseIDAbstractTypeImpl.class), 13, ___uri, ___local, ___qname));
                            return ;
                        }
                        if (("SPNameQualifier" == ___local)&&("" == ___uri)) {
                            _BaseID = ((com.sun.identity.saml2.jaxb.assertion.impl.BaseIDAbstractTypeImpl) spawnChildFromEnterAttribute((com.sun.identity.saml2.jaxb.assertion.impl.BaseIDAbstractTypeImpl.class), 13, ___uri, ___local, ___qname));
                            return ;
                        }
                        _BaseID = ((com.sun.identity.saml2.jaxb.assertion.impl.BaseIDAbstractTypeImpl) spawnChildFromEnterAttribute((com.sun.identity.saml2.jaxb.assertion.impl.BaseIDAbstractTypeImpl.class), 13, ___uri, ___local, ___qname));
                        return ;
                    case  10 :
                        if (("NameQualifier" == ___local)&&("" == ___uri)) {
                            _NameID = ((com.sun.identity.saml2.jaxb.assertion.impl.NameIDTypeImpl) spawnChildFromEnterAttribute((com.sun.identity.saml2.jaxb.assertion.impl.NameIDTypeImpl.class), 11, ___uri, ___local, ___qname));
                            return ;
                        }
                        if (("SPNameQualifier" == ___local)&&("" == ___uri)) {
                            _NameID = ((com.sun.identity.saml2.jaxb.assertion.impl.NameIDTypeImpl) spawnChildFromEnterAttribute((com.sun.identity.saml2.jaxb.assertion.impl.NameIDTypeImpl.class), 11, ___uri, ___local, ___qname));
                            return ;
                        }
                        if (("Format" == ___local)&&("" == ___uri)) {
                            _NameID = ((com.sun.identity.saml2.jaxb.assertion.impl.NameIDTypeImpl) spawnChildFromEnterAttribute((com.sun.identity.saml2.jaxb.assertion.impl.NameIDTypeImpl.class), 11, ___uri, ___local, ___qname));
                            return ;
                        }
                        if (("SPProvidedID" == ___local)&&("" == ___uri)) {
                            _NameID = ((com.sun.identity.saml2.jaxb.assertion.impl.NameIDTypeImpl) spawnChildFromEnterAttribute((com.sun.identity.saml2.jaxb.assertion.impl.NameIDTypeImpl.class), 11, ___uri, ___local, ___qname));
                            return ;
                        }
                        break;
                    case  4 :
                        state = 7;
                        continue outer;
                    case  3 :
                        state = 4;
                        continue outer;
                    case  7 :
                        revertToParentFromEnterAttribute(___uri, ___local, ___qname);
                        return ;
                }
                super.enterAttribute(___uri, ___local, ___qname);
                break;
            }
        }

        public void leaveAttribute(java.lang.String ___uri, java.lang.String ___local, java.lang.String ___qname)
            throws org.xml.sax.SAXException
        {
            int attIdx;
            outer:
            while (true) {
                switch (state) {
                    case  0 :
                        attIdx = context.getAttribute("", "Method");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            state = 3;
                            eatText1(v);
                            continue outer;
                        }
                        break;
                    case  2 :
                        if (("Method" == ___local)&&("" == ___uri)) {
                            state = 3;
                            return ;
                        }
                        break;
                    case  5 :
                        attIdx = context.getAttribute("", "Address");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().leaveAttribute(___uri, ___local, ___qname);
                            return ;
                        }
                        attIdx = context.getAttribute("", "InResponseTo");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().leaveAttribute(___uri, ___local, ___qname);
                            return ;
                        }
                        attIdx = context.getAttribute("", "NotBefore");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().leaveAttribute(___uri, ___local, ___qname);
                            return ;
                        }
                        attIdx = context.getAttribute("", "NotOnOrAfter");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().leaveAttribute(___uri, ___local, ___qname);
                            return ;
                        }
                        attIdx = context.getAttribute("", "Recipient");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().leaveAttribute(___uri, ___local, ___qname);
                            return ;
                        }
                        _SubjectConfirmationData = ((com.sun.identity.saml2.jaxb.assertion.impl.SubjectConfirmationDataTypeImpl) spawnChildFromLeaveAttribute((com.sun.identity.saml2.jaxb.assertion.impl.SubjectConfirmationDataTypeImpl.class), 6, ___uri, ___local, ___qname));
                        return ;
                    case  12 :
                        attIdx = context.getAttribute("", "NameQualifier");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().leaveAttribute(___uri, ___local, ___qname);
                            return ;
                        }
                        attIdx = context.getAttribute("", "SPNameQualifier");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().leaveAttribute(___uri, ___local, ___qname);
                            return ;
                        }
                        _BaseID = ((com.sun.identity.saml2.jaxb.assertion.impl.BaseIDAbstractTypeImpl) spawnChildFromLeaveAttribute((com.sun.identity.saml2.jaxb.assertion.impl.BaseIDAbstractTypeImpl.class), 13, ___uri, ___local, ___qname));
                        return ;
                    case  10 :
                        attIdx = context.getAttribute("", "NameQualifier");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().leaveAttribute(___uri, ___local, ___qname);
                            return ;
                        }
                        attIdx = context.getAttribute("", "SPNameQualifier");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().leaveAttribute(___uri, ___local, ___qname);
                            return ;
                        }
                        attIdx = context.getAttribute("", "Format");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().leaveAttribute(___uri, ___local, ___qname);
                            return ;
                        }
                        attIdx = context.getAttribute("", "SPProvidedID");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().leaveAttribute(___uri, ___local, ___qname);
                            return ;
                        }
                        break;
                    case  4 :
                        state = 7;
                        continue outer;
                    case  3 :
                        state = 4;
                        continue outer;
                    case  7 :
                        revertToParentFromLeaveAttribute(___uri, ___local, ___qname);
                        return ;
                }
                super.leaveAttribute(___uri, ___local, ___qname);
                break;
            }
        }

        public void handleText(final java.lang.String value)
            throws org.xml.sax.SAXException
        {
            int attIdx;
            outer:
            while (true) {
                try {
                    switch (state) {
                        case  1 :
                            state = 2;
                            eatText1(value);
                            return ;
                        case  0 :
                            attIdx = context.getAttribute("", "Method");
                            if (attIdx >= 0) {
                                final java.lang.String v = context.eatAttribute(attIdx);
                                state = 3;
                                eatText1(v);
                                continue outer;
                            }
                            break;
                        case  5 :
                            attIdx = context.getAttribute("", "Address");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().text(value);
                                return ;
                            }
                            attIdx = context.getAttribute("", "InResponseTo");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().text(value);
                                return ;
                            }
                            attIdx = context.getAttribute("", "NotBefore");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().text(value);
                                return ;
                            }
                            attIdx = context.getAttribute("", "NotOnOrAfter");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().text(value);
                                return ;
                            }
                            attIdx = context.getAttribute("", "Recipient");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().text(value);
                                return ;
                            }
                            _SubjectConfirmationData = ((com.sun.identity.saml2.jaxb.assertion.impl.SubjectConfirmationDataTypeImpl) spawnChildFromText((com.sun.identity.saml2.jaxb.assertion.impl.SubjectConfirmationDataTypeImpl.class), 6, value));
                            return ;
                        case  12 :
                            attIdx = context.getAttribute("", "NameQualifier");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().text(value);
                                return ;
                            }
                            attIdx = context.getAttribute("", "SPNameQualifier");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().text(value);
                                return ;
                            }
                            _BaseID = ((com.sun.identity.saml2.jaxb.assertion.impl.BaseIDAbstractTypeImpl) spawnChildFromText((com.sun.identity.saml2.jaxb.assertion.impl.BaseIDAbstractTypeImpl.class), 13, value));
                            return ;
                        case  10 :
                            attIdx = context.getAttribute("", "NameQualifier");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().text(value);
                                return ;
                            }
                            attIdx = context.getAttribute("", "SPNameQualifier");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().text(value);
                                return ;
                            }
                            attIdx = context.getAttribute("", "Format");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().text(value);
                                return ;
                            }
                            attIdx = context.getAttribute("", "SPProvidedID");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().text(value);
                                return ;
                            }
                            _NameID = ((com.sun.identity.saml2.jaxb.assertion.impl.NameIDTypeImpl) spawnChildFromText((com.sun.identity.saml2.jaxb.assertion.impl.NameIDTypeImpl.class), 11, value));
                            return ;
                        case  4 :
                            state = 7;
                            continue outer;
                        case  3 :
                            state = 4;
                            continue outer;
                        case  7 :
                            revertToParentFromText(value);
                            return ;
                    }
                } catch (java.lang.RuntimeException e) {
                    handleUnexpectedTextException(value, e);
                }
                break;
            }
        }

    }

}
